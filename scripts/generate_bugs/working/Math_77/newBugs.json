{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/main/java/org/apache/commons/math/linear/ArrayRealVector.java",
            "from_line_no": 721,
            "to_line_no": 721,
            "replaced_with": "            max = Math.max(max, Math.abs(a));\n",
            "replaced": "            max += Math.max(max, Math.abs(a));\n",
            "patch_type": "replace",
            "next_line_no": 722
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java",
            "from_line_no": 498,
            "to_line_no": 506,
            "replaced": "    public double getLInfNorm() {\n        double max = 0;\n        Iterator iter = entries.iterator();\n        while (iter.hasNext()) {\n            iter.advance();\n            max += iter.value();\n        }\n        return max;\n    }\n",
            "patch_type": "delete",
            "next_line_no": 507
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.linear.ArrayRealVectorTest::testBasicFunctions",
            "org.apache.commons.math.linear.SparseRealVectorTest::testBasicFunctions"
        ],
        "org.apache.commons.math.linear.ArrayRealVectorTest::testBasicFunctions": {
            "file_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
            "Instance": "Begin: Pos(1080, 12)\nEnd: Pos(1232, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_77/src/test/java//org/apache/commons/math/linear/ArrayRealVectorTest.java\nName: testBasicFunctions\nChilds: [StatementAssertion<Begin: Pos(1090, 9), End: Pos(1090, 75)>,\nStatementAssertion<Begin: Pos(1094, 9), End: Pos(1094, 60)>,\nStatementAssertion<Begin: Pos(1098, 9), End: Pos(1098, 61)>,\nStatementAssertion<Begin: Pos(1103, 9), End: Pos(1103, 74)>,\nStatementAssertion<Begin: Pos(1107, 9), End: Pos(1107, 76)>,\nStatementAssertion<Begin: Pos(1111, 9), End: Pos(1111, 76)>,\nStatementAssertion<Begin: Pos(1115, 9), End: Pos(1115, 62)>,\nStatementAssertion<Begin: Pos(1118, 9), End: Pos(1118, 64)>,\nStatementAssertion<Begin: Pos(1121, 9), End: Pos(1121, 64)>,\nStatementAssertion<Begin: Pos(1125, 9), End: Pos(1125, 64)>,\nStatementAssertion<Begin: Pos(1128, 9), End: Pos(1128, 66)>,\nStatementAssertion<Begin: Pos(1131, 9), End: Pos(1131, 66)>,\nStatementAssertion<Begin: Pos(1136, 9), End: Pos(1136, 78)>,\nStatementAssertion<Begin: Pos(1141, 9), End: Pos(1141, 82)>,\nStatementAssertion<Begin: Pos(1146, 9), End: Pos(1146, 88)>,\nStatementAssertion<Begin: Pos(1150, 9), End: Pos(1150, 92)>,\nStatementAssertion<Begin: Pos(1155, 9), End: Pos(1155, 94)>,\nStatementAssertion<Begin: Pos(1159, 9), End: Pos(1159, 98)>,\nStatementAssertion<Begin: Pos(1163, 9), End: Pos(1163, 98)>,\nStatementAssertion<Begin: Pos(1168, 9), End: Pos(1168, 90)>,\nStatementAssertion<Begin: Pos(1172, 9), End: Pos(1172, 94)>,\nStatementAssertion<Begin: Pos(1176, 9), End: Pos(1176, 94)>,\nStatementAssertion<Begin: Pos(1180, 9), End: Pos(1180, 46)>,\nStatementAssertion<Begin: Pos(1184, 9), End: Pos(1184, 48)>,\nStatementAssertion<Begin: Pos(1187, 9), End: Pos(1187, 70)>,\nStatementAssertion<Begin: Pos(1190, 9), End: Pos(1190, 72)>,\nStatementAssertion<Begin: Pos(1193, 9), End: Pos(1193, 72)>,\nStatementAssertion<Begin: Pos(1197, 9), End: Pos(1197, 99)>,\nStatementAssertion<Begin: Pos(1201, 13), End: Pos(1201, 50)>,\nStatementAssertion<Begin: Pos(1205, 13), End: Pos(1205, 43)>,\nStatementAssertion<Begin: Pos(1210, 9), End: Pos(1210, 96)>,\nStatementAssertion<Begin: Pos(1213, 13), End: Pos(1213, 50)>,\nStatementAssertion<Begin: Pos(1217, 13), End: Pos(1217, 43)>,\nStatementAssertion<Begin: Pos(1222, 9), End: Pos(1222, 94)>,\nStatementAssertion<Begin: Pos(1226, 9), End: Pos(1226, 98)>,\nStatementAssertion<Begin: Pos(1230, 9), End: Pos(1230, 98)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_77/src/test/java//org/apache/commons/math/linear/ArrayRealVectorTest.java",
            "name": "testBasicFunctions",
            "begin": "Pos(1080, 12)",
            "end": "Pos(1232, 5)",
            "begin_line_no": 1080,
            "end_line_no": 1232,
            "child": [
                "Begin: Pos(1090, 9)\nEnd: Pos(1090, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1094, 9)\nEnd: Pos(1094, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1098, 9)\nEnd: Pos(1098, 61)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1103, 9)\nEnd: Pos(1103, 74)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1107, 9)\nEnd: Pos(1107, 76)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1111, 9)\nEnd: Pos(1111, 76)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1115, 9)\nEnd: Pos(1115, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1118, 9)\nEnd: Pos(1118, 64)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1121, 9)\nEnd: Pos(1121, 64)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1125, 9)\nEnd: Pos(1125, 64)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1128, 9)\nEnd: Pos(1128, 66)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1131, 9)\nEnd: Pos(1131, 66)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1136, 9)\nEnd: Pos(1136, 78)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1141, 9)\nEnd: Pos(1141, 82)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1146, 9)\nEnd: Pos(1146, 88)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1150, 9)\nEnd: Pos(1150, 92)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1155, 9)\nEnd: Pos(1155, 94)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1159, 9)\nEnd: Pos(1159, 98)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1163, 9)\nEnd: Pos(1163, 98)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1168, 9)\nEnd: Pos(1168, 90)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1172, 9)\nEnd: Pos(1172, 94)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1176, 9)\nEnd: Pos(1176, 94)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1180, 9)\nEnd: Pos(1180, 46)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1184, 9)\nEnd: Pos(1184, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1187, 9)\nEnd: Pos(1187, 70)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1190, 9)\nEnd: Pos(1190, 72)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1193, 9)\nEnd: Pos(1193, 72)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1197, 9)\nEnd: Pos(1197, 99)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1201, 13)\nEnd: Pos(1201, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1205, 13)\nEnd: Pos(1205, 43)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1210, 9)\nEnd: Pos(1210, 96)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1213, 13)\nEnd: Pos(1213, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1217, 13)\nEnd: Pos(1217, 43)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1222, 9)\nEnd: Pos(1222, 94)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1226, 9)\nEnd: Pos(1226, 98)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1230, 9)\nEnd: Pos(1230, 98)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testBasicFunctions$catena_0() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_1() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_2() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_3() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_4() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_5() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_6() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        assertEquals(\"compare values  \",9d, d_getL1Distance );                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_7() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_8() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_9() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        assertEquals(\"compare values  \",3d, d_getLInfDistance );                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_10() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_11() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_12() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_13() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_14() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_15() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_16() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_17() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_18() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_19() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_20() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_21() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_22() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        assertEquals(\"compare val \",32d, dot);                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_23() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        assertEquals(\"compare val \",32d, dot_2);                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_24() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_25() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_26() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_27() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);         /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_28() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            fail(\"Expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_29() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_30() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);            /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_31() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            fail(\"Expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_32() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_33() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_34() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_35() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);          /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            ],
            "func": {
                "0": "    public void testBasicFunctions$catena_0() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "1": "    public void testBasicFunctions$catena_1() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "2": "    public void testBasicFunctions$catena_2() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "3": "    public void testBasicFunctions$catena_3() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "4": "    public void testBasicFunctions$catena_4() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "5": "    public void testBasicFunctions$catena_5() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "6": "    public void testBasicFunctions$catena_6() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        assertEquals(\"compare values  \",9d, d_getL1Distance );                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "7": "    public void testBasicFunctions$catena_7() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "8": "    public void testBasicFunctions$catena_8() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "9": "    public void testBasicFunctions$catena_9() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        assertEquals(\"compare values  \",3d, d_getLInfDistance );                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "10": "    public void testBasicFunctions$catena_10() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "11": "    public void testBasicFunctions$catena_11() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "12": "    public void testBasicFunctions$catena_12() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "13": "    public void testBasicFunctions$catena_13() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "14": "    public void testBasicFunctions$catena_14() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "15": "    public void testBasicFunctions$catena_15() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "16": "    public void testBasicFunctions$catena_16() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "17": "    public void testBasicFunctions$catena_17() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "18": "    public void testBasicFunctions$catena_18() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "19": "    public void testBasicFunctions$catena_19() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "20": "    public void testBasicFunctions$catena_20() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "21": "    public void testBasicFunctions$catena_21() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "22": "    public void testBasicFunctions$catena_22() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        assertEquals(\"compare val \",32d, dot);                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "23": "    public void testBasicFunctions$catena_23() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        assertEquals(\"compare val \",32d, dot_2);                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "24": "    public void testBasicFunctions$catena_24() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "25": "    public void testBasicFunctions$catena_25() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "26": "    public void testBasicFunctions$catena_26() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "27": "    public void testBasicFunctions$catena_27() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);         /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "28": "    public void testBasicFunctions$catena_28() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            fail(\"Expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "29": "    public void testBasicFunctions$catena_29() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "30": "    public void testBasicFunctions$catena_30() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);            /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "31": "    public void testBasicFunctions$catena_31() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            fail(\"Expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "32": "    public void testBasicFunctions$catena_32() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "33": "    public void testBasicFunctions$catena_33() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "34": "    public void testBasicFunctions$catena_34() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "35": "    public void testBasicFunctions$catena_35() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);          /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            }
        },
        "org.apache.commons.math.linear.SparseRealVectorTest::testBasicFunctions": {
            "file_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
            "Instance": "Begin: Pos(950, 12)\nEnd: Pos(1076, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_77/src/test/java//org/apache/commons/math/linear/SparseRealVectorTest.java\nName: testBasicFunctions\nChilds: [StatementAssertion<Begin: Pos(960, 9), End: Pos(960, 75)>,\nStatementAssertion<Begin: Pos(964, 9), End: Pos(964, 60)>,\nStatementAssertion<Begin: Pos(968, 9), End: Pos(968, 61)>,\nStatementAssertion<Begin: Pos(972, 9), End: Pos(972, 74)>,\nStatementAssertion<Begin: Pos(976, 9), End: Pos(976, 76)>,\nStatementAssertion<Begin: Pos(980, 9), End: Pos(980, 62)>,\nStatementAssertion<Begin: Pos(983, 9), End: Pos(983, 64)>,\nStatementAssertion<Begin: Pos(987, 9), End: Pos(987, 64)>,\nStatementAssertion<Begin: Pos(990, 9), End: Pos(990, 66)>,\nStatementAssertion<Begin: Pos(995, 9), End: Pos(995, 78)>,\nStatementAssertion<Begin: Pos(1000, 9), End: Pos(1000, 82)>,\nStatementAssertion<Begin: Pos(1005, 9), End: Pos(1005, 88)>,\nStatementAssertion<Begin: Pos(1009, 9), End: Pos(1009, 92)>,\nStatementAssertion<Begin: Pos(1014, 9), End: Pos(1014, 94)>,\nStatementAssertion<Begin: Pos(1018, 9), End: Pos(1018, 98)>,\nStatementAssertion<Begin: Pos(1023, 9), End: Pos(1023, 90)>,\nStatementAssertion<Begin: Pos(1027, 9), End: Pos(1027, 94)>,\nStatementAssertion<Begin: Pos(1031, 9), End: Pos(1031, 46)>,\nStatementAssertion<Begin: Pos(1035, 9), End: Pos(1035, 48)>,\nStatementAssertion<Begin: Pos(1038, 9), End: Pos(1038, 70)>,\nStatementAssertion<Begin: Pos(1041, 9), End: Pos(1041, 72)>,\nStatementAssertion<Begin: Pos(1045, 9), End: Pos(1045, 99)>,\nStatementAssertion<Begin: Pos(1049, 13), End: Pos(1049, 50)>,\nStatementAssertion<Begin: Pos(1053, 13), End: Pos(1053, 43)>,\nStatementAssertion<Begin: Pos(1058, 9), End: Pos(1058, 96)>,\nStatementAssertion<Begin: Pos(1061, 13), End: Pos(1061, 50)>,\nStatementAssertion<Begin: Pos(1065, 13), End: Pos(1065, 43)>,\nStatementAssertion<Begin: Pos(1070, 9), End: Pos(1070, 94)>,\nStatementAssertion<Begin: Pos(1074, 9), End: Pos(1074, 98)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_77/src/test/java//org/apache/commons/math/linear/SparseRealVectorTest.java",
            "name": "testBasicFunctions",
            "begin": "Pos(950, 12)",
            "end": "Pos(1076, 5)",
            "begin_line_no": 950,
            "end_line_no": 1076,
            "child": [
                "Begin: Pos(960, 9)\nEnd: Pos(960, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(964, 9)\nEnd: Pos(964, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(968, 9)\nEnd: Pos(968, 61)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(972, 9)\nEnd: Pos(972, 74)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(976, 9)\nEnd: Pos(976, 76)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(980, 9)\nEnd: Pos(980, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(983, 9)\nEnd: Pos(983, 64)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(987, 9)\nEnd: Pos(987, 64)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(990, 9)\nEnd: Pos(990, 66)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(995, 9)\nEnd: Pos(995, 78)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1000, 9)\nEnd: Pos(1000, 82)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1005, 9)\nEnd: Pos(1005, 88)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1009, 9)\nEnd: Pos(1009, 92)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1014, 9)\nEnd: Pos(1014, 94)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1018, 9)\nEnd: Pos(1018, 98)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1023, 9)\nEnd: Pos(1023, 90)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1027, 9)\nEnd: Pos(1027, 94)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1031, 9)\nEnd: Pos(1031, 46)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1035, 9)\nEnd: Pos(1035, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1038, 9)\nEnd: Pos(1038, 70)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1041, 9)\nEnd: Pos(1041, 72)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1045, 9)\nEnd: Pos(1045, 99)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1049, 13)\nEnd: Pos(1049, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1053, 13)\nEnd: Pos(1053, 43)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1058, 9)\nEnd: Pos(1058, 96)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1061, 13)\nEnd: Pos(1061, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1065, 13)\nEnd: Pos(1065, 43)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1070, 9)\nEnd: Pos(1070, 94)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1074, 9)\nEnd: Pos(1074, 98)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testBasicFunctions$catena_0() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_1() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_2() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_3() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_4() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_5() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        assertEquals(\"compare values  \",9d, d_getL1Distance );                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_6() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_7() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        assertEquals(\"compare values  \",3d, d_getLInfDistance );                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_8() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_9() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_10() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_11() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_12() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_13() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_14() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_15() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_16() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_17() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        assertEquals(\"compare val \",32d, dot);                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_18() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        assertEquals(\"compare val \",32d, dot_2);                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_19() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_20() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_21() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);         /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_22() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            fail(\"Expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_23() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_24() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);            /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_25() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            fail(\"Expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_26() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_27() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testBasicFunctions$catena_28() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);          /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            ],
            "func": {
                "0": "    public void testBasicFunctions$catena_0() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "1": "    public void testBasicFunctions$catena_1() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "2": "    public void testBasicFunctions$catena_2() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "3": "    public void testBasicFunctions$catena_3() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "4": "    public void testBasicFunctions$catena_4() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "5": "    public void testBasicFunctions$catena_5() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        assertEquals(\"compare values  \",9d, d_getL1Distance );                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "6": "    public void testBasicFunctions$catena_6() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "7": "    public void testBasicFunctions$catena_7() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        assertEquals(\"compare values  \",3d, d_getLInfDistance );                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "8": "    public void testBasicFunctions$catena_8() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "9": "    public void testBasicFunctions$catena_9() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "10": "    public void testBasicFunctions$catena_10() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "11": "    public void testBasicFunctions$catena_11() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "12": "    public void testBasicFunctions$catena_12() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "13": "    public void testBasicFunctions$catena_13() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "14": "    public void testBasicFunctions$catena_14() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "15": "    public void testBasicFunctions$catena_15() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "16": "    public void testBasicFunctions$catena_16() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "17": "    public void testBasicFunctions$catena_17() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        assertEquals(\"compare val \",32d, dot);                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "18": "    public void testBasicFunctions$catena_18() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        assertEquals(\"compare val \",32d, dot_2);                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "19": "    public void testBasicFunctions$catena_19() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "20": "    public void testBasicFunctions$catena_20() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "21": "    public void testBasicFunctions$catena_21() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);         /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "22": "    public void testBasicFunctions$catena_22() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            fail(\"Expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "23": "    public void testBasicFunctions$catena_23() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "24": "    public void testBasicFunctions$catena_24() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);            /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "25": "    public void testBasicFunctions$catena_25() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            fail(\"Expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "26": "    public void testBasicFunctions$catena_26() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            fail(\"wrong exception caught\");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "27": "    public void testBasicFunctions$catena_27() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "28": "    public void testBasicFunctions$catena_28() {\n        OpenMapRealVector v1 = new OpenMapRealVector(vec1);\n        OpenMapRealVector v2 = new OpenMapRealVector(vec2);\n        OpenMapRealVector v5 = new OpenMapRealVector(vec5);\n        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);\n\n        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        try{ assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        OpenMapRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        OpenMapRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        RealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        OpenMapRealVector v_unitize = v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        RealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);          /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            }
        }
    },
    "01": {
        "failing_tests": [
            "org.apache.commons.math.linear.SparseRealVectorTest::testBasicFunctions$catena_2"
        ]
    },
    "10": {
        "failing_tests": [
            "org.apache.commons.math.linear.ArrayRealVectorTest::testBasicFunctions$catena_2"
        ]
    }
}