---
Begin generate bug_id: Math_6
num_of_hunks: 17
NOTICE: may not contains full fix patterns for hunks are too much (17 hunks)
timeout for running: 3600
use working dir: ./working/data/Math_6
Try to checkout Math_6
build dir: ['./working/data/Math_6/target/classes', './working/data/Math_6/target/test-classes']
init FileManager
trace file: src/main/java/org/apache/commons/math3/optim/BaseOptimizer.java
trace file: src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizer.java
trace file: src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizer.java
trace file: src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizer.java
trace file: src/main/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizer.java
trace file: src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizer.java
trace file: src/main/java/org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizer.java
trying to replace old failing tests
edit: replace from 124 range 19 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java
to
    @Test
    public void testTrivial$catena_0() {
        LinearProblem problem
            = new LinearProblem(new double[][] { { 2 } }, new double[] { 3 });
        NonLinearConjugateGradientOptimizer optimizer
            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
                                                      new SimpleValueChecker(1e-6, 1e-6));
        PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 problem.getObjectiveFunction(),
                                 problem.getObjectiveFunctionGradient(),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 0 }));
        Assert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);                                           /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertEquals(0.0, optimum.getValue(), 1.0e-10);                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testTrivial$catena_1() {
        LinearProblem problem
            = new LinearProblem(new double[][] { { 2 } }, new double[] { 3 });
        NonLinearConjugateGradientOptimizer optimizer
            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
                                                      new SimpleValueChecker(1e-6, 1e-6));
        PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 problem.getObjectiveFunction(),
                                 problem.getObjectiveFunctionGradient(),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 0 }));
        try{ Assert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertEquals(0.0, optimum.getValue(), 1.0e-10);                                              /***** ORIGINAL ASSERTION IS HERE *****/

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testTrivial$catena_2() {
        LinearProblem problem
            = new LinearProblem(new double[][] { { 2 } }, new double[] { 3 });
        NonLinearConjugateGradientOptimizer optimizer
            = new NonLinearConjugateGradientOptimizer(NonLinearConjugateGradientOptimizer.Formula.POLAK_RIBIERE,
                                                      new SimpleValueChecker(1e-6, 1e-6));
        PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 problem.getObjectiveFunction(),
                                 problem.getObjectiveFunctionGradient(),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 0 }));
        try{ Assert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(0.0, optimum.getValue(), 1.0e-10);                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);                                                   /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 341 range 14 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
to
    @Test
    public void testConstrainedRosen$catena_0() {
        double[] startPoint = point(DIM, 0.1);
        double[] insigma = point(DIM, 0.1);
        double[][] boundaries = boundaries(DIM, -1, 2);
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testConstrainedRosen$catena_1() {
        double[] startPoint = point(DIM, 0.1);
        double[] insigma = point(DIM, 0.1);
        double[][] boundaries = boundaries(DIM, -1, 2);
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        try{ doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 176 range 14 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
to
    @Test
    public void testElliRotated$catena_0() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new ElliRotated(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ doTest(new ElliRotated(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testElliRotated$catena_1() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        try{ doTest(new ElliRotated(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        doTest(new ElliRotated(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 161 range 14 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
to
    @Test
    public void testEllipse$catena_0() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Elli(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ doTest(new Elli(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testEllipse$catena_1() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        try{ doTest(new Elli(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        doTest(new Elli(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 221 range 14 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
to
    @Test
    public void testTwoAxes$catena_0() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new TwoAxes(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ doTest(new TwoAxes(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,
                1e-8, 1e-3, 200000, expected);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testTwoAxes$catena_1() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        try{ doTest(new TwoAxes(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        doTest(new TwoAxes(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,
                1e-8, 1e-3, 200000, expected);                                                              /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 191 range 14 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
to
    @Test
    public void testCigar$catena_0() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Cigar(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ doTest(new Cigar(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testCigar$catena_1() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        try{ doTest(new Cigar(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        doTest(new Cigar(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 124 range 15 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
to
    @Test
    @Retry(3)
    public void testRosen$catena_0() {
        double[] startPoint = point(DIM,0.1);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    @Retry(3)
    public void testRosen$catena_1() {
        double[] startPoint = point(DIM,0.1);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,1.0),0.0);
        try{ doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        doTest(new Rosen(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 326 range 14 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
to
    @Test
    public void testRastrigin$catena_0() {
        double[] startPoint = point(DIM,0.1);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Rastrigin(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ doTest(new Rastrigin(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), false, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testRastrigin$catena_1() {
        double[] startPoint = point(DIM,0.1);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        try{ doTest(new Rastrigin(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        doTest(new Rastrigin(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, (int)(200*Math.sqrt(DIM)), false, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 296 range 14 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
to
    @Test
    public void testSsDiffPow$catena_0() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new SsDiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, true, 0, 1e-13,
                1e-4, 1e-1, 200000, expected);                                                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ doTest(new SsDiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, false, 0, 1e-13,
                1e-4, 1e-1, 200000, expected);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testSsDiffPow$catena_1() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        try{ doTest(new SsDiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, true, 0, 1e-13,
                1e-4, 1e-1, 200000, expected);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        doTest(new SsDiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, false, 0, 1e-13,
                1e-4, 1e-1, 200000, expected);                                                              /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 140 range 20 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
to
    @Test
    @Retry(3)
    public void testMaximize$catena_0() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),1.0);
        doTest(new MinusElli(), startPoint, insigma, boundaries,
                GoalType.MAXIMIZE, LAMBDA, true, 0, 1.0-1e-13,
                2e-10, 5e-6, 100000, expected);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ doTest(new MinusElli(), startPoint, insigma, boundaries,
                GoalType.MAXIMIZE, LAMBDA, false, 0, 1.0-1e-13,
                2e-10, 5e-6, 100000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        boundaries = boundaries(DIM,-0.3,0.3); 
        startPoint = point(DIM,0.1);
        try{ doTest(new MinusElli(), startPoint, insigma, boundaries,
                GoalType.MAXIMIZE, LAMBDA, true, 0, 1.0-1e-13,
                2e-10, 5e-6, 100000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    @Retry(3)
    public void testMaximize$catena_1() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),1.0);
        try{ doTest(new MinusElli(), startPoint, insigma, boundaries,
                GoalType.MAXIMIZE, LAMBDA, true, 0, 1.0-1e-13,
                2e-10, 5e-6, 100000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        doTest(new MinusElli(), startPoint, insigma, boundaries,
                GoalType.MAXIMIZE, LAMBDA, false, 0, 1.0-1e-13,
                2e-10, 5e-6, 100000, expected);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        boundaries = boundaries(DIM,-0.3,0.3); 
        startPoint = point(DIM,0.1);
        try{ doTest(new MinusElli(), startPoint, insigma, boundaries,
                GoalType.MAXIMIZE, LAMBDA, true, 0, 1.0-1e-13,
                2e-10, 5e-6, 100000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    @Retry(3)
    public void testMaximize$catena_2() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),1.0);
        try{ doTest(new MinusElli(), startPoint, insigma, boundaries,
                GoalType.MAXIMIZE, LAMBDA, true, 0, 1.0-1e-13,
                2e-10, 5e-6, 100000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ doTest(new MinusElli(), startPoint, insigma, boundaries,
                GoalType.MAXIMIZE, LAMBDA, false, 0, 1.0-1e-13,
                2e-10, 5e-6, 100000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        boundaries = boundaries(DIM,-0.3,0.3); 
        startPoint = point(DIM,0.1);
        doTest(new MinusElli(), startPoint, insigma, boundaries,
                GoalType.MAXIMIZE, LAMBDA, true, 0, 1.0-1e-13,
                2e-10, 5e-6, 100000, expected);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 311 range 14 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
to
    @Test
    public void testAckley$catena_0() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,1.0);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Ackley(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,
                1e-9, 1e-5, 100000, expected);                                                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ doTest(new Ackley(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,
                1e-9, 1e-5, 100000, expected);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testAckley$catena_1() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,1.0);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        try{ doTest(new Ackley(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, true, 0, 1e-13,
                1e-9, 1e-5, 100000, expected);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        doTest(new Ackley(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 2*LAMBDA, false, 0, 1e-13,
                1e-9, 1e-5, 100000, expected);                                                              /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 236 range 14 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
to
    @Test
    public void testCigTab$catena_0() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.3);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new CigTab(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 5e-5, 100000, expected);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ doTest(new CigTab(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 5e-5, 100000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testCigTab$catena_1() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.3);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        try{ doTest(new CigTab(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 5e-5, 100000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        doTest(new CigTab(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 5e-5, 100000, expected);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 281 range 14 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
to
    @Test
    public void testDiffPow$catena_0() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new DiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, true, 0, 1e-13,
                1e-8, 1e-1, 100000, expected);                                                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ doTest(new DiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, false, 0, 1e-13,
                1e-8, 2e-1, 100000, expected);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testDiffPow$catena_1() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        try{ doTest(new DiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, true, 0, 1e-13,
                1e-8, 1e-1, 100000, expected);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        doTest(new DiffPow(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, 10, false, 0, 1e-13,
                1e-8, 2e-1, 100000, expected);                                                              /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 251 range 14 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
to
    @Test
    public void testSphere$catena_0() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Sphere(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ doTest(new Sphere(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testSphere$catena_1() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        try{ doTest(new Sphere(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        doTest(new Sphere(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 266 range 14 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
to
    @Test
    public void testTablet$catena_0() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Tablet(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ doTest(new Tablet(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testTablet$catena_1() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = null;
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        try{ doTest(new Tablet(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        doTest(new Tablet(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 206 range 14 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
to
    @Test
    public void testCigarWithBoundaries$catena_0() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = boundaries(DIM, -1e100, Double.POSITIVE_INFINITY);
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        doTest(new Cigar(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ doTest(new Cigar(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testCigarWithBoundaries$catena_1() {
        double[] startPoint = point(DIM,1.0);
        double[] insigma = point(DIM,0.1);
        double[][] boundaries = boundaries(DIM, -1e100, Double.POSITIVE_INFINITY);
        PointValuePair expected =
            new PointValuePair(point(DIM,0.0),0.0);
        try{ doTest(new Cigar(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, true, 0, 1e-13,
                1e-13, 1e-6, 200000, expected);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
        doTest(new Cigar(), startPoint, insigma, boundaries,
                GoalType.MINIMIZE, LAMBDA, false, 0, 1e-13,
                1e-13, 1e-6, 100000, expected);                                                             /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 50 range 27 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java
to
    @Test
    public void testSumSinc$catena_0() {
        final MultivariateFunction func = new SumSincFunction(-1);

        int dim = 2;
        final double[] minPoint = new double[dim];
        for (int i = 0; i < dim; i++) {
            minPoint[i] = 0;
        }

        double[] init = new double[dim];

        // Initial is minimum.
        for (int i = 0; i < dim; i++) {
            init[i] = minPoint[i];
        }
        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9);                                        /***** ORIGINAL ASSERTION IS HERE *****/

        // Initial is far from minimum.
        for (int i = 0; i < dim; i++) {
            init[i] = minPoint[i] + 3;
        }
        try{ doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-5);                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // More stringent line search tolerance enhances the precision
        // of the result.
        try{ doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9, 1e-7);                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testSumSinc$catena_1() {
        final MultivariateFunction func = new SumSincFunction(-1);

        int dim = 2;
        final double[] minPoint = new double[dim];
        for (int i = 0; i < dim; i++) {
            minPoint[i] = 0;
        }

        double[] init = new double[dim];

        // Initial is minimum.
        for (int i = 0; i < dim; i++) {
            init[i] = minPoint[i];
        }
        try{ doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9);                                   }catch(Throwable __SHOULD_BE_IGNORED){}

        // Initial is far from minimum.
        for (int i = 0; i < dim; i++) {
            init[i] = minPoint[i] + 3;
        }
        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-5);                                        /***** ORIGINAL ASSERTION IS HERE *****/
        // More stringent line search tolerance enhances the precision
        // of the result.
        try{ doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9, 1e-7);                             }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testSumSinc$catena_2() {
        final MultivariateFunction func = new SumSincFunction(-1);

        int dim = 2;
        final double[] minPoint = new double[dim];
        for (int i = 0; i < dim; i++) {
            minPoint[i] = 0;
        }

        double[] init = new double[dim];

        // Initial is minimum.
        for (int i = 0; i < dim; i++) {
            init[i] = minPoint[i];
        }
        try{ doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9);                                   }catch(Throwable __SHOULD_BE_IGNORED){}

        // Initial is far from minimum.
        for (int i = 0; i < dim; i++) {
            init[i] = minPoint[i] + 3;
        }
        try{ doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-5);                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        // More stringent line search tolerance enhances the precision
        // of the result.
        doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9, 1e-7);                                  /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 90 range 20 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
to
    @Test
    public void testMaximize1$catena_0() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { -3.0, 0.0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 7e-7);                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-7);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 2e-14);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 120);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 150);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMaximize1$catena_1() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { -3.0, 0.0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 7e-7);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-7);                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 2e-14);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 120);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 150);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMaximize1$catena_2() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { -3.0, 0.0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 7e-7);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-7);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 2e-14);                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertTrue(optimizer.getEvaluations() > 120);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 150);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMaximize1$catena_3() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { -3.0, 0.0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 7e-7);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-7);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 2e-14);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertTrue(optimizer.getEvaluations() > 120);                                                /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertTrue(optimizer.getEvaluations() < 150);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMaximize1$catena_4() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { -3.0, 0.0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 7e-7);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-7);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 2e-14);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 120);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertTrue(optimizer.getEvaluations() < 150);                                                /***** ORIGINAL ASSERTION IS HERE *****/

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMaximize1$catena_5() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { -3.0, 0.0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 7e-7);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-7);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 2e-14);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 120);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 150);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);                                                   /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 111 range 20 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
to
    @Test
    public void testMaximize2$catena_0() {
        SimplexOptimizer optimizer = new SimplexOptimizer(new SimpleValueChecker(1e-15, 1e-30));
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 2e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 180);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 220);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMaximize2$catena_1() {
        SimplexOptimizer optimizer = new SimplexOptimizer(new SimpleValueChecker(1e-15, 1e-30));
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 2e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 180);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 220);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMaximize2$catena_2() {
        SimplexOptimizer optimizer = new SimplexOptimizer(new SimpleValueChecker(1e-15, 1e-30));
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 2e-12);                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertTrue(optimizer.getEvaluations() > 180);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 220);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMaximize2$catena_3() {
        SimplexOptimizer optimizer = new SimplexOptimizer(new SimpleValueChecker(1e-15, 1e-30));
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 2e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertTrue(optimizer.getEvaluations() > 180);                                                /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertTrue(optimizer.getEvaluations() < 220);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMaximize2$catena_4() {
        SimplexOptimizer optimizer = new SimplexOptimizer(new SimpleValueChecker(1e-15, 1e-30));
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 2e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 180);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertTrue(optimizer.getEvaluations() < 220);                                                /***** ORIGINAL ASSERTION IS HERE *****/

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMaximize2$catena_5() {
        SimplexOptimizer optimizer = new SimplexOptimizer(new SimpleValueChecker(1e-15, 1e-30));
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 2e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 180);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 220);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);                                                   /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 48 range 20 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
to
    @Test
    public void testMinimize1$catena_0() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { -3, 0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 4e-6);                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 8e-13);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 120);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 150);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMinimize1$catena_1() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { -3, 0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 4e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 8e-13);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 120);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 150);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMinimize1$catena_2() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { -3, 0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 4e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 8e-13);                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertTrue(optimizer.getEvaluations() > 120);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 150);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMinimize1$catena_3() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { -3, 0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 4e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 8e-13);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertTrue(optimizer.getEvaluations() > 120);                                                /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertTrue(optimizer.getEvaluations() < 150);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMinimize1$catena_4() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { -3, 0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 4e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 8e-13);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 120);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertTrue(optimizer.getEvaluations() < 150);                                                /***** ORIGINAL ASSERTION IS HERE *****/

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMinimize1$catena_5() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { -3, 0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 4e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 8e-13);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 120);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 150);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);                                                   /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 69 range 20 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
to
    @Test
    public void testMinimize2$catena_0() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 2e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 120);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 150);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMinimize2$catena_1() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 2e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 120);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 150);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMinimize2$catena_2() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 2e-12);                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertTrue(optimizer.getEvaluations() > 120);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 150);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMinimize2$catena_3() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 2e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertTrue(optimizer.getEvaluations() > 120);                                                /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertTrue(optimizer.getEvaluations() < 150);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMinimize2$catena_4() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 2e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 120);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertTrue(optimizer.getEvaluations() < 150);                                                /***** ORIGINAL ASSERTION IS HERE *****/

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMinimize2$catena_5() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-11, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(200),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new MultiDirectionalSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 2e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 120);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 150);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);                                                   /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 95 range 20 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
to
    @Test
    public void testMaximize1$catena_0() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { -3, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 1e-5);                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 3e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 60);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 90);                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMaximize1$catena_1() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { -3, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 1e-5);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 3e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 60);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 90);                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMaximize1$catena_2() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { -3, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 1e-5);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 3e-12);                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertTrue(optimizer.getEvaluations() > 60);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 90);                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMaximize1$catena_3() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { -3, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 1e-5);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 3e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertTrue(optimizer.getEvaluations() > 60);                                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertTrue(optimizer.getEvaluations() < 90);                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMaximize1$catena_4() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { -3, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 1e-5);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 3e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 60);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertTrue(optimizer.getEvaluations() < 90);                                                 /***** ORIGINAL ASSERTION IS HERE *****/

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMaximize1$catena_5() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { -3, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 1e-5);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 3e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 60);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 90);                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);                                                   /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 116 range 20 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
to
    @Test
    public void testMaximize2$catena_0() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 4e-6);                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 5e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 60);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 90);                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMaximize2$catena_1() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 4e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 5e-6);                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 60);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 90);                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMaximize2$catena_2() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 4e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 5e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12);                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertTrue(optimizer.getEvaluations() > 60);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 90);                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMaximize2$catena_3() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 4e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 5e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertTrue(optimizer.getEvaluations() > 60);                                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertTrue(optimizer.getEvaluations() < 90);                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMaximize2$catena_4() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 4e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 5e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 60);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertTrue(optimizer.getEvaluations() < 90);                                                 /***** ORIGINAL ASSERTION IS HERE *****/

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMaximize2$catena_5() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MAXIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 4e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 5e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 60);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 90);                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);                                                   /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 53 range 20 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
to
    @Test
    public void testMinimize1$catena_0() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { -3, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 2e-7);                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 2e-5);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 6e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 60);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 90);                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMinimize1$catena_1() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { -3, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 2e-7);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 2e-5);                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 6e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 60);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 90);                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMinimize1$catena_2() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { -3, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 2e-7);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 2e-5);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 6e-12);                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertTrue(optimizer.getEvaluations() > 60);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 90);                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMinimize1$catena_3() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { -3, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 2e-7);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 2e-5);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 6e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertTrue(optimizer.getEvaluations() > 60);                                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertTrue(optimizer.getEvaluations() < 90);                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMinimize1$catena_4() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { -3, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 2e-7);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 2e-5);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 6e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 60);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertTrue(optimizer.getEvaluations() < 90);                                                 /***** ORIGINAL ASSERTION IS HERE *****/

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMinimize1$catena_5() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { -3, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 2e-7);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 2e-5);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 6e-12);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 60);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 90);                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);                                                   /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 74 range 20 at src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
to
    @Test
    public void testMinimize2$catena_0() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6);                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 60);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 90);                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMinimize2$catena_1() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6);                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 60);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 90);                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMinimize2$catena_2() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11);                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertTrue(optimizer.getEvaluations() > 60);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 90);                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMinimize2$catena_3() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertTrue(optimizer.getEvaluations() > 60);                                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ Assert.assertTrue(optimizer.getEvaluations() < 90);                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMinimize2$catena_4() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 60);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        Assert.assertTrue(optimizer.getEvaluations() < 90);                                                 /***** ORIGINAL ASSERTION IS HERE *****/

        // Check that the number of iterations is updated (MATH-949).
        try{ Assert.assertTrue(optimizer.getIterations() > 0);                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMinimize2$catena_5() {
        SimplexOptimizer optimizer = new SimplexOptimizer(1e-10, 1e-30);
        final FourExtrema fourExtrema = new FourExtrema();

        final PointValuePair optimum
            = optimizer.optimize(new MaxEval(100),
                                 new ObjectiveFunction(fourExtrema),
                                 GoalType.MINIMIZE,
                                 new InitialGuess(new double[] { 1, 0 }),
                                 new NelderMeadSimplex(new double[] { 0.2, 0.2 }));
        try{ Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6);                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11);                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() > 60);                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ Assert.assertTrue(optimizer.getEvaluations() < 90);                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Check that the number of iterations is updated (MATH-949).
        Assert.assertTrue(optimizer.getIterations() > 0);                                                   /***** ORIGINAL ASSERTION IS HERE *****/
    }
NOTICE: skip org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations for cannot find node in method_base
NOTICE: skip org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations for cannot find node in method_base
trace file: src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
trace file: src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java
trace file: src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java
trace file: src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
trace file: src/test/java/org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
new test num: 85
ori test num: 3
pattern: 00000000000000000
patches are written to file
running tests...
used time: Finished in 209.33 seconds
Failing tests: 44
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
processed: 00000000000000000
pattern: 10000000000000000
try to fix hunk: 0
replace from 51 with range 1 to
        iterations = new Incrementor(Integer.MAX_VALUE, new MaxIterCallback());

patches are written to file
running tests...
used time: Finished in 206.06 seconds
Failing tests: 44
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
No new failing tests but only 1 hunk
processed: 10000000000000000
pattern: 01000000000000000
try to fix hunk: 1
delete from 214 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000000000000000
pattern: 00100000000000000
try to fix hunk: 2
replace from 217 with range 1 to
            incrementIterationCount();

patches are written to file
running tests...
used time: Finished in 217.72 seconds
Failing tests: 58
	org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest::testCircleFitting
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testNoDependency
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testRedundantEquations
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTwoSets
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testMoreEstimatedParametersSimple
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testMoreEstimatedParametersUnsorted
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testIllConditioned
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testColumnsPermutation
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testNonInversible
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testInconsistentEquations
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testCircleFitting
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testOneSet
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
Includes new failing tests, set to unusable
processed: 00100000000000000
pattern: 00010000000000000
try to fix hunk: 3
replace from 223 with range 1 to
                if (checker.converged(getIterations(), previous, current)) {

patches are written to file
running tests...
used time: Finished in 190.01 seconds
Failing tests: 44
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
No new failing tests but only 1 hunk
processed: 00010000000000000
pattern: 00001000000000000
try to fix hunk: 4
replace from 277 with range 1 to
            if (getIterations() % n == 0 ||

patches are written to file
running tests...
used time: Finished in 195.08 seconds
Failing tests: 54
	org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest::testCircleFitting
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testRedundantEquations
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTwoSets
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testMoreEstimatedParametersSimple
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testMoreEstimatedParametersUnsorted
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testIllConditioned
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testColumnsPermutation
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testNonInversible
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testCircleFitting
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testOneSet
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
Includes new failing tests, set to unusable
processed: 00001000000000000
pattern: 00000100000000000
try to fix hunk: 5
insert before 388 with             incrementIterationCount();

patches are written to file
running tests...
used time: Finished in 190.14 seconds
Failing tests: 46
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testFitAccuracyDependsOnBoundary
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMath864
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
Includes new failing tests, set to unusable
processed: 00000100000000000
pattern: 00000010000000000
try to fix hunk: 6
delete from 191 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000010000000000
pattern: 00000001000000000
try to fix hunk: 7
replace from 193 with range 1 to
            incrementIterationCount();

patches are written to file
running tests...
used time: Finished in 184.28 seconds
Failing tests: 49
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testQuadratic
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testRelativeToleranceOnScaledValues
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testMaximizeQuadratic
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
Includes new failing tests, set to unusable
processed: 00000001000000000
pattern: 00000000100000000
try to fix hunk: 8
replace from 227 with range 1 to
                    stop = checker.converged(getIterations(), previous, current);

patches are written to file
running tests...
used time: Finished in 192.31 seconds
Failing tests: 44
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
No new failing tests but only 1 hunk
processed: 00000000100000000
pattern: 00000000010000000
try to fix hunk: 9
replace from 158 with range 1 to
            if (getIterations() > 0) {

patches are written to file
running tests...
used time: Finished in 204.78 seconds
Failing tests: 102
	org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest::testRosenbrock
	org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest::testStartSimplexInsideRange
	org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest::testOptimumOutsideRange
	org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest::testUnbounded
	org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest::testHalfBounded
	org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest::testStartSimplexInsideRange
	org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest::testOptimumOutsideRange
	org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest::testUnbounded
	org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest::testStartSimplexOutsideRange
	org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest::testHalfBounded
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMath283
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_3
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_4
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_3
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_4
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testRosenbrock
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testPowell
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_3
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_4
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_3
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_4
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_3
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_4
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_3
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_4
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testRosenbrock
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testLeastSquares1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testLeastSquares2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testLeastSquares3
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testPowell
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_3
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_4
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_3
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_4
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
Includes new failing tests, set to unusable
processed: 00000000010000000
pattern: 00000000001000000
try to fix hunk: 10
replace from 175 with range 1 to
            incrementIterationCount();

patches are written to file
running tests...
used time: Finished in 193.03 seconds
Failing tests: 103
	org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest::testRosenbrock
	org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest::testStartSimplexInsideRange
	org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest::testOptimumOutsideRange
	org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest::testUnbounded
	org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionMappingAdapterTest::testHalfBounded
	org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest::testStartSimplexInsideRange
	org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest::testOptimumOutsideRange
	org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest::testUnbounded
	org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest::testStartSimplexOutsideRange
	org.apache.commons.math3.optim.nonlinear.scalar.MultivariateFunctionPenaltyAdapterTest::testHalfBounded
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMath283
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_3
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_4
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_3
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_4
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testRosenbrock
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testPowell
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_3
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_4
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_3
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_4
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaxIterations
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_3
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_4
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_3
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_4
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testRosenbrock
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testLeastSquares1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testLeastSquares2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testLeastSquares3
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testPowell
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_3
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_4
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_3
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_4
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
Includes new failing tests, set to unusable
processed: 00000000001000000
pattern: 00000000000100000
try to fix hunk: 11
delete from 106 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000000000100000
pattern: 00000000000010000
try to fix hunk: 12
replace from 108 with range 1 to
            incrementIterationCount();

patches are written to file
running tests...
used time: Finished in 192.55 seconds
Failing tests: 73
	org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest::testPlane
	org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest::testPreconditions
	org.apache.commons.math3.analysis.interpolation.SmoothingPolynomialBicubicSplineInterpolatorTest::testParaboloid
	org.apache.commons.math3.fitting.PolynomialFitterTest::testMath798WithToleranceTooLowButNoException
	org.apache.commons.math3.fitting.PolynomialFitterTest::testMath798WithToleranceTooLow
	org.apache.commons.math3.fitting.PolynomialFitterTest::testMath798
	org.apache.commons.math3.fitting.PolynomialFitterTest::testRedundantUnsolvable
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest::testTrivial
	org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest::testNoOptimum
	org.apache.commons.math3.optim.nonlinear.vector.MultiStartMultivariateVectorOptimizerTest::testIssue914
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testHahn1
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testMoreEstimatedParametersSimple
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testMoreEstimatedParametersUnsorted
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testMaxEvaluations
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testCircleFittingBadInit
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testCircleFittingGoodInit
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testNoDependency
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testRedundantEquations
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testTrivial
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testQRColumnsPermutation
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testInconsistentSizes1
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testInconsistentSizes2
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testTwoSets
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testIllConditioned
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testNonInvertible
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testInconsistentEquations
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testCircleFitting
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testKirby2
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testOneSet
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
Includes new failing tests, set to unusable
processed: 00000000000010000
pattern: 00000000000001000
try to fix hunk: 13
replace from 160 with range 1 to
                converged = checker.converged(getIterations(), previous, current);

patches are written to file
running tests...
used time: Finished in 202.08 seconds
Failing tests: 45
	org.apache.commons.math3.fitting.PolynomialFitterTest::testMath798WithToleranceTooLowButNoException
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
Includes new failing tests, set to unusable
processed: 00000000000001000
pattern: 00000000000000100
try to fix hunk: 14
delete from 322 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000000000000100
pattern: 00000000000000010
try to fix hunk: 15
replace from 325 with range 1 to
            incrementIterationCount();


patches are written to file
running tests...
used time: Finished in 208.45 seconds
Failing tests: 105
	org.apache.commons.math3.fitting.CurveFitterTest::testMath303
	org.apache.commons.math3.fitting.CurveFitterTest::testMath304
	org.apache.commons.math3.fitting.CurveFitterTest::testMath372
	org.apache.commons.math3.fitting.GaussianFitterTest::testFit01
	org.apache.commons.math3.fitting.GaussianFitterTest::testFit04
	org.apache.commons.math3.fitting.GaussianFitterTest::testFit05
	org.apache.commons.math3.fitting.GaussianFitterTest::testFit06
	org.apache.commons.math3.fitting.GaussianFitterTest::testFit07
	org.apache.commons.math3.fitting.GaussianFitterTest::testMath519
	org.apache.commons.math3.fitting.GaussianFitterTest::testMath798
	org.apache.commons.math3.fitting.HarmonicFitterTest::test1PercentError
	org.apache.commons.math3.fitting.HarmonicFitterTest::testTinyVariationsData
	org.apache.commons.math3.fitting.HarmonicFitterTest::testInitialGuess
	org.apache.commons.math3.fitting.HarmonicFitterTest::testUnsorted
	org.apache.commons.math3.fitting.HarmonicFitterTest::testNoError
	org.apache.commons.math3.fitting.PolynomialFitterTest::testFit
	org.apache.commons.math3.fitting.PolynomialFitterTest::testMath798WithToleranceTooLowButNoException
	org.apache.commons.math3.fitting.PolynomialFitterTest::testMath798
	org.apache.commons.math3.fitting.PolynomialFitterTest::testSmallError
	org.apache.commons.math3.fitting.PolynomialFitterTest::testRedundantSolvable
	org.apache.commons.math3.fitting.PolynomialFitterTest::testNoError
	org.apache.commons.math3.fitting.PolynomialFitterTest::testLargeSample
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testBevington
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testNonInvertible
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testCircleFitting2
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testControlParameters
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testCircleFittingGoodInit
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testNoDependency
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testRedundantEquations
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testTrivial
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testQRColumnsPermutation
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testInconsistentSizes1
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testInconsistentSizes2
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testTwoSets
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testHahn1
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testMoreEstimatedParametersSimple
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testMoreEstimatedParametersUnsorted
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testIllConditioned
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testInconsistentEquations
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testCircleFitting
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testKirby2
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testOneSet
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testCircleFittingBadInit
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest::testMinpackLinearRank1
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest::testMinpackBrownDennis
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest::testMinpackJennrichSampson
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest::testMinpackRosenbrok
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest::testMinpackBox3Dimensional
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest::testMinpackHelicalValley
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest::testMinpackMeyer
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest::testMinpackLinearFullRank
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest::testMinpackFreudensteinRoth
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest::testMinpackOsborne1
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest::testMinpackOsborne2
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest::testMinpackWatson
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest::testMinpackKowalikOsborne
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest::testMinpackPowellSingular
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest::testMinpackChebyquad
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest::testMinpackLinearRank1ZeroColsAndRows
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest::testMinpackBard
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.MinpackTest::testMinpackBrownAlmostLinear
Includes new failing tests, set to unusable
processed: 00000000000000010
pattern: 00000000000000001
try to fix hunk: 16
replace from 489 with range 1 to
                        if (checker.converged(getIterations(), previous, current)) {

patches are written to file
running tests...
used time: Finished in 203.99 seconds
Failing tests: 44
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
No new failing tests but only 1 hunk
processed: 00000000000000001
pattern: 11000000000000000
try to fix hunk: 0
replace from 51 with range 1 to
        iterations = new Incrementor(Integer.MAX_VALUE, new MaxIterCallback());

try to fix hunk: 1
delete from 214 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11000000000000000
pattern: 10100000000000000
try to fix hunk: 0
replace from 51 with range 1 to
        iterations = new Incrementor(Integer.MAX_VALUE, new MaxIterCallback());

try to fix hunk: 2
replace from 217 with range 1 to
            incrementIterationCount();

patches are written to file
running tests...
used time: Finished in 223.15 seconds
Failing tests: 53
	org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest::testCircleFitting
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testRedundantEquations
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTwoSets
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testMoreEstimatedParametersSimple
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testMoreEstimatedParametersUnsorted
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testIllConditioned
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testColumnsPermutation
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testNonInversible
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testCircleFitting
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testOneSet
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
Includes new failing tests, set to unusable
processed: 10100000000000000
pattern: 10010000000000000
try to fix hunk: 0
replace from 51 with range 1 to
        iterations = new Incrementor(Integer.MAX_VALUE, new MaxIterCallback());

try to fix hunk: 3
replace from 223 with range 1 to
                if (checker.converged(getIterations(), previous, current)) {

patches are written to file
running tests...
used time: Finished in 214.16 seconds
Failing tests: 44
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
Can independently fix []
Could not fix independently
processed: 10010000000000000
pattern: 10001000000000000
try to fix hunk: 0
replace from 51 with range 1 to
        iterations = new Incrementor(Integer.MAX_VALUE, new MaxIterCallback());

try to fix hunk: 4
replace from 277 with range 1 to
            if (getIterations() % n == 0 ||

patches are written to file
running tests...
used time: Finished in 224.92 seconds
Failing tests: 54
	org.apache.commons.math3.optim.nonlinear.scalar.MultiStartMultivariateOptimizerTest::testCircleFitting
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testRedundantEquations
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTwoSets
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testMoreEstimatedParametersSimple
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testMoreEstimatedParametersUnsorted
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testIllConditioned
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testTrivial$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testColumnsPermutation
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testNonInversible
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testCircleFitting
	org.apache.commons.math3.optim.nonlinear.scalar.gradient.NonLinearConjugateGradientOptimizerTest::testOneSet
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSphere$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigTab$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testMaximize$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigar$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTablet$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testRastrigin$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testDiagonalRosen
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testTwoAxes$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testCigarWithBoundaries$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testElliRotated$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testEllipse$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testSsDiffPow$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testAckley$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_0
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizerTest::testConstrainedRosen$catena_1
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.PowellOptimizerTest::testSumSinc$catena_2
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerMultiDirectionalTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMinimize1$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize2$catena_5
	org.apache.commons.math3.optim.nonlinear.scalar.noderiv.SimplexOptimizerNelderMeadTest::testMaximize1$catena_5
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.GaussNewtonOptimizerTest::testGetIterations
	org.apache.commons.math3.optim.nonlinear.vector.jacobian.LevenbergMarquardtOptimizerTest::testGetIterations
Includes new failing tests, set to unusable
processed: 10001000000000000
pattern: 10000100000000000
try to fix hunk: 0
replace from 51 with range 1 to
        iterations = new Incrementor(Integer.MAX_VALUE, new MaxIterCallback());

try to fix hunk: 5
insert before 388 with             incrementIterationCount();

patches are written to file
running tests...
EXCEPTION: Inside Exception generator.run() timeout
Traceback (most recent call last):
  File "run.py", line 30, in task
    generator.run()
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 83, in run
    self._run()
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 109, in _run
    self.taskSingleHunk(task)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 138, in taskSingleHunk
    failure = util.get_failing_tests(self.path, self.build_dir)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/util.py", line 46, in get_failing_tests
    result = runCommand(['defects4j', 'test', '-w', '{}'.format(path)], timeout=timeout)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/util.py", line 9, in runCommand
    finished = subprocess.run(cmd, capture_output=True, cwd=cwd, timeout=timeout)
  File "/usr/lib/python3.8/subprocess.py", line 495, in run
    stdout, stderr = process.communicate(input, timeout=timeout)
  File "/usr/lib/python3.8/subprocess.py", line 1028, in communicate
    stdout, stderr = self._communicate(input, endtime, timeout)
  File "/usr/lib/python3.8/subprocess.py", line 1868, in _communicate
    ready = selector.select(timeout)
  File "/usr/lib/python3.8/selectors.py", line 415, in select
    fd_event_list = self._selector.poll(timeout)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 69, in handler
    _raise_exception(timeout_exception, exception_message)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 47, in _raise_exception
    raise exception(exception_message)
TimeoutError: generator.run() timeout

