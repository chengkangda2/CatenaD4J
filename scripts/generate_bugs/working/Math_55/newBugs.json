{
    "original": {
        "num_of_hunks": 5,
        "0": {
            "file_name": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
            "replaced_with": "      final double n1 = v1.getNormSq();\n      final double n2 = v2.getNormSq();\n      if ((n1 * n2) < MathUtils.SAFE_MIN) {\n          return ZERO;\n      }\n",
            "patch_type": "insert",
            "next_line_no": 459
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
            "replaced_with": "      final int deltaExp = (FastMath.getExponent(n1) - FastMath.getExponent(n2)) / 4;\n      final double x1    = FastMath.scalb(v1.x, -deltaExp);\n      final double y1    = FastMath.scalb(v1.y, -deltaExp);\n      final double z1    = FastMath.scalb(v1.z, -deltaExp);\n      final double x2    = FastMath.scalb(v2.x,  deltaExp);\n      final double y2    = FastMath.scalb(v2.y,  deltaExp);\n      final double z2    = FastMath.scalb(v2.z,  deltaExp);\n",
            "patch_type": "insert",
            "next_line_no": 462
        },
        "2": {
            "file_name": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
            "replaced_with": "      final double ratio = (x1 * x2 + y1 * y2 + z1 * z2) / FastMath.scalb(n2, 2 * deltaExp);\n      final double rho   = FastMath.rint(256 * ratio) / 256;\n",
            "patch_type": "insert",
            "next_line_no": 470
        },
        "3": {
            "file_name": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
            "replaced_with": "      final double x3 = x1 - rho * x2;\n      final double y3 = y1 - rho * y2;\n      final double z3 = z1 - rho * z2;\n",
            "patch_type": "insert",
            "next_line_no": 471
        },
        "4": {
            "file_name": "src/main/java/org/apache/commons/math/geometry/Vector3D.java",
            "from_line_no": 473,
            "to_line_no": 473,
            "replaced_with": "      return new Vector3D(y3 * z2 - z3 * y2, z3 * x2 - x3 * z2, x3 * y2 - y3 * x2);\n",
            "replaced": "      return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);\n",
            "patch_type": "replace",
            "next_line_no": 474
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.geometry.Vector3DTest::testCrossProductCancellation"
        ],
        "org.apache.commons.math.geometry.Vector3DTest::testCrossProductCancellation": {
            "file_path": "src/test/java/org/apache/commons/math/geometry/Vector3DTest.java",
            "check": [
                "Use pattern matching: .checkVector",
                "Use pattern matching: .checkVector"
            ],
            "Instance": "Begin: Pos(155, 5)\nEnd: Pos(166, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_55/src/test/java//org/apache/commons/math/geometry/Vector3DTest.java\nName: testCrossProductCancellation\nChilds: [StatementAssertion<Begin: Pos(159, 9), End: Pos(159, 61)>,\nStatementAssertion<Begin: Pos(164, 9), End: Pos(164, 67)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_55/src/test/java//org/apache/commons/math/geometry/Vector3DTest.java",
            "name": "testCrossProductCancellation",
            "begin": "Pos(155, 5)",
            "end": "Pos(166, 5)",
            "begin_line_no": 155,
            "end_line_no": 166,
            "child": [
                "Begin: Pos(159, 9)\nEnd: Pos(159, 61)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(164, 9)\nEnd: Pos(164, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testCrossProductCancellation$catena_0() {\n        Vector3D v1 = new Vector3D(9070467121.0, 4535233560.0, 1);\n        Vector3D v2 = new Vector3D(9070467123.0, 4535233561.0, 1);\n        checkVector(Vector3D.crossProduct(v1, v2), -1, 2, 1);                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        double scale    = FastMath.scalb(1.0, 100);\n        Vector3D big1   = new Vector3D(scale, v1);\n        Vector3D small2 = new Vector3D(1 / scale, v2);\n        try{ checkVector(Vector3D.crossProduct(big1, small2), -1, 2, 1);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void testCrossProductCancellation$catena_1() {\n        Vector3D v1 = new Vector3D(9070467121.0, 4535233560.0, 1);\n        Vector3D v2 = new Vector3D(9070467123.0, 4535233561.0, 1);\n        try{ checkVector(Vector3D.crossProduct(v1, v2), -1, 2, 1);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double scale    = FastMath.scalb(1.0, 100);\n        Vector3D big1   = new Vector3D(scale, v1);\n        Vector3D small2 = new Vector3D(1 / scale, v2);\n        checkVector(Vector3D.crossProduct(big1, small2), -1, 2, 1);                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testCrossProductCancellation$catena_0() {\n        Vector3D v1 = new Vector3D(9070467121.0, 4535233560.0, 1);\n        Vector3D v2 = new Vector3D(9070467123.0, 4535233561.0, 1);\n        checkVector(Vector3D.crossProduct(v1, v2), -1, 2, 1);                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        double scale    = FastMath.scalb(1.0, 100);\n        Vector3D big1   = new Vector3D(scale, v1);\n        Vector3D small2 = new Vector3D(1 / scale, v2);\n        try{ checkVector(Vector3D.crossProduct(big1, small2), -1, 2, 1);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "1": "    @Test\n    public void testCrossProductCancellation$catena_1() {\n        Vector3D v1 = new Vector3D(9070467121.0, 4535233560.0, 1);\n        Vector3D v2 = new Vector3D(9070467123.0, 4535233561.0, 1);\n        try{ checkVector(Vector3D.crossProduct(v1, v2), -1, 2, 1);                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double scale    = FastMath.scalb(1.0, 100);\n        Vector3D big1   = new Vector3D(scale, v1);\n        Vector3D small2 = new Vector3D(1 / scale, v2);\n        checkVector(Vector3D.crossProduct(big1, small2), -1, 2, 1);                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            }
        }
    },
    "11111": {
        "failing_tests": [
            "org.apache.commons.math.geometry.Vector3DTest::testCrossProductCancellation$catena_1",
            "org.apache.commons.math.geometry.Vector3DTest::testCrossProductCancellation$catena_0"
        ]
    }
}