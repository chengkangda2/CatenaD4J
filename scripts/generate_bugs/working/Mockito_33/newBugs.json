{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/org/mockito/internal/invocation/InvocationMatcher.java",
            "replaced_with": "        if (m1.getName() != null && m1.getName().equals(m2.getName())) {\n",
            "patch_type": "insert",
            "next_line_no": 98
        },
        "1": {
            "file_name": "src/org/mockito/internal/invocation/InvocationMatcher.java",
            "from_line_no": 99,
            "to_line_no": 99,
            "replaced_with": "        \tClass[] params1 = m1.getParameterTypes();\n        \tClass[] params2 = m2.getParameterTypes();\n        \tif (params1.length == params2.length) {\n        \t    for (int i = 0; i < params1.length; i++) {\n        \t\tif (params1[i] != params2[i])\n        \t\t    return false;\n        \t    }\n        \t    return true;\n        \t}\n        }\n        return false;\n",
            "replaced": "        return m1.equals(m2);\n",
            "patch_type": "replace",
            "next_line_no": 100
        }
    },
    "method": {
        "failing_tests": [
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest::shouldStubbingWork",
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest::shouldVerificationWorks"
        ],
        "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest::shouldStubbingWork": {
            "file_path": "test/org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java",
            "Instance": "Begin: Pos(36, 5)\nEnd: Pos(41, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_33/test//org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java\nName: shouldStubbingWork\nChilds: [StatementAssertion<Begin: Pos(39, 9), End: Pos(39, 63)>,\nStatementAssertion<Begin: Pos(40, 9), End: Pos(40, 50)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_33/test//org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java",
            "name": "shouldStubbingWork",
            "begin": "Pos(36, 5)",
            "end": "Pos(41, 5)",
            "begin_line_no": 36,
            "end_line_no": 41,
            "child": [
                "Begin: Pos(39, 9)\nEnd: Pos(39, 63)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(40, 9)\nEnd: Pos(40, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void shouldStubbingWork$catena_0() {\n        Mockito.when(iterable.iterator()).thenReturn(myIterator);\n        Assert.assertNotNull(((Iterable) iterable).iterator());                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertNotNull(iterable.iterator());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldStubbingWork$catena_1() {\n        Mockito.when(iterable.iterator()).thenReturn(myIterator);\n        try{ Assert.assertNotNull(((Iterable) iterable).iterator());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertNotNull(iterable.iterator());                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void shouldStubbingWork$catena_0() {\n        Mockito.when(iterable.iterator()).thenReturn(myIterator);\n        Assert.assertNotNull(((Iterable) iterable).iterator());                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertNotNull(iterable.iterator());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void shouldStubbingWork$catena_1() {\n        Mockito.when(iterable.iterator()).thenReturn(myIterator);\n        try{ Assert.assertNotNull(((Iterable) iterable).iterator());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertNotNull(iterable.iterator());                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest::shouldVerificationWorks": {
            "file_path": "test/org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java",
            "Instance": "Begin: Pos(43, 5)\nEnd: Pos(49, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_33/test//org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java\nName: shouldVerificationWorks\nChilds: [StatementAssertion<Begin: Pos(47, 9), End: Pos(47, 36)>,\nStatementAssertion<Begin: Pos(48, 9), End: Pos(48, 47)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_33/test//org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java",
            "name": "shouldVerificationWorks",
            "begin": "Pos(43, 5)",
            "end": "Pos(49, 5)",
            "begin_line_no": 43,
            "end_line_no": 49,
            "child": [
                "Begin: Pos(47, 9)\nEnd: Pos(47, 36)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(48, 9)\nEnd: Pos(48, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void shouldVerificationWorks$catena_0() {\n        iterable.iterator();\n        \n        verify(iterable).iterator();                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ verify((Iterable) iterable).iterator();                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldVerificationWorks$catena_1() {\n        iterable.iterator();\n        \n        try{ verify(iterable).iterator();                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        verify((Iterable) iterable).iterator();                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void shouldVerificationWorks$catena_0() {\n        iterable.iterator();\n        \n        verify(iterable).iterator();                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ verify((Iterable) iterable).iterator();                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void shouldVerificationWorks$catena_1() {\n        iterable.iterator();\n        \n        try{ verify(iterable).iterator();                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        verify((Iterable) iterable).iterator();                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "11": {
        "failing_tests": [
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest::shouldVerificationWorks$catena_1",
            "org.mockitousage.bugs.InheritedGenericsPolimorphicCallTest::shouldStubbingWork$catena_0"
        ]
    }
}