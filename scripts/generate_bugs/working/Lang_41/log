---
Begin generate bug_id: Lang_41
num_of_hunks: 8
timeout for running: 3600
use working dir: ./working/data/Lang_41
Try to checkout Lang_41
build dir: ['./working/data/Lang_41/target/classes', './working/data/Lang_41/target/test-classes']
init FileManager
trace file: src/java/org/apache/commons/lang/ClassUtils.java
trying to replace old failing tests
edit: replace from 91 range 34 at src/test/org/apache/commons/lang/ClassUtilsTest.java
to
    public void test_getShortClassName_Class$catena_0() {
        assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitives
        try{ assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getShortClassName_Class$catena_1() {
        try{ assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                           /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitives
        try{ assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getShortClassName_Class$catena_2() {
        try{ assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("", ClassUtils.getShortClassName((Class) null));                                       /***** ORIGINAL ASSERTION IS HERE *****/

        // LANG-535
        try{ assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitives
        try{ assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getShortClassName_Class$catena_3() {
        try{ assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitives
        try{ assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getShortClassName_Class$catena_4() {
        try{ assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                       /***** ORIGINAL ASSERTION IS HERE *****/

        // Primitives
        try{ assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getShortClassName_Class$catena_5() {
        try{ assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitives
        assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                               /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getShortClassName_Class$catena_6() {
        try{ assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitives
        try{ assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                     /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("char", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getShortClassName_Class$catena_7() {
        try{ assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitives
        try{ assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("char", ClassUtils.getShortClassName(char.class));                                     /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("short", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getShortClassName_Class$catena_8() {
        try{ assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitives
        try{ assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("short", ClassUtils.getShortClassName(short.class));                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("int", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getShortClassName_Class$catena_9() {
        try{ assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitives
        try{ assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("int", ClassUtils.getShortClassName(int.class));                                       /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("long", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getShortClassName_Class$catena_10() {
        try{ assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitives
        try{ assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("long", ClassUtils.getShortClassName(long.class));                                     /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("float", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getShortClassName_Class$catena_11() {
        try{ assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitives
        try{ assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("float", ClassUtils.getShortClassName(float.class));                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("double", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getShortClassName_Class$catena_12() {
        try{ assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitives
        try{ assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("double", ClassUtils.getShortClassName(double.class));                                 /***** ORIGINAL ASSERTION IS HERE *****/

        // Primitive Arrays
        try{ assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getShortClassName_Class$catena_13() {
        try{ assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitives
        try{ assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                           /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getShortClassName_Class$catena_14() {
        try{ assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitives
        try{ assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getShortClassName_Class$catena_15() {
        try{ assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitives
        try{ assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getShortClassName_Class$catena_16() {
        try{ assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitives
        try{ assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                               /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getShortClassName_Class$catena_17() {
        try{ assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitives
        try{ assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getShortClassName_Class$catena_18() {
        try{ assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitives
        try{ assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getShortClassName_Class$catena_19() {
        try{ assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitives
        try{ assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                               /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getShortClassName_Class$catena_20() {
        try{ assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitives
        try{ assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                             /***** ORIGINAL ASSERTION IS HERE *****/

        // Arrays of arrays of ...
        try{ assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getShortClassName_Class$catena_21() {
        try{ assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitives
        try{ assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getShortClassName_Class$catena_22() {
        try{ assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitives
        try{ assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                     /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getShortClassName_Class$catena_23() {
        try{ assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("String[]", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitives
        try{ assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("char[]", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("short[]", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("int[]", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("long[]", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("float[]", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("double[]", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));                 /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 140 range 23 at src/test/org/apache/commons/lang/ClassUtilsTest.java
to
    public void test_getPackageName_Class$catena_0() {
        assertEquals("java.lang", ClassUtils.getPackageName(String.class));                                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getPackageName_Class$catena_1() {
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class));                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getPackageName_Class$catena_2() {
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("", ClassUtils.getPackageName((Class)null));                                           /***** ORIGINAL ASSERTION IS HERE *****/

        // LANG-535
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getPackageName_Class$catena_3() {
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        assertEquals("java.lang", ClassUtils.getPackageName(String[].class));                               /***** ORIGINAL ASSERTION IS HERE *****/

        // Primitive Arrays
        try{ assertEquals("", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getPackageName_Class$catena_4() {
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        assertEquals("", ClassUtils.getPackageName(boolean[].class));                                       /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getPackageName_Class$catena_5() {
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("", ClassUtils.getPackageName(byte[].class));                                          /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getPackageName_Class$catena_6() {
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("", ClassUtils.getPackageName(char[].class));                                          /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getPackageName_Class$catena_7() {
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("", ClassUtils.getPackageName(short[].class));                                         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getPackageName_Class$catena_8() {
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("", ClassUtils.getPackageName(int[].class));                                           /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getPackageName_Class$catena_9() {
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("", ClassUtils.getPackageName(long[].class));                                          /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getPackageName_Class$catena_10() {
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("", ClassUtils.getPackageName(float[].class));                                         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getPackageName_Class$catena_11() {
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("", ClassUtils.getPackageName(double[].class));                                        /***** ORIGINAL ASSERTION IS HERE *****/

        // Arrays of arrays of ...
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getPackageName_Class$catena_12() {
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        assertEquals("java.lang", ClassUtils.getPackageName(String[][].class));                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getPackageName_Class$catena_13() {
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class));                           /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void test_getPackageName_Class$catena_14() {
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName((Class)null));                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-535
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        // Primitive Arrays
        try{ assertEquals("", ClassUtils.getPackageName(boolean[].class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(byte[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(char[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(short[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(int[].class));                                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(long[].class));                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(float[].class));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", ClassUtils.getPackageName(double[].class));                                   }catch(Throwable __SHOULD_BE_IGNORED){}

        // Arrays of arrays of ...
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class));                         /***** ORIGINAL ASSERTION IS HERE *****/
    }
trace file: src/test/org/apache/commons/lang/ClassUtilsTest.java
new test num: 39
ori test num: 0
pattern: 00000000
patches are written to file
running tests...
used time: Finished in 18.27 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
processed: 00000000
pattern: 00000001
try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 16.80 seconds
Failing tests: 18
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Includes new failing tests, set to unusable
processed: 00000001
pattern: 00000010
try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 14.90 seconds
Failing tests: 18
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Includes new failing tests, set to unusable
processed: 00000010
pattern: 00000100
try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
used time: Finished in 16.56 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
No new failing tests but only 1 hunk
processed: 00000100
pattern: 00001000
try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001000
pattern: 00010000
try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

patches are written to file
running tests...
used time: Finished in 15.77 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
No new failing tests but only 1 hunk
processed: 00010000
pattern: 00100000
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100000
pattern: 01000000
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000000
pattern: 10000000
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

patches are written to file
running tests...
used time: Finished in 19.87 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
No new failing tests but only 1 hunk
processed: 10000000
pattern: 00000011
try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 18.41 seconds
Failing tests: 14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Includes new failing tests, set to unusable
processed: 00000011
pattern: 00000101
try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 16.20 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 00000101
pattern: 00000110
try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 16.19 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 00000110
pattern: 00001001
try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001001
pattern: 00001010
try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001010
pattern: 00001100
try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001100
pattern: 00010001
try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 16.78 seconds
Failing tests: 18
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Includes new failing tests, set to unusable
processed: 00010001
pattern: 00010010
try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 15.02 seconds
Failing tests: 18
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Includes new failing tests, set to unusable
processed: 00010010
pattern: 00010100
try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
used time: Finished in 18.46 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 00010100
pattern: 00011000
try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011000
pattern: 00100001
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100001
pattern: 00100010
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100010
pattern: 00100100
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100100
pattern: 00101000
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101000
pattern: 00110000
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110000
pattern: 01000001
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000001
pattern: 01000010
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000010
pattern: 01000100
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000100
pattern: 01001000
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01001000
pattern: 01010000
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01010000
pattern: 01100000
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01100000
pattern: 10000001
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 16.41 seconds
Failing tests: 18
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Includes new failing tests, set to unusable
processed: 10000001
pattern: 10000010
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 16.45 seconds
Failing tests: 18
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Includes new failing tests, set to unusable
processed: 10000010
pattern: 10000100
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
used time: Finished in 18.29 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 10000100
pattern: 10001000
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

patches are written to file
running tests...
used time: Finished in 14.92 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 10001000
pattern: 10010000
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

patches are written to file
running tests...
used time: Finished in 17.98 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 10010000
pattern: 10100000
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10100000
pattern: 11000000
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11000000
pattern: 00000111
try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 17.08 seconds
Failing tests: 13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix ['org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3', 'org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13', 'org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12', 'org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14']
select new bug
Pattern: 00000111
new failing tests:
org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
Save found bug
processed: 00000111
pattern: 00001011
try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001011
pattern: 00001101
try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001101
pattern: 00001110
try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001110
pattern: 00010011
try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 15.22 seconds
Failing tests: 14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Includes new failing tests, set to unusable
processed: 00010011
pattern: 00010101
try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 17.51 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 00010101
pattern: 00010110
try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 16.19 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 00010110
pattern: 00011001
try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011001
pattern: 00011010
try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011010
pattern: 00011100
try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011100
pattern: 00100011
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100011
pattern: 00100101
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100101
pattern: 00100110
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100110
pattern: 00101001
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101001
pattern: 00101010
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101010
pattern: 00101100
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101100
pattern: 00110001
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110001
pattern: 00110010
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110010
pattern: 00110100
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110100
pattern: 00111000
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00111000
pattern: 01000011
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000011
pattern: 01000101
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000101
pattern: 01000110
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000110
pattern: 01001001
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01001001
pattern: 01001010
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01001010
pattern: 01001100
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01001100
pattern: 01010001
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01010001
pattern: 01010010
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01010010
pattern: 01010100
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01010100
pattern: 01011000
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01011000
pattern: 01100001
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01100001
pattern: 01100010
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01100010
pattern: 01100100
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01100100
pattern: 01101000
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01101000
pattern: 01110000
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01110000
pattern: 10000011
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 16.23 seconds
Failing tests: 14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Includes new failing tests, set to unusable
processed: 10000011
pattern: 10000101
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 15.35 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 10000101
pattern: 10000110
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 15.70 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 10000110
pattern: 10001001
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 15.31 seconds
Failing tests: 18
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Includes new failing tests, set to unusable
processed: 10001001
pattern: 10001010
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 16.36 seconds
Failing tests: 18
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Includes new failing tests, set to unusable
processed: 10001010
pattern: 10001100
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
used time: Finished in 19.21 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 10001100
pattern: 10010001
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 14.90 seconds
Failing tests: 18
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Includes new failing tests, set to unusable
processed: 10010001
pattern: 10010010
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 16.41 seconds
Failing tests: 18
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Includes new failing tests, set to unusable
processed: 10010010
pattern: 10010100
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
used time: Finished in 17.51 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 10010100
pattern: 10011000
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

patches are written to file
running tests...
used time: Finished in 16.14 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 10011000
pattern: 10100001
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10100001
pattern: 10100010
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10100010
pattern: 10100100
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10100100
pattern: 10101000
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10101000
pattern: 10110000
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10110000
pattern: 11000001
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11000001
pattern: 11000010
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11000010
pattern: 11000100
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11000100
pattern: 11001000
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11001000
pattern: 11010000
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11010000
pattern: 11100000
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

patches are written to file
running tests...
used time: Finished in 15.94 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 11100000
pattern: 00001111
try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001111
pattern: 00010111
try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 16.37 seconds
Failing tests: 13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 00010111
pattern: 00011011
try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011011
pattern: 00011101
try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011101
pattern: 00011110
try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011110
pattern: 00100111
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100111
pattern: 00101011
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101011
pattern: 00101101
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101101
pattern: 00101110
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101110
pattern: 00110011
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110011
pattern: 00110101
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110101
pattern: 00110110
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110110
pattern: 00111001
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00111001
pattern: 00111010
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00111010
pattern: 00111100
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00111100
pattern: 01000111
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000111
pattern: 01001011
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01001011
pattern: 01001101
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01001101
pattern: 01001110
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01001110
pattern: 01010011
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01010011
pattern: 01010101
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01010101
pattern: 01010110
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01010110
pattern: 01011001
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01011001
pattern: 01011010
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01011010
pattern: 01011100
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01011100
pattern: 01100011
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01100011
pattern: 01100101
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01100101
pattern: 01100110
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01100110
pattern: 01101001
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01101001
pattern: 01101010
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01101010
pattern: 01101100
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01101100
pattern: 01110001
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01110001
pattern: 01110010
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01110010
pattern: 01110100
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01110100
pattern: 01111000
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01111000
pattern: 10000111
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 16.27 seconds
Failing tests: 13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 10000111
pattern: 10001011
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 17.80 seconds
Failing tests: 14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Includes new failing tests, set to unusable
processed: 10001011
pattern: 10001101
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 17.95 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 10001101
pattern: 10001110
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 15.43 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 10001110
pattern: 10010011
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 15.60 seconds
Failing tests: 14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Includes new failing tests, set to unusable
processed: 10010011
pattern: 10010101
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 16.71 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 10010101
pattern: 10010110
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 17.18 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 10010110
pattern: 10011001
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 15.82 seconds
Failing tests: 18
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Includes new failing tests, set to unusable
processed: 10011001
pattern: 10011010
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 19.00 seconds
Failing tests: 18
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Includes new failing tests, set to unusable
processed: 10011010
pattern: 10011100
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
used time: Finished in 17.56 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 10011100
pattern: 10100011
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10100011
pattern: 10100101
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10100101
pattern: 10100110
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10100110
pattern: 10101001
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10101001
pattern: 10101010
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10101010
pattern: 10101100
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10101100
pattern: 10110001
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10110001
pattern: 10110010
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10110010
pattern: 10110100
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10110100
pattern: 10111000
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10111000
pattern: 11000011
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11000011
pattern: 11000101
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11000101
pattern: 11000110
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11000110
pattern: 11001001
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11001001
pattern: 11001010
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11001010
pattern: 11001100
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11001100
pattern: 11010001
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11010001
pattern: 11010010
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11010010
pattern: 11010100
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11010100
pattern: 11011000
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11011000
pattern: 11100001
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 16.91 seconds
Failing tests: 18
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Includes new failing tests, set to unusable
processed: 11100001
pattern: 11100010
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 17.88 seconds
Failing tests: 18
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Includes new failing tests, set to unusable
processed: 11100010
pattern: 11100100
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
used time: Finished in 16.95 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 11100100
pattern: 11101000
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

patches are written to file
running tests...
used time: Finished in 16.43 seconds
Failing tests: 12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
Can independently fix ['org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21', 'org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4', 'org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3', 'org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23', 'org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22']
select new bug
Pattern: 11101000
new failing tests:
org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
Save found bug
processed: 11101000
pattern: 11110000
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

patches are written to file
running tests...
used time: Finished in 19.74 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 11110000
pattern: 00011111
try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011111
pattern: 00101111
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101111
pattern: 00110111
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110111
pattern: 00111011
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00111011
pattern: 00111101
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00111101
pattern: 00111110
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00111110
pattern: 01001111
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01001111
pattern: 01010111
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01010111
pattern: 01011011
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01011011
pattern: 01011101
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01011101
pattern: 01011110
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01011110
pattern: 01100111
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01100111
pattern: 01101011
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01101011
pattern: 01101101
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01101101
pattern: 01101110
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01101110
pattern: 01110011
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01110011
pattern: 01110101
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01110101
pattern: 01110110
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01110110
pattern: 01111001
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01111001
pattern: 01111010
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01111010
pattern: 01111100
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01111100
pattern: 10001111
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 16.09 seconds
Failing tests: 13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 10001111
pattern: 10010111
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 20.71 seconds
Failing tests: 13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 10010111
pattern: 10011011
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 16.54 seconds
Failing tests: 14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Includes new failing tests, set to unusable
processed: 10011011
pattern: 10011101
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 20.20 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 10011101
pattern: 10011110
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 17.69 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 10011110
pattern: 10100111
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10100111
pattern: 10101011
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10101011
pattern: 10101101
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10101101
pattern: 10101110
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10101110
pattern: 10110011
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10110011
pattern: 10110101
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10110101
pattern: 10110110
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10110110
pattern: 10111001
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10111001
pattern: 10111010
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10111010
pattern: 10111100
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10111100
pattern: 11000111
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11000111
pattern: 11001011
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11001011
pattern: 11001101
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11001101
pattern: 11001110
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11001110
pattern: 11010011
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11010011
pattern: 11010101
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11010101
pattern: 11010110
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11010110
pattern: 11011001
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11011001
pattern: 11011010
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11011010
pattern: 11011100
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11011100
pattern: 11100011
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 16.02 seconds
Failing tests: 14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Includes new failing tests, set to unusable
processed: 11100011
pattern: 11100101
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 17.66 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 11100101
pattern: 11100110
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 17.37 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 11100110
pattern: 11101001
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 16.13 seconds
Failing tests: 13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
Includes new failing tests, set to unusable
processed: 11101001
pattern: 11101010
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 18.47 seconds
Failing tests: 13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
Includes new failing tests, set to unusable
processed: 11101010
pattern: 11101100
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
used time: Finished in 18.90 seconds
Failing tests: 12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
Can independently fix []
Could not fix independently
processed: 11101100
pattern: 11110001
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 19.68 seconds
Failing tests: 18
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Includes new failing tests, set to unusable
processed: 11110001
pattern: 11110010
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 19.61 seconds
Failing tests: 18
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Includes new failing tests, set to unusable
processed: 11110010
pattern: 11110100
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
used time: Finished in 19.57 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 11110100
pattern: 11111000
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

patches are written to file
running tests...
used time: Finished in 18.72 seconds
Failing tests: 4
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
Can independently fix ['org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13', 'org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19', 'org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18', 'org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17', 'org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16', 'org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15', 'org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20', 'org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14']
select new bug
Pattern: 11111000
new failing tests:
org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
Save found bug
processed: 11111000
pattern: 00111111
try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00111111
pattern: 01011111
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01011111
pattern: 01101111
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01101111
pattern: 01110111
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01110111
pattern: 01111011
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01111011
pattern: 01111101
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01111101
pattern: 01111110
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01111110
pattern: 10011111
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 16.99 seconds
Failing tests: 13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 10011111
pattern: 10101111
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10101111
pattern: 10110111
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10110111
pattern: 10111011
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10111011
pattern: 10111101
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10111101
pattern: 10111110
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10111110
pattern: 11001111
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11001111
pattern: 11010111
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11010111
pattern: 11011011
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11011011
pattern: 11011101
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11011101
pattern: 11011110
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11011110
pattern: 11100111
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 18.06 seconds
Failing tests: 13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 11100111
pattern: 11101011
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 19.28 seconds
Failing tests: 9
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
Includes new failing tests, set to unusable
processed: 11101011
pattern: 11101101
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 20.87 seconds
Failing tests: 12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
Can independently fix []
Could not fix independently
processed: 11101101
pattern: 11101110
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 18.25 seconds
Failing tests: 12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
Can independently fix []
Could not fix independently
processed: 11101110
pattern: 11110011
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 16.87 seconds
Failing tests: 14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Includes new failing tests, set to unusable
processed: 11110011
pattern: 11110101
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 19.67 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 11110101
pattern: 11110110
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 18.18 seconds
Failing tests: 17
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 11110110
pattern: 11111001
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 16.34 seconds
Failing tests: 5
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
Includes new failing tests, set to unusable
processed: 11111001
pattern: 11111010
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 15.20 seconds
Failing tests: 5
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
Includes new failing tests, set to unusable
processed: 11111010
pattern: 11111100
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

patches are written to file
running tests...
used time: Finished in 18.89 seconds
Failing tests: 4
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
Can independently fix []
Could not fix independently
processed: 11111100
pattern: 01111111
try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01111111
pattern: 10111111
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10111111
pattern: 11011111
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11011111
pattern: 11101111
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 18.79 seconds
Failing tests: 8
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
Can independently fix []
Could not fix independently
processed: 11101111
pattern: 11110111
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 16.27 seconds
Failing tests: 13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_15
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_16
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_17
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_18
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_19
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_20
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_21
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_22
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_23
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_3
	org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class$catena_4
Can independently fix []
Could not fix independently
processed: 11110111
pattern: 11111011
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 19.89 seconds
Failing tests: 1
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_String
Includes new failing tests, set to unusable
processed: 11111011
pattern: 11111101
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 17.66 seconds
Failing tests: 4
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
Can independently fix []
Could not fix independently
processed: 11111101
pattern: 11111110
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 16.90 seconds
Failing tests: 4
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_12
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_13
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_14
	org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class$catena_3
Can independently fix []
Could not fix independently
processed: 11111110
pattern: 11111111
try to fix hunk: 0
insert before 191 with         StringBuffer arrayPrefix = new StringBuffer();

try to fix hunk: 1
insert before 193 with         if (className.startsWith("[")) {
            while (className.charAt(0) == '[') {
                className = className.substring(1);
                arrayPrefix.append("[]");
            }

try to fix hunk: 2
insert before 194 with             if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
                className = className.substring(1, className.length() - 1);
            }
        }

try to fix hunk: 3
insert before 195 with         if (reverseAbbreviationMap.containsKey(className)) {
            className = reverseAbbreviationMap.get(className);
        }

try to fix hunk: 4
replace from 203 with range 1 to
        return out + arrayPrefix;

try to fix hunk: 5
replace from 245 with range 1 to
        if (className == null || className.length() == 0) {

try to fix hunk: 6
insert before 250 with         while (className.charAt(0) == '[') {
            className = className.substring(1);
        }

try to fix hunk: 7
insert before 251 with         if (className.charAt(0) == 'L' && className.charAt(className.length() - 1) == ';') {
            className = className.substring(1);
        }

patches are written to file
running tests...
used time: Finished in 20.32 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 11111111
Find 3 new bugs
