{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java",
            "from_line_no": 146,
            "to_line_no": 146,
            "replaced_with": "        return optimize(f, goal, min, max, min + 0.5 * (max - min));\n",
            "replaced": "        return optimize(f, goal, min, max, 0);\n",
            "patch_type": "replace",
            "next_line_no": 147
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizer.java",
            "from_line_no": 160,
            "to_line_no": 162,
            "replaced_with": "                final double s = (i == 0) ? startValue : min + generator.nextDouble() * (max - min);\n                optima[i] = optimizer.optimize(f, goal, min, max, s);\n",
            "replaced": "                final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);\n                final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);\n                optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));\n",
            "patch_type": "replace",
            "next_line_no": 163
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest::testQuinticMin"
        ],
        "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest::testQuinticMin": {
            "file_path": "src/test/java/org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java",
            "Instance": "Begin: Pos(57, 5)\nEnd: Pos(80, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_62/src/test/java//org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java\nName: testQuinticMin\nChilds: [StatementAssertion<Begin: Pos(71, 9), End: Pos(71, 62)>,\nStatementAssertion<Begin: Pos(72, 9), End: Pos(72, 62)>,\nStatementAssertion<Begin: Pos(76, 13), End: Pos(76, 84)>,\nStatementAssertion<Begin: Pos(78, 9), End: Pos(78, 53)>,\nStatementAssertion<Begin: Pos(79, 9), End: Pos(79, 54)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_62/src/test/java//org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java",
            "name": "testQuinticMin",
            "begin": "Pos(57, 5)",
            "end": "Pos(80, 5)",
            "begin_line_no": 57,
            "end_line_no": 80,
            "child": [
                "Begin: Pos(71, 9)\nEnd: Pos(71, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(72, 9)\nEnd: Pos(72, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(76, 13)\nEnd: Pos(76, 84)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(78, 9)\nEnd: Pos(78, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(79, 9)\nEnd: Pos(79, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testQuinticMin$catena_0() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n        underlying.setMaxEvaluations(300);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer optimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n\n        UnivariateRealPointValuePair optimum\n            = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-0.0443342695, optimum.getValue(), 1e-9);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        UnivariateRealPointValuePair[] optima = optimizer.getOptima();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(optimizer.getEvaluations() >= 50);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(optimizer.getEvaluations() <= 100);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testQuinticMin$catena_1() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n        underlying.setMaxEvaluations(300);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer optimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n\n        UnivariateRealPointValuePair optimum\n            = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-0.0443342695, optimum.getValue(), 1e-9);                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        UnivariateRealPointValuePair[] optima = optimizer.getOptima();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(optimizer.getEvaluations() >= 50);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(optimizer.getEvaluations() <= 100);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testQuinticMin$catena_2() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n        underlying.setMaxEvaluations(300);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer optimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n\n        UnivariateRealPointValuePair optimum\n            = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.0443342695, optimum.getValue(), 1e-9);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        UnivariateRealPointValuePair[] optima = optimizer.getOptima();\n        for (int i = 0; i < optima.length; ++i) {\n            assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);                        /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        try{ assertTrue(optimizer.getEvaluations() >= 50);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(optimizer.getEvaluations() <= 100);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testQuinticMin$catena_3() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n        underlying.setMaxEvaluations(300);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer optimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n\n        UnivariateRealPointValuePair optimum\n            = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.0443342695, optimum.getValue(), 1e-9);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        UnivariateRealPointValuePair[] optima = optimizer.getOptima();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        assertTrue(optimizer.getEvaluations() >= 50);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(optimizer.getEvaluations() <= 100);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testQuinticMin$catena_4() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n        underlying.setMaxEvaluations(300);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer optimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n\n        UnivariateRealPointValuePair optimum\n            = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.0443342695, optimum.getValue(), 1e-9);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        UnivariateRealPointValuePair[] optima = optimizer.getOptima();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(optimizer.getEvaluations() >= 50);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(optimizer.getEvaluations() <= 100);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testQuinticMin$catena_0() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n        underlying.setMaxEvaluations(300);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer optimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n\n        UnivariateRealPointValuePair optimum\n            = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-0.0443342695, optimum.getValue(), 1e-9);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        UnivariateRealPointValuePair[] optima = optimizer.getOptima();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(optimizer.getEvaluations() >= 50);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(optimizer.getEvaluations() <= 100);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void testQuinticMin$catena_1() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n        underlying.setMaxEvaluations(300);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer optimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n\n        UnivariateRealPointValuePair optimum\n            = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-0.0443342695, optimum.getValue(), 1e-9);                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        UnivariateRealPointValuePair[] optima = optimizer.getOptima();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(optimizer.getEvaluations() >= 50);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(optimizer.getEvaluations() <= 100);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void testQuinticMin$catena_2() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n        underlying.setMaxEvaluations(300);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer optimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n\n        UnivariateRealPointValuePair optimum\n            = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.0443342695, optimum.getValue(), 1e-9);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        UnivariateRealPointValuePair[] optima = optimizer.getOptima();\n        for (int i = 0; i < optima.length; ++i) {\n            assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);                        /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        try{ assertTrue(optimizer.getEvaluations() >= 50);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(optimizer.getEvaluations() <= 100);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    @Test\n    public void testQuinticMin$catena_3() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n        underlying.setMaxEvaluations(300);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer optimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n\n        UnivariateRealPointValuePair optimum\n            = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.0443342695, optimum.getValue(), 1e-9);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        UnivariateRealPointValuePair[] optima = optimizer.getOptima();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        assertTrue(optimizer.getEvaluations() >= 50);                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(optimizer.getEvaluations() <= 100);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    @Test\n    public void testQuinticMin$catena_4() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer(1e-9, 1e-14);\n        underlying.setMaxEvaluations(300);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer optimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n\n        UnivariateRealPointValuePair optimum\n            = optimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.0443342695, optimum.getValue(), 1e-9);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        UnivariateRealPointValuePair[] optima = optimizer.getOptima();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(optimizer.getEvaluations() >= 50);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(optimizer.getEvaluations() <= 100);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "01": {
        "failing_tests": [
            "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest::testQuinticMin$catena_0",
            "org.apache.commons.math.optimization.univariate.MultiStartUnivariateRealOptimizerTest::testQuinticMin$catena_4"
        ]
    }
}