{
    "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldComparison3": {
        "begin_line_no": 699,
        "end_line_no": 723,
        "file_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "to": [
            "  public void testFoldComparison3$catena_3() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = !1 == null\", \"x = false\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldComparison3$catena_10() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    fold(\"x = !0 === !0\", \"x = true\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldComparison3$catena_17() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"!1 === !0\", \"false\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldComparison3$catena_8() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"!1 == !0\", \"false\");                                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldComparison3$catena_4() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = !1 == !0\", \"x = false\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldComparison3$catena_16() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"!1 === null\", \"false\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldComparison3$catena_9() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"!0 == null\", \"false\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldComparison3$catena_13() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = !1 === !0\", \"x = false\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldComparison3$catena_15() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    fold(\"!0 === !0\", \"true\");                                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldComparison3$catena_2() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = !1 == !1\", \"x = true\");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldComparison3$catena_1() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    fold(\"x = !0 == !0\", \"x = true\");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldComparison3$catena_0() {\n    fold(\"x = !1 == !0\", \"x = false\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldComparison3$catena_7() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"!1 == null\", \"false\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldComparison3$catena_11() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = !1 === !1\", \"x = true\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldComparison3$catena_12() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = !1 === null\", \"x = false\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldComparison3$catena_14() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = !0 === null\", \"x = false\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldComparison3$catena_18() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"!0 === null\", \"false\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n  }",
            "  public void testFoldComparison3$catena_5() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = !0 == null\", \"x = false\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ fold(\"!0 == !0\", \"true\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldComparison3$catena_6() {\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 == !0\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !1\", \"x = true\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 == !0\", \"x = false\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 == null\", \"x = false\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    fold(\"!0 == !0\", \"true\");                                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"!1 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 == !0\", \"false\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 == null\", \"false\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = !0 === !0\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !1\", \"x = true\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !1 === !0\", \"x = false\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = !0 === null\", \"x = false\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"!0 === !0\", \"true\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!1 === !0\", \"false\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"!0 === null\", \"false\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }"
        ]
    },
    "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testInvertibleOperators": {
        "begin_line_no": 1094,
        "end_line_no": 1138,
        "file_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "to": [
            "  public void testInvertibleOperators$catena_0() {\n    Map<String, String> inverses = ImmutableMap.<String, String>builder()\n        .put(\"==\", \"!=\")\n        .put(\"===\", \"!==\")\n        .put(\"<=\", \">\")\n        .put(\"<\", \">=\")\n        .put(\">=\", \"<\")\n        .put(\">\", \"<=\")\n        .put(\"!=\", \"==\")\n        .put(\"!==\", \"===\")\n        .build();\n    Set<String> comparators = ImmutableSet.of(\"<=\", \"<\", \">=\", \">\");\n    Set<String> equalitors = ImmutableSet.of(\"==\", \"===\");\n    Set<String> uncomparables = ImmutableSet.of(\"undefined\", \"void 0\");\n    List<String> operators = ImmutableList.copyOf(inverses.values());\n    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {\n      for (int iOperandB = 0;\n           iOperandB < LITERAL_OPERANDS.size();\n           iOperandB++) {\n        for (int iOp = 0; iOp < operators.size(); iOp++) {\n          String a = LITERAL_OPERANDS.get(iOperandA);\n          String b = LITERAL_OPERANDS.get(iOperandB);\n          String op = operators.get(iOp);\n          String inverse = inverses.get(op);\n\n          // Test invertability.\n          if (comparators.contains(op) &&\n              (uncomparables.contains(a) || uncomparables.contains(b))) {\n            assertSameResults(join(a, op, b), \"false\");                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertSameResults(join(a, inverse, b), \"false\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n          } else if (a.equals(b) && equalitors.contains(op)) {\n            if (a.equals(\"NaN\") || a.equals(\"Infinity\")) {\n              try{ foldSame(join(a, op, b));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ foldSame(join(a, inverse, b));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } else {\n              try{ assertSameResults(join(a, op, b), \"true\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ assertSameResults(join(a, inverse, b), \"false\");                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n          } else {\n            try{ assertNotSameResults(join(a, op, b), join(a, inverse, b));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n          }\n        }\n      }\n    }\n  }",
            "  public void testInvertibleOperators$catena_5() {\n    Map<String, String> inverses = ImmutableMap.<String, String>builder()\n        .put(\"==\", \"!=\")\n        .put(\"===\", \"!==\")\n        .put(\"<=\", \">\")\n        .put(\"<\", \">=\")\n        .put(\">=\", \"<\")\n        .put(\">\", \"<=\")\n        .put(\"!=\", \"==\")\n        .put(\"!==\", \"===\")\n        .build();\n    Set<String> comparators = ImmutableSet.of(\"<=\", \"<\", \">=\", \">\");\n    Set<String> equalitors = ImmutableSet.of(\"==\", \"===\");\n    Set<String> uncomparables = ImmutableSet.of(\"undefined\", \"void 0\");\n    List<String> operators = ImmutableList.copyOf(inverses.values());\n    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {\n      for (int iOperandB = 0;\n           iOperandB < LITERAL_OPERANDS.size();\n           iOperandB++) {\n        for (int iOp = 0; iOp < operators.size(); iOp++) {\n          String a = LITERAL_OPERANDS.get(iOperandA);\n          String b = LITERAL_OPERANDS.get(iOperandB);\n          String op = operators.get(iOp);\n          String inverse = inverses.get(op);\n\n          // Test invertability.\n          if (comparators.contains(op) &&\n              (uncomparables.contains(a) || uncomparables.contains(b))) {\n            try{ assertSameResults(join(a, op, b), \"false\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertSameResults(join(a, inverse, b), \"false\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n          } else if (a.equals(b) && equalitors.contains(op)) {\n            if (a.equals(\"NaN\") || a.equals(\"Infinity\")) {\n              try{ foldSame(join(a, op, b));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ foldSame(join(a, inverse, b));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } else {\n              try{ assertSameResults(join(a, op, b), \"true\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n              assertSameResults(join(a, inverse, b), \"false\");                                              /***** ORIGINAL ASSERTION IS HERE *****/\n            }\n          } else {\n            try{ assertNotSameResults(join(a, op, b), join(a, inverse, b));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n          }\n        }\n      }\n    }\n  }",
            "  public void testInvertibleOperators$catena_4() {\n    Map<String, String> inverses = ImmutableMap.<String, String>builder()\n        .put(\"==\", \"!=\")\n        .put(\"===\", \"!==\")\n        .put(\"<=\", \">\")\n        .put(\"<\", \">=\")\n        .put(\">=\", \"<\")\n        .put(\">\", \"<=\")\n        .put(\"!=\", \"==\")\n        .put(\"!==\", \"===\")\n        .build();\n    Set<String> comparators = ImmutableSet.of(\"<=\", \"<\", \">=\", \">\");\n    Set<String> equalitors = ImmutableSet.of(\"==\", \"===\");\n    Set<String> uncomparables = ImmutableSet.of(\"undefined\", \"void 0\");\n    List<String> operators = ImmutableList.copyOf(inverses.values());\n    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {\n      for (int iOperandB = 0;\n           iOperandB < LITERAL_OPERANDS.size();\n           iOperandB++) {\n        for (int iOp = 0; iOp < operators.size(); iOp++) {\n          String a = LITERAL_OPERANDS.get(iOperandA);\n          String b = LITERAL_OPERANDS.get(iOperandB);\n          String op = operators.get(iOp);\n          String inverse = inverses.get(op);\n\n          // Test invertability.\n          if (comparators.contains(op) &&\n              (uncomparables.contains(a) || uncomparables.contains(b))) {\n            try{ assertSameResults(join(a, op, b), \"false\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertSameResults(join(a, inverse, b), \"false\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n          } else if (a.equals(b) && equalitors.contains(op)) {\n            if (a.equals(\"NaN\") || a.equals(\"Infinity\")) {\n              try{ foldSame(join(a, op, b));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ foldSame(join(a, inverse, b));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } else {\n              assertSameResults(join(a, op, b), \"true\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n              try{ assertSameResults(join(a, inverse, b), \"false\");                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n          } else {\n            try{ assertNotSameResults(join(a, op, b), join(a, inverse, b));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n          }\n        }\n      }\n    }\n  }",
            "  public void testInvertibleOperators$catena_1() {\n    Map<String, String> inverses = ImmutableMap.<String, String>builder()\n        .put(\"==\", \"!=\")\n        .put(\"===\", \"!==\")\n        .put(\"<=\", \">\")\n        .put(\"<\", \">=\")\n        .put(\">=\", \"<\")\n        .put(\">\", \"<=\")\n        .put(\"!=\", \"==\")\n        .put(\"!==\", \"===\")\n        .build();\n    Set<String> comparators = ImmutableSet.of(\"<=\", \"<\", \">=\", \">\");\n    Set<String> equalitors = ImmutableSet.of(\"==\", \"===\");\n    Set<String> uncomparables = ImmutableSet.of(\"undefined\", \"void 0\");\n    List<String> operators = ImmutableList.copyOf(inverses.values());\n    for (int iOperandA = 0; iOperandA < LITERAL_OPERANDS.size(); iOperandA++) {\n      for (int iOperandB = 0;\n           iOperandB < LITERAL_OPERANDS.size();\n           iOperandB++) {\n        for (int iOp = 0; iOp < operators.size(); iOp++) {\n          String a = LITERAL_OPERANDS.get(iOperandA);\n          String b = LITERAL_OPERANDS.get(iOperandB);\n          String op = operators.get(iOp);\n          String inverse = inverses.get(op);\n\n          // Test invertability.\n          if (comparators.contains(op) &&\n              (uncomparables.contains(a) || uncomparables.contains(b))) {\n            try{ assertSameResults(join(a, op, b), \"false\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertSameResults(join(a, inverse, b), \"false\");                                                /***** ORIGINAL ASSERTION IS HERE *****/\n          } else if (a.equals(b) && equalitors.contains(op)) {\n            if (a.equals(\"NaN\") || a.equals(\"Infinity\")) {\n              try{ foldSame(join(a, op, b));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ foldSame(join(a, inverse, b));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n            } else {\n              try{ assertSameResults(join(a, op, b), \"true\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n              try{ assertSameResults(join(a, inverse, b), \"false\");                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n          } else {\n            try{ assertNotSameResults(join(a, op, b), join(a, inverse, b));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n          }\n        }\n      }\n    }\n  }"
        ]
    }
}