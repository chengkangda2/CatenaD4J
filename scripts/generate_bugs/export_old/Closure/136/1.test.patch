{
    "com.google.javascript.jscomp.MethodCheckTest::testSeparateMethods": {
        "begin_line_no": 94,
        "end_line_no": 104,
        "file_path": "test/com/google/javascript/jscomp/MethodCheckTest.java",
        "to": [
            "  public void testSeparateMethods$catena_4() {\n    try{ testSame(\"var f = new Foo();f.oneOrTwoArg2(1);\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = new Baz();f.oneOrTwoArg2(1, 2);\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod1(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod2(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Can't detect these incorrect usuages as they are defined indirectly.\n    testSame(\"var f = new Bar();f.oneOrTwoArg2(1, 2, 3);\");                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"Boz.staticMethod1(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod2(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testSeparateMethods$catena_6() {\n    try{ testSame(\"var f = new Foo();f.oneOrTwoArg2(1);\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = new Baz();f.oneOrTwoArg2(1, 2);\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod1(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod2(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Can't detect these incorrect usuages as they are defined indirectly.\n    try{ testSame(\"var f = new Bar();f.oneOrTwoArg2(1, 2, 3);\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod1(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"Boz.staticMethod2(1);\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n  }",
            "  public void testSeparateMethods$catena_5() {\n    try{ testSame(\"var f = new Foo();f.oneOrTwoArg2(1);\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"var f = new Baz();f.oneOrTwoArg2(1, 2);\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod1(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ testSame(\"Boz.staticMethod2(1, 2);\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Can't detect these incorrect usuages as they are defined indirectly.\n    try{ testSame(\"var f = new Bar();f.oneOrTwoArg2(1, 2, 3);\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    testSame(\"Boz.staticMethod1(1, 2);\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ testSame(\"Boz.staticMethod2(1);\");                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n  }"
        ]
    },
    "com.google.javascript.jscomp.RenameVarsTest::testDollarSignSuperExport2": {
        "begin_line_no": 459,
        "end_line_no": 480,
        "file_path": "test/com/google/javascript/jscomp/RenameVarsTest.java",
        "to": [
            ""
        ]
    }
}