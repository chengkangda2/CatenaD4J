{
    "org.apache.commons.lang3.time.FastDateFormatTest::testFormat": {
        "begin_line_no": 173,
        "end_line_no": 226,
        "file_path": "src/test/java/org/apache/commons/lang3/time/FastDateFormatTest.java",
        "to": [
            "    public void testFormat$catena_19() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));         /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }",
            "    public void testFormat$catena_20() {\n        Locale realDefaultLocale = Locale.getDefault();\n        TimeZone realDefaultZone = TimeZone.getDefault();\n        try {\n            Locale.setDefault(Locale.US);\n            TimeZone.setDefault(TimeZone.getTimeZone(\"America/New_York\"));\n\n            GregorianCalendar cal1 = new GregorianCalendar(2003, 0, 10, 15, 33, 20);\n            GregorianCalendar cal2 = new GregorianCalendar(2003, 6, 10, 9, 00, 00);\n            Date date1 = cal1.getTime();\n            Date date2 = cal2.getTime();\n            long millis1 = date1.getTime();\n            long millis2 = date2.getTime();\n\n            FastDateFormat fdf = FastDateFormat.getInstance(\"yyyy-MM-dd'T'HH:mm:ss\");\n            SimpleDateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ss\");\n            try{ assertEquals(sdf.format(date1), fdf.format(date1));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(date1));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(cal1));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-01-10T15:33:20\", fdf.format(millis1));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(date2));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(cal2));                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"2003-07-10T09:00:00\", fdf.format(millis2));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"Z\");\n            try{ assertEquals(\"-0500\", fdf.format(date1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(cal1));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0500\", fdf.format(millis1));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-0400\", fdf.format(date2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(cal2));                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-0400\", fdf.format(millis2));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            fdf = FastDateFormat.getInstance(\"ZZ\");\n            try{ assertEquals(\"-05:00\", fdf.format(date1));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(cal1));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-05:00\", fdf.format(millis1));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            try{ assertEquals(\"-04:00\", fdf.format(date2));                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(cal2));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertEquals(\"-04:00\", fdf.format(millis2));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n            String pattern = \"GGGG GGG GG G yyyy yyy yy y MMMM MMM MM M\" +\n                \" dddd ddd dd d DDDD DDD DD D EEEE EEE EE E aaaa aaa aa a zzzz zzz zz z\";\n            fdf = FastDateFormat.getInstance(pattern);\n            sdf = new SimpleDateFormat(pattern);\n            // SDF bug fix starting with Java 7\n            try{ assertEquals(sdf.format(date1).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date1));    }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertEquals(sdf.format(date2).replaceAll(\"2003 03 03 03\", \"2003 2003 03 2003\"), fdf.format(date2));         /***** ORIGINAL ASSERTION IS HERE *****/\n        } finally {\n            Locale.setDefault(realDefaultLocale);\n            TimeZone.setDefault(realDefaultZone);\n        }\n    }"
        ]
    }
}