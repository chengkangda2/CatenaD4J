{
    "org.apache.commons.lang.time.DateUtilsTest::testRoundLang346": {
        "begin_line_no": 705,
        "end_line_no": 762,
        "file_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "to": [
            "    public void testRoundLang346$catena_0() throws Exception\n    {\n        TimeZone.setDefault(defaultZone);\n        dateTimeParser.setTimeZone(defaultZone);\n        Calendar testCalendar = Calendar.getInstance();\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        Date date = testCalendar.getTime();\n        assertEquals(\"Minute Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:09:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Minute No Round Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:00.000\"),\n                     DateUtils.round(date, Calendar.MINUTE));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n\n        try{ assertEquals(\"Second Round Up with 600 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:51.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:50.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 600);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Up with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:21.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 20);\n        testCalendar.set(Calendar.MILLISECOND, 200);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Second Round Down with 200 Milli Seconds Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:08:20.000\"),\n                     DateUtils.round(date, Calendar.SECOND));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 8, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Down Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 08:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        testCalendar.set(2007, 6, 2, 8, 31, 50);\n        date = testCalendar.getTime();\n        try{ assertEquals(\"Hour Round Up Failed\",\n                     dateTimeParser.parse(\"July 2, 2007 09:00:00.000\"),\n                     DateUtils.round(date, Calendar.HOUR));                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}