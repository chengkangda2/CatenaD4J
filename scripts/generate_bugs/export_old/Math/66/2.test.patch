{
    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testQuinticMin": {
        "begin_line_no": 55,
        "end_line_no": 100,
        "file_path": "src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java",
        "to": [
            "    @Test\n    public void testQuinticMin$catena_5() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        try{ assertEquals(-0.2719561270319131, result, 1.0e-13);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations()    >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testQuinticMin$catena_4() throws MathException {\n        // The quintic function has zeros at 0, +-0.5 and +-1.\n        // The function has extrema (first derivative is zero) at 0.27195613 and 0.82221643,\n        UnivariateRealFunction f = new QuinticFunction();\n        UnivariateRealOptimizer underlying = new BrentOptimizer();\n        underlying.setRelativeAccuracy(1e-15);\n        JDKRandomGenerator g = new JDKRandomGenerator();\n        g.setSeed(4312000053L);\n        MultiStartUnivariateRealOptimizer minimizer =\n            new MultiStartUnivariateRealOptimizer(underlying, 5, g);\n        minimizer.setAbsoluteAccuracy(10 * minimizer.getAbsoluteAccuracy());\n        minimizer.setRelativeAccuracy(10 * minimizer.getRelativeAccuracy());\n\n        try {\n            minimizer.getOptima();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try {\n            minimizer.getOptimaValues();\n            try{ fail(\"an exception should have been thrown\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalStateException ise) {\n            // expected\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        double result = minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2);\n        assertEquals(-0.2719561270319131, result, 1.0e-13);                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double[] optima = minimizer.getOptima();\n        double[] optimaValues = minimizer.getOptimaValues();\n        for (int i = 0; i < optima.length; ++i) {\n            try{ assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertTrue(minimizer.getEvaluations()    >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getEvaluations()    <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() >= 120);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(minimizer.getIterationCount() <= 170);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizerTest::testSinMin": {
        "begin_line_no": 34,
        "end_line_no": 53,
        "file_path": "src/test/java/org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java",
        "to": [
            ""
        ]
    },
    "org.apache.commons.math.optimization.univariate.BrentOptimizerTest::testQuinticMinStatistics": {
        "begin_line_no": 85,
        "end_line_no": 115,
        "file_path": "src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java",
        "to": [
            ""
        ]
    },
    "org.apache.commons.math.optimization.univariate.BrentOptimizerTest::testSinMin": {
        "begin_line_no": 40,
        "end_line_no": 69,
        "file_path": "src/test/java/org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java",
        "to": [
            ""
        ]
    }
}