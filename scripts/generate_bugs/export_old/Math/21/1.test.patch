{
    "org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank": {
        "begin_line_no": 50,
        "end_line_no": 73,
        "file_path": "src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java",
        "to": [
            "    @Test\n    public void testFullRank$catena_1() {\n\n        RealMatrix base = MatrixUtils.createRealMatrix(new double[][] {\n            { 0.1159548705,      0.,           0.,           0.      },\n            { 0.0896442724, 0.1223540781,      0.,           0.      },\n            { 0.0852155322, 4.558668e-3,  0.1083577299,      0.      },\n            { 0.0905486674, 0.0213768077, 0.0128878333, 0.1014155693 }\n        });\n\n        RealMatrix m = base.multiply(base.transpose());\n\n        RectangularCholeskyDecomposition d =\n                new RectangularCholeskyDecomposition(m, 1.0e-10);\n\n        RealMatrix root = d.getRootMatrix();\n        RealMatrix rebuiltM = root.multiply(root.transpose());\n        try{ Assert.assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // the pivoted Cholesky decomposition is *not* unique. Here, the root is\n        // not equal to the original trianbular base matrix\n        Assert.assertTrue(root.subtract(base).getNorm() > 0.3);                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
        ]
    },
    "org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789": {
        "begin_line_no": 75,
        "end_line_no": 110,
        "file_path": "src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java",
        "to": [
            "    @Test\n    public void testMath789$catena_2() {\n\n        final RealMatrix m1 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.013445532, 0.010394690, 0.009881156, 0.010499559},\n            {0.010394690, 0.023006616, 0.008196856, 0.010732709},\n            {0.009881156, 0.008196856, 0.019023866, 0.009210099},\n            {0.010499559, 0.010732709, 0.009210099, 0.019107243}\n        });\n        RealMatrix root1 = new RectangularCholeskyDecomposition(m1, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM1 = root1.multiply(root1.transpose());\n        try{ Assert.assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final RealMatrix m2 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.0, 0.0, 0.0, 0.0, 0.0},\n            {0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559},\n            {0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709},\n            {0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},\n            {0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}\n        });\n        RealMatrix root2 = new RectangularCholeskyDecomposition(m2, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM2 = root2.multiply(root2.transpose());\n        try{ Assert.assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final RealMatrix m3 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559},\n            {0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709},\n            {0.0, 0.0, 0.0, 0.0, 0.0},\n            {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},\n            {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}\n        });\n        RealMatrix root3 = new RectangularCholeskyDecomposition(m3, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM3 = root3.multiply(root3.transpose());\n        Assert.assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
        ]
    }
}