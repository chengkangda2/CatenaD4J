{
    "org.apache.commons.math.ode.nonstiff.ClassicalRungeKuttaIntegratorTest::testMissedEndEvent": {
        "begin_line_no": 44,
        "end_line_no": 95,
        "file_path": "src/test/java/org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java",
        "to": [
            "  public void testMissedEndEvent$catena_0() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k      = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      try{ Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n  }",
            "  public void testMissedEndEvent$catena_3() throws IntegratorException, DerivativeException {\n      final double   t0     = 1878250320.0000029;\n      final double   tEvent = 1878250379.9999986;\n      final double[] k      = { 1.0e-4, 1.0e-5, 1.0e-6 };\n      FirstOrderDifferentialEquations ode = new FirstOrderDifferentialEquations() {\n\n          public int getDimension() {\n              return k.length;\n          }\n\n          public void computeDerivatives(double t, double[] y, double[] yDot) {\n              for (int i = 0; i < y.length; ++i) {\n                  yDot[i] = k[i] * y[i];\n              }\n          }\n      };\n\n      ClassicalRungeKuttaIntegrator integrator = new ClassicalRungeKuttaIntegrator(60.0);\n\n      double[] y0   = new double[k.length];\n      for (int i = 0; i < y0.length; ++i) {\n          y0[i] = i + 1;\n      }\n      double[] y    = new double[k.length];\n\n      double finalT = integrator.integrate(ode, t0, y0, tEvent, y);\n      try{ Assert.assertEquals(tEvent, finalT, 5.0e-6);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n      integrator.addEventHandler(new EventHandler() {\n\n          public void resetState(double t, double[] y) {\n          }\n\n          public double g(double t, double[] y) {\n              return t - tEvent;\n          }\n\n          public int eventOccurred(double t, double[] y, boolean increasing) {\n              try{ Assert.assertEquals(tEvent, t, 5.0e-6);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n              return CONTINUE;\n          }\n      }, Double.POSITIVE_INFINITY, 1.0e-20, 100);\n      finalT = integrator.integrate(ode, t0, y0, tEvent + 120, y);\n      Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n      for (int i = 0; i < y.length; ++i) {\n          try{ Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);                   }catch(Throwable __SHOULD_BE_IGNORED){}\n      }\n\n  }"
        ]
    },
    "org.apache.commons.math.ode.nonstiff.DormandPrince853IntegratorTest::testMissedEndEvent": {
        "begin_line_no": 44,
        "end_line_no": 98,
        "file_path": "src/test/java/org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java",
        "to": [
            ""
        ]
    }
}