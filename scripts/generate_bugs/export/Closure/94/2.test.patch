{
    "com.google.javascript.jscomp.NodeUtilTest::testValidDefine": {
        "begin_line_no": 1071,
        "end_line_no": 1090,
        "file_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "to": [
            "  public void testValidDefine$catena_12() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(testValidDefineValue(\"1 + 8\"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testValidDefine$catena_13() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testValidDefine$catena_0() {\n    assertTrue(testValidDefineValue(\"1\"));                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testValidDefine$catena_1() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(testValidDefineValue(\"-3\"));                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testValidDefine$catena_2() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(testValidDefineValue(\"true\"));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testValidDefine$catena_3() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(testValidDefineValue(\"false\"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testValidDefine$catena_4() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(testValidDefineValue(\"'foo'\"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testValidDefine$catena_5() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    assertFalse(testValidDefineValue(\"x\"));                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testValidDefine$catena_6() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertFalse(testValidDefineValue(\"null\"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testValidDefine$catena_7() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertFalse(testValidDefineValue(\"undefined\"));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testValidDefine$catena_8() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertFalse(testValidDefineValue(\"NaN\"));                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testValidDefine$catena_9() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    assertTrue(testValidDefineValue(\"!true\"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testValidDefine$catena_10() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(testValidDefineValue(\"-true\"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(testValidDefineValue(\"1 & 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testValidDefine$catena_11() {\n    try{ assertTrue(testValidDefineValue(\"1\"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-3\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"true\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"false\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'foo'\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertFalse(testValidDefineValue(\"x\"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"null\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"undefined\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(testValidDefineValue(\"NaN\"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    \n    try{ assertTrue(testValidDefineValue(\"!true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"-true\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(testValidDefineValue(\"1 & 8\"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(testValidDefineValue(\"1 + 8\"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(testValidDefineValue(\"'a' + 'b'\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(testValidDefineValue(\"1 & foo\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n  }"
        ]
    }
}