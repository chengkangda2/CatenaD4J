{
    "com.google.javascript.jscomp.CodePrinterTest::testSetter": {
        "begin_line_no": 1166,
        "end_line_no": 1183,
        "file_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "to": [
            "  public void testSetter$catena_2() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\n       \"var x = {set a(y) {return 1}}\",\n       \"var x={set a(y){return 1}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertPrint(\n      \"var x = {set 1(y) {return 1}}\",\n      \"var x={set 1(y){return 1}}\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {set \\\"(x)\\\"(y) {return 1}}\",\n      \"var x={set \\\"(x)\\\"(y){return 1}}\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testSetter$catena_0() {\n    assertPrint(\"var x = {}\", \"var x={}\");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\n       \"var x = {set a(y) {return 1}}\",\n       \"var x={set a(y){return 1}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {set 1(y) {return 1}}\",\n      \"var x={set 1(y){return 1}}\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {set \\\"(x)\\\"(y) {return 1}}\",\n      \"var x={set \\\"(x)\\\"(y){return 1}}\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testSetter$catena_1() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\n       \"var x = {set a(y) {return 1}}\",\n       \"var x={set a(y){return 1}}\");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {set 1(y) {return 1}}\",\n      \"var x={set 1(y){return 1}}\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {set \\\"(x)\\\"(y) {return 1}}\",\n      \"var x={set \\\"(x)\\\"(y){return 1}}\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testSetter$catena_4() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\n       \"var x = {set a(y) {return 1}}\",\n       \"var x={set a(y){return 1}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {set 1(y) {return 1}}\",\n      \"var x={set 1(y){return 1}}\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertPrint(\n      \"var x = {set \\\"(x)\\\"(y) {return 1}}\",\n      \"var x={set \\\"(x)\\\"(y){return 1}}\");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
        ]
    },
    "com.google.javascript.jscomp.CodePrinterTest::testGetter": {
        "begin_line_no": 1146,
        "end_line_no": 1164,
        "file_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "to": [
            "  public void testGetter$catena_3() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x = {get a() {return 1}}\", \"var x={get a(){return 1}}\");                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\n      \"var x = {get a() {}, get b(){}}\",\n      \"var x={get a(){},get b(){}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertPrint(\n      \"var x = {get 1() {return 1}}\",\n      \"var x={get 1(){return 1}}\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get \\\"()\\\"() {return 1}}\",\n      \"var x={get \\\"()\\\"(){return 1}}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testGetter$catena_0() {\n    assertPrint(\"var x = {}\", \"var x={}\");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\"var x = {get a() {return 1}}\", \"var x={get a(){return 1}}\");                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\n      \"var x = {get a() {}, get b(){}}\",\n      \"var x={get a(){},get b(){}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 1() {return 1}}\",\n      \"var x={get 1(){return 1}}\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get \\\"()\\\"() {return 1}}\",\n      \"var x={get \\\"()\\\"(){return 1}}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testGetter$catena_1() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\"var x = {get a() {return 1}}\", \"var x={get a(){return 1}}\");                               /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\n      \"var x = {get a() {}, get b(){}}\",\n      \"var x={get a(){},get b(){}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 1() {return 1}}\",\n      \"var x={get 1(){return 1}}\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get \\\"()\\\"() {return 1}}\",\n      \"var x={get \\\"()\\\"(){return 1}}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testGetter$catena_2() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x = {get a() {return 1}}\", \"var x={get a(){return 1}}\");                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\n      \"var x = {get a() {}, get b(){}}\",\n      \"var x={get a(){},get b(){}}\");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 1() {return 1}}\",\n      \"var x={get 1(){return 1}}\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get \\\"()\\\"() {return 1}}\",\n      \"var x={get \\\"()\\\"(){return 1}}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testGetter$catena_5() {\n    try{ assertPrint(\"var x = {}\", \"var x={}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x = {get a() {return 1}}\", \"var x={get a(){return 1}}\");                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\n      \"var x = {get a() {}, get b(){}}\",\n      \"var x={get a(){},get b(){}}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 'a'() {return 1}}\",\n      \"var x={get \\\"a\\\"(){return 1}}\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertPrint(\n      \"var x = {get 1() {return 1}}\",\n      \"var x={get 1(){return 1}}\");                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertPrint(\n      \"var x = {get \\\"()\\\"() {return 1}}\",\n      \"var x={get \\\"()\\\"(){return 1}}\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
        ]
    },
    "com.google.javascript.jscomp.CodePrinterTest::testObjectLit2": {
        "begin_line_no": 1125,
        "end_line_no": 1131,
        "file_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "to": [
            "  public void testObjectLit2$catena_0() {\n    assertPrint(\"var x={1:1}\", \"var x={1:1}\");                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\"var x={'1':1}\", \"var x={1:1}\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'1.0':1}\", \"var x={\\\"1.0\\\":1}\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={1.5:1}\", \"var x={\\\"1.5\\\":1}\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
            "  public void testObjectLit2$catena_2() {\n    try{ assertPrint(\"var x={1:1}\", \"var x={1:1}\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'1':1}\", \"var x={1:1}\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\"var x={'1.0':1}\", \"var x={\\\"1.0\\\":1}\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\"var x={1.5:1}\", \"var x={\\\"1.5\\\":1}\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }"
        ]
    },
    "com.google.javascript.jscomp.CodePrinterTest::testObjectLit3": {
        "begin_line_no": 1133,
        "end_line_no": 1144,
        "file_path": "test/com/google/javascript/jscomp/CodePrinterTest.java",
        "to": [
            "  public void testObjectLit3$catena_0() {\n    assertPrint(\"var x={3E9:1}\",\n                \"var x={3E9:1}\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPrint(\"var x={'3000000000':1}\", // More than 31 bits\n                \"var x={3E9:1}\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'3000000001':1}\",\n                \"var x={3000000001:1}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'6000000001':1}\",  // More than 32 bits\n                \"var x={6000000001:1}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={\\\"12345678901234567\\\":1}\",  // More than 53 bits\n                \"var x={\\\"12345678901234567\\\":1}\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testObjectLit3$catena_4() {\n    try{ assertPrint(\"var x={3E9:1}\",\n                \"var x={3E9:1}\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'3000000000':1}\", // More than 31 bits\n                \"var x={3E9:1}\");                                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'3000000001':1}\",\n                \"var x={3000000001:1}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPrint(\"var x={'6000000001':1}\",  // More than 32 bits\n                \"var x={6000000001:1}\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPrint(\"var x={\\\"12345678901234567\\\":1}\",  // More than 53 bits\n                \"var x={\\\"12345678901234567\\\":1}\");                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
        ]
    },
    "com.google.javascript.jscomp.FunctionNamesTest::testFunctionsNamesAndIds": {
        "begin_line_no": 40,
        "end_line_no": 93,
        "file_path": "test/com/google/javascript/jscomp/FunctionNamesTest.java",
        "to": [
            "  public void testFunctionsNamesAndIds$catena_0() {\n    final String jsSource =\n        \"goog.widget = function(str) {\\n\" +\n        \"  this.member_fn = function() {};\\n\" +\n        \"  local_fn = function() {};\\n\" +\n        \"  (function(a){})(1);\\n\" +\n        \"}\\n\" +\n        \"function foo() {\\n\" +\n        \"  function bar() {}\\n\" +\n        \"}\\n\" +\n        \"literal = {f1 : function(){}, f2 : function(){}};\\n\" +\n        \"goog.array.map(arr, function named(){});\\n\" +\n        \"goog.array.map(arr, function(){});\\n\" +\n        \"named_twice = function quax(){};\\n\" +\n        \"recliteral = {l1 : {l2 : function(){}}};\\n\" +\n        \"namedliteral = {n1 : function litnamed(){}};\\n\" +\n        \"namedrecliteral = {n1 : {n2 : function reclitnamed(){}}};\\n\" +\n        \"numliteral = {1 : function(){}};\\n\" +\n        \"recnumliteral = {1 : {a : function(){}}};\\n\";\n\n    testSame(jsSource);                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n    final Map<Integer, String> idNameMap = Maps.newLinkedHashMap();\n    int count = 0;\n    for (Node f : functionNames.getFunctionNodeList()) {\n      int id = functionNames.getFunctionId(f);\n      String name = functionNames.getFunctionName(f);\n      idNameMap.put(id, name);\n      count++;\n    }\n\n    try{ assertEquals(\"Unexpected number of functions\", 16, count);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    final Map<Integer, String> expectedMap = Maps.newLinkedHashMap();\n\n    expectedMap.put(0, \"goog.widget.member_fn\");\n    expectedMap.put(1, \"goog.widget::local_fn\");\n    expectedMap.put(2, \"goog.widget::<anonymous>\");\n    expectedMap.put(3, \"goog.widget\");\n    expectedMap.put(4, \"foo::bar\");\n    expectedMap.put(5, \"foo\");\n    expectedMap.put(6, \"literal.f1\");\n    expectedMap.put(7, \"literal.f2\");\n    expectedMap.put(8, \"named\");\n    expectedMap.put(9, \"<anonymous>\");\n    expectedMap.put(10, \"quax\");\n    expectedMap.put(11, \"recliteral.l1.l2\");\n    expectedMap.put(12, \"litnamed\");\n    expectedMap.put(13, \"reclitnamed\");\n    expectedMap.put(14, \"numliteral.__2\");\n    expectedMap.put(15, \"recnumliteral.__3.a\");\n    try{ assertEquals(\"Function id/name mismatch\",\n                 expectedMap, idNameMap);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFunctionsNamesAndIds$catena_1() {\n    final String jsSource =\n        \"goog.widget = function(str) {\\n\" +\n        \"  this.member_fn = function() {};\\n\" +\n        \"  local_fn = function() {};\\n\" +\n        \"  (function(a){})(1);\\n\" +\n        \"}\\n\" +\n        \"function foo() {\\n\" +\n        \"  function bar() {}\\n\" +\n        \"}\\n\" +\n        \"literal = {f1 : function(){}, f2 : function(){}};\\n\" +\n        \"goog.array.map(arr, function named(){});\\n\" +\n        \"goog.array.map(arr, function(){});\\n\" +\n        \"named_twice = function quax(){};\\n\" +\n        \"recliteral = {l1 : {l2 : function(){}}};\\n\" +\n        \"namedliteral = {n1 : function litnamed(){}};\\n\" +\n        \"namedrecliteral = {n1 : {n2 : function reclitnamed(){}}};\\n\" +\n        \"numliteral = {1 : function(){}};\\n\" +\n        \"recnumliteral = {1 : {a : function(){}}};\\n\";\n\n    try{ testSame(jsSource);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    final Map<Integer, String> idNameMap = Maps.newLinkedHashMap();\n    int count = 0;\n    for (Node f : functionNames.getFunctionNodeList()) {\n      int id = functionNames.getFunctionId(f);\n      String name = functionNames.getFunctionName(f);\n      idNameMap.put(id, name);\n      count++;\n    }\n\n    assertEquals(\"Unexpected number of functions\", 16, count);                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n    final Map<Integer, String> expectedMap = Maps.newLinkedHashMap();\n\n    expectedMap.put(0, \"goog.widget.member_fn\");\n    expectedMap.put(1, \"goog.widget::local_fn\");\n    expectedMap.put(2, \"goog.widget::<anonymous>\");\n    expectedMap.put(3, \"goog.widget\");\n    expectedMap.put(4, \"foo::bar\");\n    expectedMap.put(5, \"foo\");\n    expectedMap.put(6, \"literal.f1\");\n    expectedMap.put(7, \"literal.f2\");\n    expectedMap.put(8, \"named\");\n    expectedMap.put(9, \"<anonymous>\");\n    expectedMap.put(10, \"quax\");\n    expectedMap.put(11, \"recliteral.l1.l2\");\n    expectedMap.put(12, \"litnamed\");\n    expectedMap.put(13, \"reclitnamed\");\n    expectedMap.put(14, \"numliteral.__2\");\n    expectedMap.put(15, \"recnumliteral.__3.a\");\n    try{ assertEquals(\"Function id/name mismatch\",\n                 expectedMap, idNameMap);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n  }"
        ]
    },
    "com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys2": {
        "begin_line_no": 70,
        "end_line_no": 77,
        "file_path": "test/com/google/javascript/jscomp/RenamePropertiesTest.java",
        "to": [
            "  public void testPrototypePropertiesAsObjLitKeys2$catena_1() {\n    try{ testSame(\"Bar.prototype = {get 2(){}}; bar[2];\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    testSame(\"Bar.prototype = {get 'a'(){}}; bar['a'];\");                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ test(\"Bar.prototype = {get getA(){}}; bar.getA;\",\n         \"Bar.prototype = {get a(){}}; bar.a;\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testPrototypePropertiesAsObjLitKeys2$catena_2() {\n    try{ testSame(\"Bar.prototype = {get 2(){}}; bar[2];\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ testSame(\"Bar.prototype = {get 'a'(){}}; bar['a'];\");                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    test(\"Bar.prototype = {get getA(){}}; bar.getA;\",\n         \"Bar.prototype = {get a(){}}; bar.a;\");                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
        ]
    },
    "com.google.javascript.jscomp.RenamePropertiesTest::testPrototypePropertiesAsObjLitKeys3": {
        "begin_line_no": 79,
        "end_line_no": 86,
        "file_path": "test/com/google/javascript/jscomp/RenamePropertiesTest.java",
        "to": [
            "  public void testPrototypePropertiesAsObjLitKeys3$catena_1() {\n    try{ testSame(\"Bar.prototype = {set 2(x){}}; bar[2];\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    testSame(\"Bar.prototype = {set 'a'(x){}}; bar['a'];\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ test(\"Bar.prototype = {set getA(x){}}; bar.getA;\",\n         \"Bar.prototype = {set a(x){}}; bar.a;\");                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testPrototypePropertiesAsObjLitKeys3$catena_2() {\n    try{ testSame(\"Bar.prototype = {set 2(x){}}; bar[2];\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ testSame(\"Bar.prototype = {set 'a'(x){}}; bar['a'];\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    test(\"Bar.prototype = {set getA(x){}}; bar.getA;\",\n         \"Bar.prototype = {set a(x){}}; bar.a;\");                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
        ]
    },
    "com.google.javascript.jscomp.SimpleDefinitionFinderTest::testDefineNumber": {
        "begin_line_no": 50,
        "end_line_no": 92,
        "file_path": "test/com/google/javascript/jscomp/SimpleDefinitionFinderTest.java",
        "to": [
            "  public void testDefineNumber$catena_0() throws Exception {\n    checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // getelem expressions are invisible to the definition gatherer.\n    try{ checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Fix this.\n    try{ checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testDefineNumber$catena_1() throws Exception {\n    try{ checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // getelem expressions are invisible to the definition gatherer.\n    try{ checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Fix this.\n    try{ checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testDefineNumber$catena_2() throws Exception {\n    try{ checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // getelem expressions are invisible to the definition gatherer.\n    try{ checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Fix this.\n    try{ checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testDefineNumber$catena_3() throws Exception {\n    try{ checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // getelem expressions are invisible to the definition gatherer.\n    checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Fix this.\n    try{ checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testDefineNumber$catena_4() throws Exception {\n    try{ checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // getelem expressions are invisible to the definition gatherer.\n    try{ checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Fix this.\n    try{ checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testDefineNumber$catena_5() throws Exception {\n    try{ checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // getelem expressions are invisible to the definition gatherer.\n    try{ checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // TODO(johnlenz): Fix this.\n    try{ checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testDefineNumber$catena_6() throws Exception {\n    try{ checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // getelem expressions are invisible to the definition gatherer.\n    try{ checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Fix this.\n    checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testDefineNumber$catena_8() throws Exception {\n    try{ checkDefinitionsInJs(\n        \"var a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a = 1\",\n        ImmutableSet.of(\"DEF NAME a -> NUMBER\"));                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"a.b = 1\",\n        ImmutableSet.of(\"DEF GETPROP a.b -> NUMBER\"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // getelem expressions are invisible to the definition gatherer.\n    try{ checkDefinitionsInJs(\n        \"a[\\\"b\\\"] = 1\",\n        ImmutableSet.<String>of());                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"f().b = 1\",\n        ImmutableSet.of(\"DEF GETPROP null -> NUMBER\"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n        \"({a : 1}); o.a\",\n        ImmutableSet.of(\"DEF STRING null -> NUMBER\",\n                        \"USE GETPROP o.a -> [NUMBER]\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Fix this.\n    try{ checkDefinitionsInJs(\n      \"({'a' : 1}); o['a']\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ checkDefinitionsInJs(\n      \"({1 : 1}); o[1]\",\n      ImmutableSet.<String>of(\"DEF STRING null -> NUMBER\"));                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    checkDefinitionsInJs(\n        \"var a = {b : 1}; a.b\",\n        ImmutableSet.of(\"DEF NAME a -> <null>\",\n                        \"DEF STRING null -> NUMBER\",\n                        \"USE NAME a -> [<null>]\",\n                        \"USE GETPROP a.b -> [NUMBER]\"));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
        ]
    },
    "com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral6": {
        "begin_line_no": 264,
        "end_line_no": 271,
        "file_path": "test/com/google/javascript/jscomp/parsing/IRFactoryTest.java",
        "to": [
            ""
        ]
    },
    "com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral7": {
        "begin_line_no": 273,
        "end_line_no": 285,
        "file_path": "test/com/google/javascript/jscomp/parsing/IRFactoryTest.java",
        "to": [
            ""
        ]
    },
    "com.google.javascript.jscomp.parsing.IRFactoryTest::testObjectLiteral8": {
        "begin_line_no": 287,
        "end_line_no": 300,
        "file_path": "test/com/google/javascript/jscomp/parsing/IRFactoryTest.java",
        "to": [
            ""
        ]
    },
    "com.google.javascript.jscomp.parsing.ParserTest::testObjectLiteralDoc1": {
        "begin_line_no": 733,
        "end_line_no": 742,
        "file_path": "test/com/google/javascript/jscomp/parsing/ParserTest.java",
        "to": [
            "  public void testObjectLiteralDoc1$catena_0() {\n    Node n = parse(\"var x = {/** @type {number} */ 1: 2};\");\n\n    Node objectLit = n.getFirstChild().getFirstChild().getFirstChild();\n    assertEquals(Token.OBJECTLIT, objectLit.getType());                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n    Node number = objectLit.getFirstChild();\n    try{ assertEquals(Token.STRING, number.getType());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertNotNull(number.getJSDocInfo());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testObjectLiteralDoc1$catena_2() {\n    Node n = parse(\"var x = {/** @type {number} */ 1: 2};\");\n\n    Node objectLit = n.getFirstChild().getFirstChild().getFirstChild();\n    try{ assertEquals(Token.OBJECTLIT, objectLit.getType());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    Node number = objectLit.getFirstChild();\n    try{ assertEquals(Token.STRING, number.getType());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertNotNull(number.getJSDocInfo());                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
        ]
    }
}