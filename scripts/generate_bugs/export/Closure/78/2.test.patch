{
    "com.google.javascript.jscomp.PeepholeFoldConstantsTest::testFoldArithmetic": {
        "begin_line_no": 552,
        "end_line_no": 563,
        "file_path": "test/com/google/javascript/jscomp/PeepholeFoldConstantsTest.java",
        "to": [
            "  public void testFoldArithmetic$catena_9() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n  }",
            "  public void testFoldArithmetic$catena_0() {\n    fold(\"x = 10 + 20\", \"x = 30\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldArithmetic$catena_1() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = 2 / 4\", \"x = 0.5\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldArithmetic$catena_2() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldArithmetic$catena_3() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"z = x * y\", \"z = x * y\");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldArithmetic$catena_4() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = y * 5\", \"x = y * 5\");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldArithmetic$catena_6() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = 3 % 2\", \"x = 1\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldArithmetic$catena_7() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = 3 % -2\", \"x = 1\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = -1 % 3\", \"x = -1\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testFoldArithmetic$catena_8() {\n    try{ fold(\"x = 10 + 20\", \"x = 30\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2 / 4\", \"x = 0.5\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 2.25 * 3\", \"x = 6.75\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"z = x * y\", \"z = x * y\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = y * 5\", \"x = y * 5\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 1 / 0\", \"x = 1 / 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % 2\", \"x = 1\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = 3 % -2\", \"x = 1\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = -1 % 3\", \"x = -1\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = 1 % 0\", \"x = 1 % 0\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }"
        ]
    }
}