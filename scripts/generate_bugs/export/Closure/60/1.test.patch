{
    "com.google.javascript.jscomp.NodeUtilTest::testGetBooleanValue": {
        "begin_line_no": 91,
        "end_line_no": 111,
        "file_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "to": [
            "  public void testGetBooleanValue$catena_12() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanUnknown(\"void foo()\");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testGetBooleanValue$catena_0() {\n    assertPureBooleanTrue(\"true\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testGetBooleanValue$catena_1() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanTrue(\"10\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testGetBooleanValue$catena_2() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanTrue(\"'0'\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testGetBooleanValue$catena_3() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanTrue(\"/a/\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testGetBooleanValue$catena_4() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanTrue(\"{}\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testGetBooleanValue$catena_5() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanTrue(\"[]\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testGetBooleanValue$catena_6() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanFalse(\"false\");                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testGetBooleanValue$catena_7() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanFalse(\"null\");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testGetBooleanValue$catena_8() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanFalse(\"0\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testGetBooleanValue$catena_9() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanFalse(\"''\");                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testGetBooleanValue$catena_10() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanFalse(\"undefined\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testGetBooleanValue$catena_11() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanFalse(\"void 0\");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testGetBooleanValue$catena_13() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanUnknown(\"b\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testGetBooleanValue$catena_14() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanUnknown(\"-'0.0'\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testGetBooleanValue$catena_15() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    assertPureBooleanUnknown(\"{a:foo()}\");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertPureBooleanUnknown(\"[foo()]\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testGetBooleanValue$catena_16() {\n    try{ assertPureBooleanTrue(\"true\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"10\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"'0'\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"/a/\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"{}\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanTrue(\"[]\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"false\");                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"null\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"0\");                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"''\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"undefined\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanFalse(\"void 0\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"void foo()\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"b\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertPureBooleanUnknown(\"-'0.0'\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Known but getBooleanValue return false for expressions with side-effects\n    try{ assertPureBooleanUnknown(\"{a:foo()}\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertPureBooleanUnknown(\"[foo()]\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
        ]
    }
}