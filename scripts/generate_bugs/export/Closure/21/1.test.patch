{
    "com.google.javascript.jscomp.CheckSideEffectsTest::testUselessCode": {
        "begin_line_no": 49,
        "end_line_no": 80,
        "file_path": "test/com/google/javascript/jscomp/CheckSideEffectsTest.java",
        "to": [
            "  public void testUselessCode$catena_14() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testUselessCode$catena_13() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testUselessCode$catena_0() {\n    test(\"function f(x) { if(x) return; }\", ok);                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testUselessCode$catena_1() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testUselessCode$catena_2() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    test(\"if(x) x = y;\", ok);                                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testUselessCode$catena_3() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testUselessCode$catena_4() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    test(\"x = 3;\", ok);                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testUselessCode$catena_5() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testUselessCode$catena_6() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    test(\"var x = 'test'\", ok);                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testUselessCode$catena_7() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testUselessCode$catena_8() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    test(\"\", ok);                                                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testUselessCode$catena_9() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"foo();;;;bar();;;;\", ok);                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testUselessCode$catena_10() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    test(\"var a, b; a = 5, b = 6\", ok);                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testUselessCode$catena_11() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testUselessCode$catena_12() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testUselessCode$catena_15() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var a, b; a = (b = 7, 6)\", ok);                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testUselessCode$catena_16() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testUselessCode$catena_17() {\n    try{ test(\"function f(x) { if(x) return; }\", ok);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(x) { if(x); }\", \"function f(x) { if(x); }\", e);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"if(x) x = y;\", ok);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if(x) x == bar();\", \"if(x) JSCOMPILER_PRESERVE(x == bar());\", e);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"x = 3;\", ok);                                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"x == 3;\", \"JSCOMPILER_PRESERVE(x == 3);\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var x = 'test'\", ok);                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var x = 'test'\\n'str'\",\n         \"var x = 'test'\\nJSCOMPILER_PRESERVE('str')\", e);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"\", ok);                                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"foo();;;;bar();;;;\", ok);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"var a, b; a = 5, b = 6\", ok);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = 5, b == 6\",\n         \"var a, b; a = 5, JSCOMPILER_PRESERVE(b == 6)\", e);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (5, 6)\",\n         \"var a, b; a = (JSCOMPILER_PRESERVE(5), 6)\", e);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), 6, 7)\",\n         \"var a, b; a = (bar(), JSCOMPILER_PRESERVE(6), 7)\", e);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (bar(), bar(), 7, 8)\",\n         \"var a, b; a = (bar(), bar(), JSCOMPILER_PRESERVE(7), 8)\", e);                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"var a, b; a = (b = 7, 6)\", ok);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(x(), 2));\", ok);                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"function x(){}\\nfunction f(a, b){}\\nf(1,(2, 3));\",\n         \"function x(){}\\nfunction f(a, b){}\\n\" +\n         \"f(1,(JSCOMPILER_PRESERVE(2), 3));\", e);                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
        ]
    }
}