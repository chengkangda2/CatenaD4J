{
    "org.mockitousage.annotation.SpyAnnotationTest::should_report_when_constructor_is_explosive": {
        "begin_line_no": 92,
        "end_line_no": 105,
        "file_path": "test/org/mockitousage/annotation/SpyAnnotationTest.java",
        "to": [
            "    @Test\n    public void should_report_when_constructor_is_explosive$catena_0() throws Exception {\n\t\tclass FailingSpy {\n\t        @Spy\n            ThrowingConstructor throwingConstructor;\n\t\t}\n\n        try {\n            MockitoAnnotations.initMocks(new FailingSpy());\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (MockitoException e) {\n            try{ Assertions.assertThat(e.getMessage()).contains(\"Unable to create mock instance\");          }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    @Test\n    public void should_report_when_constructor_is_explosive$catena_1() throws Exception {\n\t\tclass FailingSpy {\n\t        @Spy\n            ThrowingConstructor throwingConstructor;\n\t\t}\n\n        try {\n            MockitoAnnotations.initMocks(new FailingSpy());\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (MockitoException e) {\n            Assertions.assertThat(e.getMessage()).contains(\"Unable to create mock instance\");               /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }"
        ]
    },
    "org.mockitousage.constructor.CreatingMocksWithConstructorTest::exception_message_when_constructor_not_found": {
        "begin_line_no": 59,
        "end_line_no": 70,
        "file_path": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
        "to": [
            "    @Test\n    public void exception_message_when_constructor_not_found$catena_0() {\n        try {\n            //when\n            spy(HasConstructor.class);\n            //then\n            fail();                                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (MockitoException e) {\n            try{ assertEquals(\"Unable to create mock instance of type 'HasConstructor'\", e.getMessage());    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertContains(\"0-arg constructor\", e.getCause().getMessage());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    @Test\n    public void exception_message_when_constructor_not_found$catena_1() {\n        try {\n            //when\n            spy(HasConstructor.class);\n            //then\n            try{ fail();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (MockitoException e) {\n            assertEquals(\"Unable to create mock instance of type 'HasConstructor'\", e.getMessage());         /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertContains(\"0-arg constructor\", e.getCause().getMessage());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    @Test\n    public void exception_message_when_constructor_not_found$catena_2() {\n        try {\n            //when\n            spy(HasConstructor.class);\n            //then\n            try{ fail();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (MockitoException e) {\n            try{ assertEquals(\"Unable to create mock instance of type 'HasConstructor'\", e.getMessage());    }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertContains(\"0-arg constructor\", e.getCause().getMessage());                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }"
        ]
    },
    "org.mockitousage.annotation.SpyAnnotationTest::should_spy_inner_class": {
        "begin_line_no": 123,
        "end_line_no": 151,
        "file_path": "test/org/mockitousage/annotation/SpyAnnotationTest.java",
        "to": [
            "    @Test\n    public void should_spy_inner_class$catena_1() throws Exception {\n    \t \n     class WithMockAndSpy {\n    \t\t@Spy private InnerStrength strength;\n    \t\t@Mock private List<String> list;\n\n            abstract class InnerStrength {\n            \tprivate final String name;\n\n            \tInnerStrength() {\n            \t\t// Make sure that @Mock fields are always injected before @Spy fields.\n            \t\ttry{ assertNotNull(list);                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            \t\t// Make sure constructor is indeed called.\n            \t\tthis.name = \"inner\";\n            \t}\n            \t\n            \tabstract String strength();\n            \t\n            \tString fullStrength() {\n            \t\treturn name + \" \" + strength();\n            \t}\n            }\n    \t}\n\t\tWithMockAndSpy outer = new WithMockAndSpy();\n        MockitoAnnotations.initMocks(outer);\n        when(outer.strength.strength()).thenReturn(\"strength\");\n        assertEquals(\"inner strength\", outer.strength.fullStrength());                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @Test\n    public void should_spy_inner_class$catena_0() throws Exception {\n    \t \n     class WithMockAndSpy {\n    \t\t@Spy private InnerStrength strength;\n    \t\t@Mock private List<String> list;\n\n            abstract class InnerStrength {\n            \tprivate final String name;\n\n            \tInnerStrength() {\n            \t\t// Make sure that @Mock fields are always injected before @Spy fields.\n            \t\tassertNotNull(list);                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n            \t\t// Make sure constructor is indeed called.\n            \t\tthis.name = \"inner\";\n            \t}\n            \t\n            \tabstract String strength();\n            \t\n            \tString fullStrength() {\n            \t\treturn name + \" \" + strength();\n            \t}\n            }\n    \t}\n\t\tWithMockAndSpy outer = new WithMockAndSpy();\n        MockitoAnnotations.initMocks(outer);\n        when(outer.strength.strength()).thenReturn(\"strength\");\n        try{ assertEquals(\"inner strength\", outer.strength.fullStrength());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.mockitousage.constructor.CreatingMocksWithConstructorTest::mocking_inner_classes_with_wrong_outer_instance": {
        "begin_line_no": 72,
        "end_line_no": 83,
        "file_path": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
        "to": [
            "    @Test\n    public void mocking_inner_classes_with_wrong_outer_instance$catena_0() {\n        try {\n            //when\n            mock(InnerClass.class, withSettings().useConstructor().outerInstance(\"foo\").defaultAnswer(CALLS_REAL_METHODS));\n            //then\n            fail();                                                                                                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (MockitoException e) {\n            try{ assertEquals(\"Unable to create mock instance of type 'InnerClass'\", e.getMessage());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertContains(\"Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.\", e.getCause().getMessage());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    @Test\n    public void mocking_inner_classes_with_wrong_outer_instance$catena_1() {\n        try {\n            //when\n            mock(InnerClass.class, withSettings().useConstructor().outerInstance(\"foo\").defaultAnswer(CALLS_REAL_METHODS));\n            //then\n            try{ fail();                                                                                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (MockitoException e) {\n            assertEquals(\"Unable to create mock instance of type 'InnerClass'\", e.getMessage());                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertContains(\"Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.\", e.getCause().getMessage());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    @Test\n    public void mocking_inner_classes_with_wrong_outer_instance$catena_2() {\n        try {\n            //when\n            mock(InnerClass.class, withSettings().useConstructor().outerInstance(\"foo\").defaultAnswer(CALLS_REAL_METHODS));\n            //then\n            try{ fail();                                                                                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (MockitoException e) {\n            try{ assertEquals(\"Unable to create mock instance of type 'InnerClass'\", e.getMessage());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertContains(\"Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.\", e.getCause().getMessage());         /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }"
        ]
    }
}