{
    "org.joda.time.TestDateTimeZone::testForOffsetHoursMinutes_int_int": {
        "begin_line_no": 303,
        "end_line_no": 339,
        "file_path": "src/test/java/org/joda/time/TestDateTimeZone.java",
        "to": [
            "    public void testForOffsetHoursMinutes_int_int$catena_9() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
            "    public void testForOffsetHoursMinutes_int_int$catena_0() {\n        assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
            "    public void testForOffsetHoursMinutes_int_int$catena_1() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));             /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
            "    public void testForOffsetHoursMinutes_int_int$catena_2() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
            "    public void testForOffsetHoursMinutes_int_int$catena_3() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));               /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
            "    public void testForOffsetHoursMinutes_int_int$catena_4() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
            "    public void testForOffsetHoursMinutes_int_int$catena_5() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
            "    public void testForOffsetHoursMinutes_int_int$catena_6() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
            "    public void testForOffsetHoursMinutes_int_int$catena_8() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
            "    public void testForOffsetHoursMinutes_int_int$catena_10() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));             /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
            "    public void testForOffsetHoursMinutes_int_int$catena_11() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));            /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
            "    public void testForOffsetHoursMinutes_int_int$catena_12() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
            "    public void testForOffsetHoursMinutes_int_int$catena_13() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
            "    public void testForOffsetHoursMinutes_int_int$catena_14() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n    }        ",
            "    public void testForOffsetHoursMinutes_int_int$catena_15() {\n        try{ assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+23:59\"), DateTimeZone.forOffsetHoursMinutes(23, 59));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+02:15\"), DateTimeZone.forOffsetHoursMinutes(2, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+02:00\"), DateTimeZone.forOffsetHoursMinutes(2, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, -15);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        \n        try{ assertEquals(DateTimeZone.forID(\"+00:15\"), DateTimeZone.forOffsetHoursMinutes(0, 15));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"+00:00\"), DateTimeZone.forOffsetHoursMinutes(0, 0));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-00:15\"), DateTimeZone.forOffsetHoursMinutes(0, -15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-02:00\"), DateTimeZone.forOffsetHoursMinutes(-2, 0));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, -15));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(DateTimeZone.forID(\"-02:15\"), DateTimeZone.forOffsetHoursMinutes(-2, 15));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(DateTimeZone.forID(\"-23:59\"), DateTimeZone.forOffsetHoursMinutes(-23, 59));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-2, 60);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(24, 0);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {}\n        try {\n            DateTimeZone.forOffsetHoursMinutes(-24, 0);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {}\n    }        "
        ]
    }
}