{
    "org.jfree.chart.plot.junit.CategoryPlotTests::testGetDomainAxisIndex": {
        "begin_line_no": 719,
        "end_line_no": 738,
        "file_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "to": [
            "    public void testGetDomainAxisIndex$catena_4() {\n        CategoryAxis domainAxis1 = new CategoryAxis(\"X1\");\n        CategoryAxis domainAxis2 = new CategoryAxis(\"X2\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Y1\");\n        CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, \n                null);\n        try{ assertEquals(0, plot.getDomainAxisIndex(domainAxis1));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, plot.getDomainAxisIndex(domainAxis2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        plot.setDomainAxis(1, domainAxis2);\n        try{ assertEquals(1, plot.getDomainAxisIndex(domainAxis2));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, plot.getDomainAxisIndex(new CategoryAxis(\"X2\")));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        boolean pass = false;\n        try {\n            plot.getDomainAxisIndex(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testGetDomainAxisIndex$catena_0() {\n        CategoryAxis domainAxis1 = new CategoryAxis(\"X1\");\n        CategoryAxis domainAxis2 = new CategoryAxis(\"X2\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Y1\");\n        CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, \n                null);\n        assertEquals(0, plot.getDomainAxisIndex(domainAxis1));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, plot.getDomainAxisIndex(domainAxis2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        plot.setDomainAxis(1, domainAxis2);\n        try{ assertEquals(1, plot.getDomainAxisIndex(domainAxis2));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, plot.getDomainAxisIndex(new CategoryAxis(\"X2\")));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        boolean pass = false;\n        try {\n            plot.getDomainAxisIndex(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testGetDomainAxisIndex$catena_1() {\n        CategoryAxis domainAxis1 = new CategoryAxis(\"X1\");\n        CategoryAxis domainAxis2 = new CategoryAxis(\"X2\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Y1\");\n        CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, \n                null);\n        try{ assertEquals(0, plot.getDomainAxisIndex(domainAxis1));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, plot.getDomainAxisIndex(domainAxis2));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        plot.setDomainAxis(1, domainAxis2);\n        try{ assertEquals(1, plot.getDomainAxisIndex(domainAxis2));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, plot.getDomainAxisIndex(new CategoryAxis(\"X2\")));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        boolean pass = false;\n        try {\n            plot.getDomainAxisIndex(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testGetDomainAxisIndex$catena_2() {\n        CategoryAxis domainAxis1 = new CategoryAxis(\"X1\");\n        CategoryAxis domainAxis2 = new CategoryAxis(\"X2\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Y1\");\n        CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, \n                null);\n        try{ assertEquals(0, plot.getDomainAxisIndex(domainAxis1));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, plot.getDomainAxisIndex(domainAxis2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        plot.setDomainAxis(1, domainAxis2);\n        assertEquals(1, plot.getDomainAxisIndex(domainAxis2));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, plot.getDomainAxisIndex(new CategoryAxis(\"X2\")));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        boolean pass = false;\n        try {\n            plot.getDomainAxisIndex(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testGetDomainAxisIndex$catena_3() {\n        CategoryAxis domainAxis1 = new CategoryAxis(\"X1\");\n        CategoryAxis domainAxis2 = new CategoryAxis(\"X2\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Y1\");\n        CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, \n                null);\n        try{ assertEquals(0, plot.getDomainAxisIndex(domainAxis1));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, plot.getDomainAxisIndex(domainAxis2));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        plot.setDomainAxis(1, domainAxis2);\n        try{ assertEquals(1, plot.getDomainAxisIndex(domainAxis2));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, plot.getDomainAxisIndex(new CategoryAxis(\"X2\")));                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        boolean pass = false;\n        try {\n            plot.getDomainAxisIndex(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.jfree.chart.plot.junit.CategoryPlotTests::testGetRangeAxisIndex": {
        "begin_line_no": 743,
        "end_line_no": 762,
        "file_path": "tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "to": [
            "    public void testGetRangeAxisIndex$catena_0() {\n        CategoryAxis domainAxis1 = new CategoryAxis(\"X1\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Y1\");\n        NumberAxis rangeAxis2 = new NumberAxis(\"Y2\");\n        CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, \n                null);\n        assertEquals(0, plot.getRangeAxisIndex(rangeAxis1));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, plot.getRangeAxisIndex(rangeAxis2));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        plot.setRangeAxis(1, rangeAxis2);\n        try{ assertEquals(1, plot.getRangeAxisIndex(rangeAxis2));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, plot.getRangeAxisIndex(new NumberAxis(\"Y2\")));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        boolean pass = false;\n        try {\n            plot.getRangeAxisIndex(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testGetRangeAxisIndex$catena_1() {\n        CategoryAxis domainAxis1 = new CategoryAxis(\"X1\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Y1\");\n        NumberAxis rangeAxis2 = new NumberAxis(\"Y2\");\n        CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, \n                null);\n        try{ assertEquals(0, plot.getRangeAxisIndex(rangeAxis1));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, plot.getRangeAxisIndex(rangeAxis2));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        plot.setRangeAxis(1, rangeAxis2);\n        try{ assertEquals(1, plot.getRangeAxisIndex(rangeAxis2));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, plot.getRangeAxisIndex(new NumberAxis(\"Y2\")));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        boolean pass = false;\n        try {\n            plot.getRangeAxisIndex(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testGetRangeAxisIndex$catena_2() {\n        CategoryAxis domainAxis1 = new CategoryAxis(\"X1\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Y1\");\n        NumberAxis rangeAxis2 = new NumberAxis(\"Y2\");\n        CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, \n                null);\n        try{ assertEquals(0, plot.getRangeAxisIndex(rangeAxis1));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, plot.getRangeAxisIndex(rangeAxis2));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        plot.setRangeAxis(1, rangeAxis2);\n        assertEquals(1, plot.getRangeAxisIndex(rangeAxis2));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, plot.getRangeAxisIndex(new NumberAxis(\"Y2\")));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        boolean pass = false;\n        try {\n            plot.getRangeAxisIndex(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testGetRangeAxisIndex$catena_3() {\n        CategoryAxis domainAxis1 = new CategoryAxis(\"X1\");\n        NumberAxis rangeAxis1 = new NumberAxis(\"Y1\");\n        NumberAxis rangeAxis2 = new NumberAxis(\"Y2\");\n        CategoryPlot plot = new CategoryPlot(null, domainAxis1, rangeAxis1, \n                null);\n        try{ assertEquals(0, plot.getRangeAxisIndex(rangeAxis1));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, plot.getRangeAxisIndex(rangeAxis2));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        plot.setRangeAxis(1, rangeAxis2);\n        try{ assertEquals(1, plot.getRangeAxisIndex(rangeAxis2));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, plot.getRangeAxisIndex(new NumberAxis(\"Y2\")));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        boolean pass = false;\n        try {\n            plot.getRangeAxisIndex(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}