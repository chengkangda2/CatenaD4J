{
    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testEquals": {
        "begin_line_no": 486,
        "end_line_no": 500,
        "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "to": [
            "    public void testEquals$catena_4() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEquals$catena_5() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEquals$catena_2() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEquals$catena_0() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        assertTrue(StringUtils.equals(null, null));                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEquals$catena_1() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(StringUtils.equals(fooCs, fooCs));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEquals$catena_3() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEquals$catena_6() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEquals$catena_7() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(StringUtils.equals(fooCs, barCs));                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEquals$catena_8() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(StringUtils.equals(fooCs, null));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEquals$catena_9() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(StringUtils.equals(null, fooCs));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEquals$catena_10() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(StringUtils.equals(fooCs, foobarCs));                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertFalse(StringUtils.equals(foobarCs, fooCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testEquals$catena_11() {\n        final CharSequence fooCs = FOO, barCs = BAR, foobarCs = FOOBAR;\n        try{ assertTrue(StringUtils.equals(null, null));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new StringBuilder(FOO)));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'o', 'o' })));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals(fooCs, (CharSequence) new CustomCharSequence(FOO)));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(StringUtils.equals((CharSequence) new CustomCharSequence(FOO), fooCs));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, (CharSequence) new String(new char[] { 'f', 'O', 'O' })));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, barCs));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, null));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(null, fooCs));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertFalse(StringUtils.equals(fooCs, foobarCs));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertFalse(StringUtils.equals(foobarCs, fooCs));                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}