{
    "org.apache.commons.lang3.math.FractionTest::testReduce": {
        "begin_line_no": 610,
        "end_line_no": 656,
        "file_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "to": [
            "    public void testReduce$catena_18() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReduce$catena_19() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReduce$catena_0() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        assertEquals(2, result.getNumerator());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReduce$catena_1() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReduce$catena_2() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        assertEquals(2, result.getNumerator());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReduce$catena_3() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReduce$catena_4() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        assertEquals(-2, result.getNumerator());                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReduce$catena_5() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReduce$catena_6() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        assertEquals(-2, result.getNumerator());                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReduce$catena_7() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReduce$catena_8() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertSame(f, result);                                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReduce$catena_9() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        assertEquals(2, result.getNumerator());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReduce$catena_10() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReduce$catena_11() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertSame(f, result);                                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReduce$catena_12() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        assertEquals(0, result.getNumerator());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReduce$catena_13() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReduce$catena_14() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertSame(f, result);                                                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReduce$catena_15() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        assertEquals(0, result.getNumerator());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReduce$catena_16() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, result.getDenominator());                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertSame(result, Fraction.ZERO);                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReduce$catena_17() {\n        Fraction f = null;\n        \n        f = Fraction.getFraction(50, 75);\n        Fraction result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, -3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, -3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(-2, 3);\n        result = f.reduce();\n        try{ assertEquals(-2, result.getNumerator());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(2, 3);\n        result = f.reduce();\n        try{ assertEquals(2, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 1);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertSame(f, result);                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        f = Fraction.getFraction(0, 100);\n        result = f.reduce();\n        try{ assertEquals(0, result.getNumerator());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertSame(result, Fraction.ZERO);                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n        f = Fraction.getFraction(Integer.MIN_VALUE, 2);\n        result = f.reduce();\n        try{ assertEquals(Integer.MIN_VALUE / 2, result.getNumerator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, result.getDenominator());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.math.FractionTest::testReducedFactory_int_int": {
        "begin_line_no": 250,
        "end_line_no": 338,
        "file_path": "src/test/java/org/apache/commons/lang3/math/FractionTest.java",
        "to": [
            "    public void testReducedFactory_int_int$catena_31() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReducedFactory_int_int$catena_30() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_0() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        assertEquals(0, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_1() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_2() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        assertEquals(1, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_3() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_4() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        assertEquals(2, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_5() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_6() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        assertEquals(22, f.getNumerator());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_7() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(7, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_8() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        assertEquals(-3, f.getNumerator());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_9() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(5, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_10() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        assertEquals(-3, f.getNumerator());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_11() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(5, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_12() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        assertEquals(3, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_13() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(5, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_14() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            fail(\"expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_15() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            fail(\"expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_16() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            fail(\"expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_17() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        assertEquals(0, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_18() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_19() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        assertEquals(1, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_20() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_21() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        assertEquals(1, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_22() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(2, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_23() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        assertEquals(3, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_24() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(2, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_25() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        assertEquals(11, f.getNumerator());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_26() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(2, f.getDenominator());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_27() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        assertEquals(1, f.getNumerator());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_28() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReducedFactory_int_int$catena_29() {\n        Fraction f = null;\n        \n        // zero\n        f = Fraction.getReducedFraction(0, 1);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // normal\n        f = Fraction.getReducedFraction(1, 1);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 1);\n        try{ assertEquals(2, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // improper\n        f = Fraction.getReducedFraction(22, 7);\n        try{ assertEquals(22, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(7, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // negatives\n        f = Fraction.getReducedFraction(-6, 10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(6, -10);\n        try{ assertEquals(-3, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(-6, -10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(5, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // zero denominator\n        try {\n            f = Fraction.getReducedFraction(1, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(2, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n        \n        try {\n            f = Fraction.getReducedFraction(-3, 0);\n            try{ fail(\"expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {}\n\n        // reduced        \n        f = Fraction.getReducedFraction(0, 2);\n        try{ assertEquals(0, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 2);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(2, 4);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(15, 10);\n        try{ assertEquals(3, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        f = Fraction.getReducedFraction(121, 22);\n        try{ assertEquals(11, f.getNumerator());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Extreme values \n        // OK, can reduce before negating\n        f = Fraction.getReducedFraction(-2, Integer.MIN_VALUE);\n        try{ assertEquals(1, f.getNumerator());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-(Integer.MIN_VALUE / 2), f.getDenominator());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // Can't reduce, negation will throw\n        try { \n            f = Fraction.getReducedFraction(-7, Integer.MIN_VALUE);  \n            fail(\"Expecting ArithmeticException\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ArithmeticException ex) {}      \n\n        // LANG-662\n        f = Fraction.getReducedFraction(Integer.MIN_VALUE, 2);\n        try{ assertEquals(Integer.MIN_VALUE / 2, f.getNumerator());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, f.getDenominator());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}