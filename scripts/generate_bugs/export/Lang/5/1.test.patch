{
    "org.apache.commons.lang3.LocaleUtilsTest::testLang865": {
        "begin_line_no": 503,
        "end_line_no": 543,
        "file_path": "src/test/java/org/apache/commons/lang3/LocaleUtilsTest.java",
        "to": [
            "    @Test\n    public void testLang865$catena_0() {\n        assertValidToLocale(\"_GB\", \"\", \"GB\", \"\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertValidToLocale(\"_GB_P\", \"\", \"GB\", \"P\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertValidToLocale(\"_GB_POSIX\", \"\", \"GB\", \"POSIX\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            LocaleUtils.toLocale(\"_G\");\n            try{ fail(\"Must be at least 3 chars if starts with underscore\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_Gb\");\n            try{ fail(\"Must be uppercase if starts with underscore\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_gB\");\n            try{ fail(\"Must be uppercase if starts with underscore\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_1B\");\n            try{ fail(\"Must be letter if starts with underscore\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_G1\");\n            try{ fail(\"Must be letter if starts with underscore\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_GB_\");\n            try{ fail(\"Must be at least 5 chars if starts with underscore\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_GBAP\");\n            try{ fail(\"Must have underscore after the country if starts with underscore and is at least 5 chars\");    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n    }",
            "    @Test\n    public void testLang865$catena_1() {\n        try{ assertValidToLocale(\"_GB\", \"\", \"GB\", \"\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertValidToLocale(\"_GB_P\", \"\", \"GB\", \"P\");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertValidToLocale(\"_GB_POSIX\", \"\", \"GB\", \"POSIX\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            LocaleUtils.toLocale(\"_G\");\n            try{ fail(\"Must be at least 3 chars if starts with underscore\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_Gb\");\n            try{ fail(\"Must be uppercase if starts with underscore\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_gB\");\n            try{ fail(\"Must be uppercase if starts with underscore\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_1B\");\n            try{ fail(\"Must be letter if starts with underscore\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_G1\");\n            try{ fail(\"Must be letter if starts with underscore\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_GB_\");\n            try{ fail(\"Must be at least 5 chars if starts with underscore\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_GBAP\");\n            try{ fail(\"Must have underscore after the country if starts with underscore and is at least 5 chars\");    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n    }",
            "    @Test\n    public void testLang865$catena_2() {\n        try{ assertValidToLocale(\"_GB\", \"\", \"GB\", \"\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertValidToLocale(\"_GB_P\", \"\", \"GB\", \"P\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertValidToLocale(\"_GB_POSIX\", \"\", \"GB\", \"POSIX\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try {\n            LocaleUtils.toLocale(\"_G\");\n            try{ fail(\"Must be at least 3 chars if starts with underscore\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_Gb\");\n            try{ fail(\"Must be uppercase if starts with underscore\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_gB\");\n            try{ fail(\"Must be uppercase if starts with underscore\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_1B\");\n            try{ fail(\"Must be letter if starts with underscore\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_G1\");\n            try{ fail(\"Must be letter if starts with underscore\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_GB_\");\n            try{ fail(\"Must be at least 5 chars if starts with underscore\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_GBAP\");\n            try{ fail(\"Must have underscore after the country if starts with underscore and is at least 5 chars\");    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n    }",
            "    @Test\n    public void testLang865$catena_3() {\n        try{ assertValidToLocale(\"_GB\", \"\", \"GB\", \"\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertValidToLocale(\"_GB_P\", \"\", \"GB\", \"P\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertValidToLocale(\"_GB_POSIX\", \"\", \"GB\", \"POSIX\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            LocaleUtils.toLocale(\"_G\");\n            fail(\"Must be at least 3 chars if starts with underscore\");                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_Gb\");\n            try{ fail(\"Must be uppercase if starts with underscore\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_gB\");\n            try{ fail(\"Must be uppercase if starts with underscore\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_1B\");\n            try{ fail(\"Must be letter if starts with underscore\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_G1\");\n            try{ fail(\"Must be letter if starts with underscore\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_GB_\");\n            try{ fail(\"Must be at least 5 chars if starts with underscore\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_GBAP\");\n            try{ fail(\"Must have underscore after the country if starts with underscore and is at least 5 chars\");    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n    }",
            "    @Test\n    public void testLang865$catena_4() {\n        try{ assertValidToLocale(\"_GB\", \"\", \"GB\", \"\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertValidToLocale(\"_GB_P\", \"\", \"GB\", \"P\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertValidToLocale(\"_GB_POSIX\", \"\", \"GB\", \"POSIX\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            LocaleUtils.toLocale(\"_G\");\n            try{ fail(\"Must be at least 3 chars if starts with underscore\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_Gb\");\n            fail(\"Must be uppercase if starts with underscore\");                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_gB\");\n            try{ fail(\"Must be uppercase if starts with underscore\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_1B\");\n            try{ fail(\"Must be letter if starts with underscore\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_G1\");\n            try{ fail(\"Must be letter if starts with underscore\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_GB_\");\n            try{ fail(\"Must be at least 5 chars if starts with underscore\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_GBAP\");\n            try{ fail(\"Must have underscore after the country if starts with underscore and is at least 5 chars\");    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n    }",
            "    @Test\n    public void testLang865$catena_5() {\n        try{ assertValidToLocale(\"_GB\", \"\", \"GB\", \"\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertValidToLocale(\"_GB_P\", \"\", \"GB\", \"P\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertValidToLocale(\"_GB_POSIX\", \"\", \"GB\", \"POSIX\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            LocaleUtils.toLocale(\"_G\");\n            try{ fail(\"Must be at least 3 chars if starts with underscore\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_Gb\");\n            try{ fail(\"Must be uppercase if starts with underscore\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_gB\");\n            fail(\"Must be uppercase if starts with underscore\");                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_1B\");\n            try{ fail(\"Must be letter if starts with underscore\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_G1\");\n            try{ fail(\"Must be letter if starts with underscore\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_GB_\");\n            try{ fail(\"Must be at least 5 chars if starts with underscore\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_GBAP\");\n            try{ fail(\"Must have underscore after the country if starts with underscore and is at least 5 chars\");    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n    }",
            "    @Test\n    public void testLang865$catena_6() {\n        try{ assertValidToLocale(\"_GB\", \"\", \"GB\", \"\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertValidToLocale(\"_GB_P\", \"\", \"GB\", \"P\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertValidToLocale(\"_GB_POSIX\", \"\", \"GB\", \"POSIX\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            LocaleUtils.toLocale(\"_G\");\n            try{ fail(\"Must be at least 3 chars if starts with underscore\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_Gb\");\n            try{ fail(\"Must be uppercase if starts with underscore\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_gB\");\n            try{ fail(\"Must be uppercase if starts with underscore\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_1B\");\n            fail(\"Must be letter if starts with underscore\");                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_G1\");\n            try{ fail(\"Must be letter if starts with underscore\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_GB_\");\n            try{ fail(\"Must be at least 5 chars if starts with underscore\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_GBAP\");\n            try{ fail(\"Must have underscore after the country if starts with underscore and is at least 5 chars\");    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n    }",
            "    @Test\n    public void testLang865$catena_7() {\n        try{ assertValidToLocale(\"_GB\", \"\", \"GB\", \"\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertValidToLocale(\"_GB_P\", \"\", \"GB\", \"P\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertValidToLocale(\"_GB_POSIX\", \"\", \"GB\", \"POSIX\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            LocaleUtils.toLocale(\"_G\");\n            try{ fail(\"Must be at least 3 chars if starts with underscore\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_Gb\");\n            try{ fail(\"Must be uppercase if starts with underscore\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_gB\");\n            try{ fail(\"Must be uppercase if starts with underscore\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_1B\");\n            try{ fail(\"Must be letter if starts with underscore\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_G1\");\n            fail(\"Must be letter if starts with underscore\");                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_GB_\");\n            try{ fail(\"Must be at least 5 chars if starts with underscore\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_GBAP\");\n            try{ fail(\"Must have underscore after the country if starts with underscore and is at least 5 chars\");    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n    }",
            "    @Test\n    public void testLang865$catena_8() {\n        try{ assertValidToLocale(\"_GB\", \"\", \"GB\", \"\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertValidToLocale(\"_GB_P\", \"\", \"GB\", \"P\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertValidToLocale(\"_GB_POSIX\", \"\", \"GB\", \"POSIX\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            LocaleUtils.toLocale(\"_G\");\n            try{ fail(\"Must be at least 3 chars if starts with underscore\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_Gb\");\n            try{ fail(\"Must be uppercase if starts with underscore\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_gB\");\n            try{ fail(\"Must be uppercase if starts with underscore\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_1B\");\n            try{ fail(\"Must be letter if starts with underscore\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_G1\");\n            try{ fail(\"Must be letter if starts with underscore\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_GB_\");\n            fail(\"Must be at least 5 chars if starts with underscore\");                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_GBAP\");\n            try{ fail(\"Must have underscore after the country if starts with underscore and is at least 5 chars\");    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n    }",
            "    @Test\n    public void testLang865$catena_9() {\n        try{ assertValidToLocale(\"_GB\", \"\", \"GB\", \"\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertValidToLocale(\"_GB_P\", \"\", \"GB\", \"P\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertValidToLocale(\"_GB_POSIX\", \"\", \"GB\", \"POSIX\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            LocaleUtils.toLocale(\"_G\");\n            try{ fail(\"Must be at least 3 chars if starts with underscore\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_Gb\");\n            try{ fail(\"Must be uppercase if starts with underscore\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_gB\");\n            try{ fail(\"Must be uppercase if starts with underscore\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_1B\");\n            try{ fail(\"Must be letter if starts with underscore\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_G1\");\n            try{ fail(\"Must be letter if starts with underscore\");                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_GB_\");\n            try{ fail(\"Must be at least 5 chars if starts with underscore\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (final IllegalArgumentException iae) {\n        }\n        try {\n            LocaleUtils.toLocale(\"_GBAP\");\n            fail(\"Must have underscore after the country if starts with underscore and is at least 5 chars\");         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (final IllegalArgumentException iae) {\n        }\n    }"
        ]
    }
}