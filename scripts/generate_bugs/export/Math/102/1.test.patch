{
    "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquare": {
        "begin_line_no": 44,
        "end_line_no": 108,
        "file_path": "src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java",
        "to": [
            "    public void testChiSquare$catena_3() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
            "    public void testChiSquare$catena_5() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
            "    public void testChiSquare$catena_2() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
            "    public void testChiSquare$catena_0() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
            "    public void testChiSquare$catena_1() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);                  /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
            "    public void testChiSquare$catena_4() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
            "    public void testChiSquare$catena_6() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            fail(\"alpha out of range, IllegalArgumentException expected\");                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
            "    public void testChiSquare$catena_7() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            fail(\"arguments too short, IllegalArgumentException expected\");                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
            "    public void testChiSquare$catena_8() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            fail(\"arrays have different lengths, IllegalArgumentException expected\");                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
            "    public void testChiSquare$catena_9() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            fail(\"bad expected count, IllegalArgumentException expected\");                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
            "    public void testChiSquare$catena_10() throws Exception {\n        \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", TestUtils.chiSquareTest(expected1, observed1, 0.07));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !TestUtils.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            TestUtils.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            TestUtils.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            TestUtils.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            TestUtils.chiSquareTest(expected, observed, .01);\n            fail(\"bad expected count, IllegalArgumentException expected\");                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }"
        ]
    },
    "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquare": {
        "begin_line_no": 46,
        "end_line_no": 110,
        "file_path": "src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java",
        "to": [
            "    public void testChiSquare$catena_2() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
            "    public void testChiSquare$catena_5() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
            "    public void testChiSquare$catena_3() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
            "    public void testChiSquare$catena_0() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
            "    public void testChiSquare$catena_1() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);                  /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
            "    public void testChiSquare$catena_4() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
            "    public void testChiSquare$catena_6() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            fail(\"alpha out of range, IllegalArgumentException expected\");                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
            "    public void testChiSquare$catena_7() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            fail(\"arguments too short, IllegalArgumentException expected\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
            "    public void testChiSquare$catena_8() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            fail(\"arrays have different lengths, IllegalArgumentException expected\");                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
            "    public void testChiSquare$catena_9() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            fail(\"bad expected count, IllegalArgumentException expected\");                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }",
            "    public void testChiSquare$catena_10() throws Exception {\n \n        // Target values computed using R version 1.8.1 \n        // Some assembly required ;-)  \n        //      Use sum((obs - exp)^2/exp) for the chi-square statistic and\n        //      1 - pchisq(sum((obs - exp)^2/exp), length(obs) - 1) for the p-value\n        \n        long[] observed = {10, 9, 11};\n        double[] expected = {10, 10, 10};\n        try{ assertEquals(\"chi-square statistic\", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);             }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        long[] observed1 = { 500, 623, 72, 70, 31 };\n        double[] expected1 = { 485, 541, 82, 61, 37 };\n        try{ assertEquals( \"chi-square test statistic\", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"chi-square p-value\", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test reject\", testStatistic.chiSquareTest(expected1, observed1, 0.08));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"chi-square test accept\", !testStatistic.chiSquareTest(expected1, observed1, 0.05));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            testStatistic.chiSquareTest(expected1, observed1, 95);\n            try{ fail(\"alpha out of range, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }  \n        \n        long[] tooShortObs = { 0 };\n        double[] tooShortEx = { 1 };\n        try {\n            testStatistic.chiSquare(tooShortEx, tooShortObs);\n            try{ fail(\"arguments too short, IllegalArgumentException expected\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n\n        // unmatched arrays\n        long[] unMatchedObs = { 0, 1, 2, 3 };\n        double[] unMatchedEx = { 1, 1, 2 };\n        try {\n            testStatistic.chiSquare(unMatchedEx, unMatchedObs);\n            try{ fail(\"arrays have different lengths, IllegalArgumentException expected\");                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        }\n        \n        // 0 expected count\n        expected[0] = 0;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            try{ fail(\"bad expected count, IllegalArgumentException expected\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n        // negative observed count\n        expected[0] = 1;\n        observed[0] = -1;\n        try {\n            testStatistic.chiSquareTest(expected, observed, .01);\n            fail(\"bad expected count, IllegalArgumentException expected\");                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            // expected\n        } \n        \n    }"
        ]
    },
    "org.apache.commons.math.stat.inference.TestUtilsTest::testChiSquareLargeTestStatistic": {
        "begin_line_no": 168,
        "end_line_no": 183,
        "file_path": "src/test/org/apache/commons/math/stat/inference/TestUtilsTest.java",
        "to": [
            "    public void testChiSquareLargeTestStatistic$catena_1() throws Exception {\n        double[] exp = new double[] {\n                3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n                232921.0, 437665.75\n        };\n\n        long[] obs = new long[] {\n                2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n        };\n        org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n            new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \n        double cst = csti.chiSquareTest(exp, obs); \n        try{ assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals( \"chi-square test statistic\", \n                114875.90421929007, TestUtils.chiSquare(exp, obs), 1E-9);                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testChiSquareLargeTestStatistic$catena_0() throws Exception {\n        double[] exp = new double[] {\n                3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n                232921.0, 437665.75\n        };\n\n        long[] obs = new long[] {\n                2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n        };\n        org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n            new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \n        double cst = csti.chiSquareTest(exp, obs); \n        assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals( \"chi-square test statistic\", \n                114875.90421929007, TestUtils.chiSquare(exp, obs), 1E-9);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.math.stat.inference.ChiSquareTestTest::testChiSquareLargeTestStatistic": {
        "begin_line_no": 170,
        "end_line_no": 185,
        "file_path": "src/test/org/apache/commons/math/stat/inference/ChiSquareTestTest.java",
        "to": [
            "    public void testChiSquareLargeTestStatistic$catena_1() throws Exception {\n        double[] exp = new double[] {\n            3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n            232921.0, 437665.75\n        };\n\n        long[] obs = new long[] {\n            2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n        };\n        org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n            new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \n        double cst = csti.chiSquareTest(exp, obs); \n        try{ assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals( \"chi-square test statistic\", \n                114875.90421929007, testStatistic.chiSquare(exp, obs), 1E-9);                               /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testChiSquareLargeTestStatistic$catena_0() throws Exception {\n        double[] exp = new double[] {\n            3389119.5, 649136.6, 285745.4, 25357364.76, 11291189.78, 543628.0, \n            232921.0, 437665.75\n        };\n\n        long[] obs = new long[] {\n            2372383, 584222, 257170, 17750155, 7903832, 489265, 209628, 393899\n        };\n        org.apache.commons.math.stat.inference.ChiSquareTestImpl csti =\n            new org.apache.commons.math.stat.inference.ChiSquareTestImpl(); \n        double cst = csti.chiSquareTest(exp, obs); \n        assertEquals(\"chi-square p-value\", 0.0, cst, 1E-3);                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals( \"chi-square test statistic\", \n                114875.90421929007, testStatistic.chiSquare(exp, obs), 1E-9);                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}