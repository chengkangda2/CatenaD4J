{
    "num_of_hunks": 9,
    "0": {
        "file_name": "src/com/google/javascript/jscomp/Normalize.java",
        "replaced_with": "        case Token.FUNCTION:\n          normalizeFunctionDeclaration(n);\n          break;\n",
        "patch_type": "insert",
        "next_line_no": 281
    },
    "1": {
        "file_name": "src/com/google/javascript/jscomp/Normalize.java",
        "replaced_with": "    private void normalizeFunctionDeclaration(Node n) {\n      Preconditions.checkState(n.getType() == Token.FUNCTION);\n      if (!NodeUtil.isFunctionAnonymous(n)\n          && !NodeUtil.isHoistedFunctionDeclaration(n)) {\n        rewriteFunctionDeclaration(n);\n      }\n    }\n",
        "patch_type": "insert",
        "next_line_no": 292
    },
    "2": {
        "file_name": "src/com/google/javascript/jscomp/Normalize.java",
        "replaced_with": "    private void rewriteFunctionDeclaration(Node n) {\n",
        "patch_type": "insert",
        "next_line_no": 309
    },
    "3": {
        "file_name": "src/com/google/javascript/jscomp/Normalize.java",
        "replaced_with": "      Node oldNameNode = n.getFirstChild();\n      Node fnNameNode = oldNameNode.cloneNode();\n      Node var = new Node(Token.VAR, fnNameNode, n.getLineno(), n.getCharno());\n      var.copyInformationFrom(n);\n",
        "patch_type": "insert",
        "next_line_no": 310
    },
    "4": {
        "file_name": "src/com/google/javascript/jscomp/Normalize.java",
        "replaced_with": "      oldNameNode.setString(\"\");\n",
        "patch_type": "insert",
        "next_line_no": 312
    },
    "5": {
        "file_name": "src/com/google/javascript/jscomp/Normalize.java",
        "replaced_with": "      Node parent = n.getParent();\n      parent.replaceChild(n, var);\n      fnNameNode.addChildToFront(n);\n",
        "patch_type": "insert",
        "next_line_no": 314
    },
    "6": {
        "file_name": "src/com/google/javascript/jscomp/Normalize.java",
        "replaced_with": "      reportCodeChange(\"Function declaration\");\n    }\n",
        "patch_type": "insert",
        "next_line_no": 315
    },
    "7": {
        "file_name": "src/com/google/javascript/jscomp/Normalize.java",
        "from_line_no": 521,
        "to_line_no": 521,
        "replaced_with": "      Var v = s.getVar(name);\n",
        "replaced": "      if (parent.getType() == Token.VAR) {\n",
        "patch_type": "replace",
        "next_line_no": 522
    },
    "8": {
        "file_name": "src/com/google/javascript/jscomp/Normalize.java",
        "replaced_with": "      Preconditions.checkState(\n          v == null || v.getParentNode().getType() != Token.CATCH);\n      if (v != null && parent.getType() == Token.FUNCTION) {\n        if (v.getParentNode().getType() == Token.VAR) {\n          s.undeclare(v);\n          s.declare(name, n, n.getJSType(), v.input);\n          replaceVarWithAssignment(v.getNameNode(), v.getParentNode(),\n              v.getParentNode().getParent());\n        }\n      } else if (parent.getType() == Token.VAR) {\n",
        "patch_type": "insert",
        "next_line_no": 523
    }
}