{
    "num_of_hunks": 11,
    "0": {
        "file_name": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "replaced_with": "  private boolean returnTypeInferred = false;\n",
        "patch_type": "insert",
        "next_line_no": 74
    },
    "1": {
        "file_name": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "from_line_no": 200,
        "to_line_no": 201,
        "replaced_with": "        info.getReturnType().evaluate(scope, typeRegistry) : null;\n",
        "replaced": "        info.getReturnType().evaluate(scope, typeRegistry) :\n        typeRegistry.getNativeType(UNKNOWN_TYPE);\n",
        "patch_type": "replace",
        "next_line_no": 202
    },
    "2": {
        "file_name": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "replaced_with": "        returnType != null &&\n",
        "patch_type": "insert",
        "next_line_no": 203
    },
    "3": {
        "file_name": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "replaced_with": "  FunctionTypeBuilder inferReturnStatements(@Nullable Node functionBlock) {\n    if (functionBlock == null || compiler.getInput(sourceName).isExtern()) {\n      return this;\n    }\n    Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);\n    if (returnType == null) {\n      boolean hasNonEmptyReturns = false;\n      List<Node> worklist = Lists.newArrayList(functionBlock);\n      while (!worklist.isEmpty()) {\n        Node current = worklist.remove(worklist.size() - 1);\n        int cType = current.getType();\n        if (cType == Token.RETURN && current.getFirstChild() != null ||\n            cType == Token.THROW) {\n          hasNonEmptyReturns = true;\n          break;\n        } else if (NodeUtil.isStatementBlock(current) ||\n            NodeUtil.isControlStructure(current)) {\n          for (Node child = current.getFirstChild();\n               child != null; child = child.getNext()) {\n            worklist.add(child);\n          }\n        }\n      }\n",
        "patch_type": "insert",
        "next_line_no": 213
    },
    "4": {
        "file_name": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "replaced_with": "      if (!hasNonEmptyReturns) {\n        returnType = typeRegistry.getNativeType(VOID_TYPE);\n        returnTypeInferred = true;\n      }\n    }\n    return this;\n  }\n",
        "patch_type": "insert",
        "next_line_no": 214
    },
    "5": {
        "file_name": "src/com/google/javascript/jscomp/FunctionTypeBuilder.java",
        "from_line_no": 496,
        "to_line_no": 496,
        "replaced_with": "          .withReturnType(returnType, returnTypeInferred)\n",
        "replaced": "          .withReturnType(returnType)\n",
        "patch_type": "replace",
        "next_line_no": 497
    },
    "6": {
        "file_name": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "replaced_with": "      Node fnBlock = isFnLiteral ? parametersNode.getNext() : null;\n",
        "patch_type": "insert",
        "next_line_no": 577
    },
    "7": {
        "file_name": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "replaced_with": "                    .inferReturnStatements(fnBlock)\n",
        "patch_type": "insert",
        "next_line_no": 617
    },
    "8": {
        "file_name": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
        "replaced_with": "            .inferReturnStatements(fnBlock)\n",
        "patch_type": "insert",
        "next_line_no": 634
    },
    "9": {
        "file_name": "src/com/google/javascript/rhino/jstype/FunctionBuilder.java",
        "replaced_with": "  public FunctionBuilder withReturnType(JSType returnType, boolean inferred) {\n    this.returnType = returnType;\n    this.inferredReturnType = inferred;\n    return this;\n  }\n",
        "patch_type": "insert",
        "next_line_no": 101
    },
    "10": {
        "file_name": "src/com/google/javascript/rhino/jstype/FunctionType.java",
        "from_line_no": 517,
        "to_line_no": 517,
        "replaced_with": "        registry, null, source,\n",
        "replaced": "        registry, null, null,\n",
        "patch_type": "replace",
        "next_line_no": 518
    }
}