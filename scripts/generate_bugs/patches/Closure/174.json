{
    "num_of_hunks": 9,
    "0": {
        "file_name": "src/com/google/javascript/jscomp/JsAst.java",
        "replaced_with": "    int startErrorCount = compiler.getErrorManager().getErrorCount();\n",
        "patch_type": "insert",
        "next_line_no": 82
    },
    "1": {
        "file_name": "src/com/google/javascript/jscomp/JsAst.java",
        "from_line_no": 95,
        "to_line_no": 95,
        "replaced_with": "    if (root == null ||\n",
        "replaced": "    if (root == null || compiler.hasHaltingErrors()) {\n",
        "patch_type": "replace",
        "next_line_no": 96
    },
    "2": {
        "file_name": "src/com/google/javascript/jscomp/JsAst.java",
        "replaced_with": "        (compiler.getErrorManager().getErrorCount() > startErrorCount && !compiler.isIdeMode())) {\n",
        "patch_type": "insert",
        "next_line_no": 99
    },
    "3": {
        "file_name": "src/com/google/javascript/jscomp/NodeUtil.java",
        "replaced_with": "    } else if (value != null) {\n      result = IR.exprResult(IR.assign(nameNode, value));\n      result.getFirstChild().setJSDocInfo(info);\n",
        "patch_type": "insert",
        "next_line_no": 2367
    },
    "4": {
        "file_name": "src/com/google/javascript/jscomp/NodeUtil.java",
        "from_line_no": 2368,
        "to_line_no": 2368,
        "replaced_with": "      result = IR.exprResult(nameNode);\n",
        "replaced": "      result = IR.exprResult(IR.assign(nameNode, value));\n",
        "patch_type": "replace",
        "next_line_no": 2369
    },
    "5": {
        "file_name": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "from_line_no": 356,
        "to_line_no": 357,
        "replaced_with": "        boolean isVar = parent.isVar();\n        if (isVar && n.getFirstChild() != null && n.getFirstChild().isQualifiedName()) {\n",
        "replaced": "        boolean isVarAssign = parent.isVar() && n.hasChildren();\n        if (isVarAssign && n.getFirstChild().isQualifiedName()) {\n",
        "patch_type": "replace",
        "next_line_no": 358
    },
    "6": {
        "file_name": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "from_line_no": 365,
        "to_line_no": 366,
        "replaced_with": "        } else if (isVar) {\n          Node value = n.hasChildren() ?\n              v.getInitialValue().detachFromParent() :\n              null;\n",
        "replaced": "        } else if (isVarAssign) {\n          Node value = v.getInitialValue().detachFromParent();\n",
        "patch_type": "replace",
        "next_line_no": 367
    },
    "7": {
        "file_name": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "replaced_with": "          if (value != null || v.getJSDocInfo() != null) {\n",
        "patch_type": "insert",
        "next_line_no": 377
    },
    "8": {
        "file_name": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "replaced_with": "          }\n",
        "patch_type": "insert",
        "next_line_no": 386
    }
}