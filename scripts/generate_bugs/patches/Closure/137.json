{
    "num_of_hunks": 30,
    "0": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "from_line_no": 26,
        "to_line_no": 26,
        "replaced_with": "import com.google.javascript.jscomp.NodeTraversal.ScopedCallback;\n",
        "replaced": "import com.google.javascript.jscomp.NodeTraversal.AbstractPostOrderCallback;\n",
        "patch_type": "replace",
        "next_line_no": 27
    },
    "1": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "replaced_with": "  public static final String ARGUMENTS = \"arguments\";\n",
        "patch_type": "insert",
        "next_line_no": 48
    },
    "2": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "from_line_no": 235,
        "to_line_no": 236,
        "replaced_with": "  static class ContextualRenameInverter\n      implements ScopedCallback, CompilerPass {\n",
        "replaced": "  static class ContextualRenameInverter extends AbstractPostOrderCallback\n      implements CompilerPass {\n",
        "patch_type": "replace",
        "next_line_no": 237
    },
    "3": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "replaced_with": "    private Set<String> referencedNames = ImmutableSet.of();\n",
        "patch_type": "insert",
        "next_line_no": 240
    },
    "4": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "replaced_with": "    private Deque<Set<String>> referenceStack = new ArrayDeque<Set<String>>();\n",
        "patch_type": "insert",
        "next_line_no": 242
    },
    "5": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "from_line_no": 244,
        "to_line_no": 244,
        "replaced_with": "    private Map<String, List<Node>> nameMap = Maps.newHashMap();\n",
        "replaced": "    private Map<Var, String> nameMap = Maps.newHashMap();\n",
        "patch_type": "replace",
        "next_line_no": 245
    },
    "6": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "from_line_no": 266,
        "to_line_no": 268,
        "replaced": "    private static String getOrginalNameInternal(String name, int index) {\n      return name.substring(0, index);\n    }\n",
        "patch_type": "delete",
        "next_line_no": 269
    },
    "7": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "replaced_with": "    public void enterScope(NodeTraversal t) {\n      if (t.inGlobalScope()) {\n        return;\n      }\n",
        "patch_type": "insert",
        "next_line_no": 273
    },
    "8": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "from_line_no": 274,
        "to_line_no": 277,
        "replaced_with": "      referenceStack.push(referencedNames);\n      referencedNames = Sets.newHashSet();\n",
        "replaced": "    private static String getNameSuffix(String name, int index) {\n      return name.substring(\n          index + ContextualRenamer.UNIQUE_ID_SEPARATOR.length(),\n          name.length());\n",
        "patch_type": "replace",
        "next_line_no": 278
    },
    "9": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "from_line_no": 284,
        "to_line_no": 291,
        "replaced_with": "    public void exitScope(NodeTraversal t) {\n      if (t.inGlobalScope()) {\n",
        "replaced": "    @Override\n    public void visit(NodeTraversal t, Node node, Node parent) {\n      if (node.getType() == Token.NAME) {\n        String oldName = node.getString();\n        if (containsSeparator(oldName)) {\n          Scope scope = t.getScope();\n          Var var = t.getScope().getVar(oldName);\n          if (var == null || var.isGlobal()) {\n",
        "patch_type": "replace",
        "next_line_no": 292
    },
    "10": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "from_line_no": 295,
        "to_line_no": 300,
        "replaced_with": "      for (Iterator<Var> it = t.getScope().getVars(); it.hasNext();) {\n        Var v = it.next();\n        handleScopeVar(v);\n      }\n",
        "replaced": "          if (nameMap.containsKey(var)) {\n            node.setString(nameMap.get(var));\n          } else {\n            int index = indexOfSeparator(oldName);\n            String newName = getOrginalNameInternal(oldName, index);\n            String suffix = getNameSuffix(oldName, index);\n",
        "patch_type": "replace",
        "next_line_no": 301
    },
    "11": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "replaced_with": "      Set<String> current = referencedNames;\n      referencedNames = referenceStack.pop();\n",
        "patch_type": "insert",
        "next_line_no": 304
    },
    "12": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "from_line_no": 307,
        "to_line_no": 310,
        "replaced_with": "      if (!referenceStack.isEmpty()) {\n        referencedNames.addAll(current);\n      }\n    }\n",
        "replaced": "            boolean recurseScopes = false;\n            if (!suffix.matches(\"\\\\d+\")) {\n              recurseScopes = true;\n            }\n",
        "patch_type": "replace",
        "next_line_no": 311
    },
    "13": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "replaced_with": "    void handleScopeVar(Var v) {\n      String name  = v.getName();\n      if (containsSeparator(name)) {\n        String newName = getOrginalName(name);\n",
        "patch_type": "insert",
        "next_line_no": 317
    },
    "14": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "from_line_no": 318,
        "to_line_no": 322,
        "replaced_with": "        if (TokenStream.isJSIdentifier(newName) &&\n            !referencedNames.contains(newName) && \n            !newName.equals(ARGUMENTS)) {\n          referencedNames.remove(name);\n",
        "replaced": "            if (var.scope.isDeclared(newName, recurseScopes) ||\n                !TokenStream.isJSIdentifier(newName)) {\n              newName = oldName;\n            } else {\n              var.scope.declare(newName, var.nameNode, null, null);\n",
        "patch_type": "replace",
        "next_line_no": 323
    },
    "15": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "from_line_no": 325,
        "to_line_no": 331,
        "replaced_with": "          referencedNames.add(newName);\n          List<Node> references = nameMap.get(name);\n          Preconditions.checkState(references != null);\n          for (Node n : references) {\n            Preconditions.checkState(n.getType() == Token.NAME);\n            n.setString(newName);\n          }\n",
        "replaced": "              Node parentNode = var.getParentNode();\n              if (parentNode.getType() == Token.FUNCTION &&\n                  parentNode == var.scope.getRootNode()) {\n                var.getNameNode().setString(newName);\n              }\n\n              node.setString(newName);\n",
        "patch_type": "replace",
        "next_line_no": 332
    },
    "16": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "replaced_with": "        nameMap.remove(name);\n      }\n    }\n",
        "patch_type": "insert",
        "next_line_no": 334
    },
    "17": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "from_line_no": 335,
        "to_line_no": 335,
        "replaced_with": "    @Override\n    public boolean shouldTraverse(NodeTraversal t, Node n, Node parent) {\n      return true;\n    }\n",
        "replaced": "            nameMap.put(var, newName);\n",
        "patch_type": "replace",
        "next_line_no": 336
    },
    "18": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "replaced_with": "    @Override\n    public void visit(NodeTraversal t, Node node, Node parent) {\n      if (t.inGlobalScope()) {\n        return;\n",
        "patch_type": "insert",
        "next_line_no": 337
    },
    "19": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "replaced_with": "      if (NodeUtil.isReferenceName(node)) {\n        String name = node.getString();\n",
        "patch_type": "insert",
        "next_line_no": 339
    },
    "20": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "replaced_with": "        referencedNames.add(name);\n",
        "patch_type": "insert",
        "next_line_no": 341
    },
    "21": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "replaced_with": "        if (containsSeparator(name)) {\n          addCandidateNameReference(name, node);\n",
        "patch_type": "insert",
        "next_line_no": 342
    },
    "22": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "replaced_with": "    private void addCandidateNameReference(String name, Node n) {\n      List<Node> nodes = nameMap.get(name);\n      if (null == nodes) {\n        nodes = Lists.newLinkedList();\n        nameMap.put(name, nodes);\n      }\n      nodes.add(n);\n    }\n",
        "patch_type": "insert",
        "next_line_no": 346
    },
    "23": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "replaced_with": "      if (!name.equals(ARGUMENTS)) {\n",
        "patch_type": "insert",
        "next_line_no": 392
    },
    "24": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "replaced_with": "            }\n            declarations.put(name, newName);\n",
        "patch_type": "insert",
        "next_line_no": 401
    },
    "25": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "from_line_no": 402,
        "to_line_no": 402,
        "replaced": "          declarations.put(name, newName);\n",
        "patch_type": "delete",
        "next_line_no": 403
    },
    "26": {
        "file_name": "src/com/google/javascript/jscomp/MakeDeclaredNamesUnique.java",
        "replaced_with": "      Preconditions.checkState(!name.equals(ARGUMENTS));\n",
        "patch_type": "insert",
        "next_line_no": 462
    },
    "27": {
        "file_name": "src/com/google/javascript/jscomp/NodeUtil.java",
        "replaced_with": "  static boolean isReferenceName(Node n) {\n    return isName(n) && !n.getString().isEmpty() && !isLabelName(n);\n  }\n",
        "patch_type": "insert",
        "next_line_no": 1043
    },
    "28": {
        "file_name": "src/com/google/javascript/jscomp/Normalize.java",
        "from_line_no": 82,
        "to_line_no": 82,
        "replaced": "    removeDuplicateDeclarations(root);\n",
        "patch_type": "delete",
        "next_line_no": 83
    },
    "29": {
        "file_name": "src/com/google/javascript/jscomp/Normalize.java",
        "replaced_with": "    removeDuplicateDeclarations(root);\n",
        "patch_type": "insert",
        "next_line_no": 102
    }
}