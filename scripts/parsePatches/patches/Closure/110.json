{
    "num_of_hunks": 12,
    "0": {
        "file_name": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "replaced_with": "        boolean isFunctionDecl = NodeUtil.isFunctionDeclaration(parent);\n",
        "patch_type": "insert",
        "next_line_no": 358
    },
    "1": {
        "file_name": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "from_line_no": 366,
        "to_line_no": 366,
        "replaced_with": "        } else if (isVar || isFunctionDecl) {\n          boolean isHoisted = NodeUtil.isHoistedFunctionDeclaration(parent);\n",
        "replaced": "        } else if (isVar) {\n",
        "patch_type": "replace",
        "next_line_no": 367
    },
    "2": {
        "file_name": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "from_line_no": 368,
        "to_line_no": 369,
        "replaced_with": "          Node value = v.getInitialValue() != null ?\n              v.getInitialValue() :\n",
        "replaced": "          Node value = n.hasChildren() ?\n              v.getInitialValue().detachFromParent() :\n",
        "patch_type": "replace",
        "next_line_no": 370
    },
    "3": {
        "file_name": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "from_line_no": 371,
        "to_line_no": 371,
        "replaced_with": "          Node varNode = null;\n",
        "replaced": "          Node varNode = parent;\n",
        "patch_type": "replace",
        "next_line_no": 372
    },
    "4": {
        "file_name": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "replaced_with": "          if (isFunctionDecl) {\n",
        "patch_type": "insert",
        "next_line_no": 383
    },
    "5": {
        "file_name": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "replaced_with": "            Node existingName = v.getNameNode();\n",
        "patch_type": "insert",
        "next_line_no": 384
    },
    "6": {
        "file_name": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "replaced_with": "            Node newName = IR.name(\"\").useSourceInfoFrom(existingName);\n            value.replaceChild(existingName, newName);\n",
        "patch_type": "insert",
        "next_line_no": 392
    },
    "7": {
        "file_name": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "replaced_with": "            varNode = IR.var(existingName).useSourceInfoFrom(existingName);\n            grandparent.replaceChild(parent, varNode);\n          } else {\n            if (value != null) {\n",
        "patch_type": "insert",
        "next_line_no": 393
    },
    "8": {
        "file_name": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "replaced_with": "              value.detachFromParent();\n            }\n            varNode = parent;\n          }\n",
        "patch_type": "insert",
        "next_line_no": 395
    },
    "9": {
        "file_name": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "replaced_with": "            if (isHoisted) {\n              grandparent.addChildToFront(newDecl);\n            } else {\n",
        "patch_type": "insert",
        "next_line_no": 408
    },
    "10": {
        "file_name": "src/com/google/javascript/jscomp/ScopedAliases.java",
        "replaced_with": "            }\n",
        "patch_type": "insert",
        "next_line_no": 409
    },
    "11": {
        "file_name": "src/com/google/javascript/rhino/Node.java",
        "replaced_with": "    if (n == null) {\n      throw new RuntimeException(\"node is not a child\");\n    }\n",
        "patch_type": "insert",
        "next_line_no": 554
    }
}