{
    "num_of_hunks": 17,
    "0": {
        "file_name": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "from_line_no": 343,
        "to_line_no": 343,
        "replaced_with": "        if (!n.isQuotedString() &&\n            TokenStream.isJSIdentifier(name) &&\n",
        "replaced": "        if (TokenStream.isJSIdentifier(name) &&\n",
        "patch_type": "replace",
        "next_line_no": 344
    },
    "1": {
        "file_name": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "from_line_no": 350,
        "to_line_no": 350,
        "replaced_with": "          double d = getSimpleNumber(name);\n          if (!Double.isNaN(d)) {\n            cc.addNumber(d);\n          } else {\n            add(jsString(n.getString(), outputCharsetEncoder));\n          }\n",
        "replaced": "          add(jsString(n.getString(), outputCharsetEncoder));\n",
        "patch_type": "replace",
        "next_line_no": 351
    },
    "2": {
        "file_name": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "replaced_with": "            Preconditions.checkState(c.getType() == Token.STRING);\n            String key = c.getString();\n",
        "patch_type": "insert",
        "next_line_no": 654
    },
    "3": {
        "file_name": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "from_line_no": 656,
        "to_line_no": 659,
        "replaced_with": "            if (!c.isQuotedString() &&\n                !TokenStream.isKeyword(key) &&\n                TokenStream.isJSIdentifier(key) &&\n",
        "replaced": "            if (c.getType() == Token.STRING &&\n                !c.isQuotedString() &&\n                !TokenStream.isKeyword(c.getString()) &&\n                TokenStream.isJSIdentifier(c.getString()) &&\n",
        "patch_type": "replace",
        "next_line_no": 660
    },
    "4": {
        "file_name": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "from_line_no": 662,
        "to_line_no": 663,
        "replaced_with": "                NodeUtil.isLatin(key)) {\n              add(key);\n",
        "replaced": "                NodeUtil.isLatin(c.getString())) {\n              add(c.getString());\n",
        "patch_type": "replace",
        "next_line_no": 664
    },
    "5": {
        "file_name": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "from_line_no": 666,
        "to_line_no": 666,
        "replaced_with": "              double d = getSimpleNumber(key);\n              if (!Double.isNaN(d)) {\n                cc.addNumber(d);\n              } else {\n                addExpr(c, 1);\n              }\n",
        "replaced": "              addExpr(c, 1);\n",
        "patch_type": "replace",
        "next_line_no": 667
    },
    "6": {
        "file_name": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "replaced_with": "  static boolean isSimpleNumber(String s) {\n    int len = s.length();\n    for (int index = 0; index < len; index++) {\n      char c = s.charAt(index);\n      if (c < '0' || c > '9') {\n        return false;\n      }\n    }\n    return len > 0;\n  }\n",
        "patch_type": "insert",
        "next_line_no": 724
    },
    "7": {
        "file_name": "src/com/google/javascript/jscomp/CodeGenerator.java",
        "replaced_with": "  static double getSimpleNumber(String s) {\n    if (isSimpleNumber(s)) {\n      long l = Long.parseLong(s);\n      if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {\n        return l;\n      }\n    }\n    return Double.NaN;\n  }\n",
        "patch_type": "insert",
        "next_line_no": 725
    },
    "8": {
        "file_name": "src/com/google/javascript/jscomp/RenamePrototypes.java",
        "from_line_no": 336,
        "to_line_no": 336,
        "replaced_with": "              if (TokenStream.isJSIdentifier(child.getString())) {\n",
        "replaced": "              if (child.getType() != Token.NUMBER) {\n",
        "patch_type": "replace",
        "next_line_no": 337
    },
    "9": {
        "file_name": "src/com/google/javascript/jscomp/RenamePrototypes.java",
        "from_line_no": 377,
        "to_line_no": 377,
        "replaced_with": "              if (TokenStream.isJSIdentifier(key.getString())) {\n",
        "replaced": "              if (key.getType() != Token.NUMBER) {\n",
        "patch_type": "replace",
        "next_line_no": 378
    },
    "10": {
        "file_name": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "replaced_with": "  private Node transformNumberAsString(NumberLiteral literalNode) {\n    JSDocInfo jsDocInfo = handleJsDoc(literalNode);\n    Node irNode = newStringNode(getStringValue(literalNode.getNumber()));\n    if (jsDocInfo != null) {\n      irNode.setJSDocInfo(jsDocInfo);\n    }\n    setSourceInfo(irNode, literalNode);\n    return irNode;\n  }\n",
        "patch_type": "insert",
        "next_line_no": 255
    },
    "11": {
        "file_name": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "replaced_with": "  private static String getStringValue(double value) {\n    long longValue = (long) value;\n",
        "patch_type": "insert",
        "next_line_no": 256
    },
    "12": {
        "file_name": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "replaced_with": "    if (longValue == value) {\n      return Long.toString(longValue);\n    } else {\n      return Double.toString(value);\n    }\n  }\n",
        "patch_type": "insert",
        "next_line_no": 258
    },
    "13": {
        "file_name": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "replaced_with": "      } else if (n instanceof NumberLiteral) {\n        ret = transformNumberAsString((NumberLiteral)n);\n        ret.putBooleanProp(Node.QUOTED_PROP, true);\n",
        "patch_type": "insert",
        "next_line_no": 347
    },
    "14": {
        "file_name": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "from_line_no": 349,
        "to_line_no": 351,
        "replaced": "        Preconditions.checkState(ret.getType() == Token.NUMBER\n            || ret.getType() == Token.STRING);\n        if (ret.getType() == Token.STRING) {\n",
        "patch_type": "delete",
        "next_line_no": 352
    },
    "15": {
        "file_name": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "from_line_no": 353,
        "to_line_no": 353,
        "replaced": "        }\n",
        "patch_type": "delete",
        "next_line_no": 354
    },
    "16": {
        "file_name": "src/com/google/javascript/jscomp/parsing/IRFactory.java",
        "replaced_with": "      Preconditions.checkState(ret.getType() == Token.STRING);\n",
        "patch_type": "insert",
        "next_line_no": 355
    }
}