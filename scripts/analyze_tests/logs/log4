-------------
Chart_2
/root/workbench/d4j_buggy/Chart_2/tests//org/jfree/data/general/junit/DatasetUtilitiesTests.java
analyze: testBug2849731_2
Invocation:
add add to all_set
Invocation:
add addSeries to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.0, r.getLowerBound(), EPSILON);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.0, r.getUpperBound(), EPSILON);
Invocation:
add add to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.0, r.getLowerBound(), EPSILON);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.5, r.getUpperBound(), EPSILON);
Invocation:
add add to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0.5, r.getLowerBound(), EPSILON);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.5, r.getUpperBound(), EPSILON);
analyze: testBug2849731_3
Invocation:
add add to all_set
Invocation:
add addSeries to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.5, r.getLowerBound(), EPSILON);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.5, r.getUpperBound(), EPSILON);
Invocation:
add add to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.5, r.getLowerBound(), EPSILON);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(2.5, r.getUpperBound(), EPSILON);
Invocation:
add add to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.5, r.getLowerBound(), EPSILON);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(3.5, r.getUpperBound(), EPSILON);
-------------
-------------
Chart_5
/root/workbench/d4j_buggy/Chart_5/tests//org/jfree/data/xy/junit/XYSeriesTests.java
analyze: testBug1955483
Invocation:
add addOrUpdate to all_set
Invocation:
add addOrUpdate to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Double(1.0), series.getY(0));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Double(2.0), series.getY(1));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(2, series.getItemCount());
-------------
-------------
Chart_14
/root/workbench/d4j_buggy/Chart_14/tests//org/jfree/chart/plot/junit/CategoryPlotTests.java
analyze: testRemoveDomainMarker
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     	assertFalse(plot.removeDomainMarker(new CategoryMarker("Category 1")));
analyze: testRemoveRangeMarker
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     	assertFalse(plot.removeRangeMarker(new ValueMarker(0.5)));
/root/workbench/d4j_buggy/Chart_14/tests//org/jfree/chart/plot/junit/XYPlotTests.java
analyze: testRemoveDomainMarker
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     	assertFalse(plot.removeDomainMarker(new ValueMarker(0.5)));
analyze: testRemoveRangeMarker
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     	assertFalse(plot.removeRangeMarker(new ValueMarker(0.5)));
-------------
-------------
Chart_15
/root/workbench/d4j_buggy/Chart_15/tests//org/jfree/chart/plot/junit/PiePlot3DTests.java
analyze: testDrawWithNullDataset
Invocation:
add draw to all_set
Invocation:
add dispose to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(success);
-------------
-------------
Chart_16
/root/workbench/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java
analyze: testCloning2
Invocation:
add printStackTrace to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(d1 != d2);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(d1.getClass() == d2.getClass());
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(d1.equals(d2));	
analyze: testGetSeriesIndex
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     	assertEquals(-1, empty.getSeriesIndex("ABC"));
analyze: testGetRowIndex
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     	assertEquals(-1, empty.getRowIndex("ABC"));
analyze: testGetCategoryIndex
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     	assertEquals(-1, empty.getCategoryIndex("ABC"));
analyze: testGetColumnIndex
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     	assertEquals(-1, empty.getColumnIndex("ABC"));
analyze: testSetCategoryKeys
Invocation:
add setCategoryKeys to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     	assertTrue(pass);
analyze: testGetColumnCount
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, empty.getColumnCount());
analyze: testGetRowCount
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, empty.getColumnCount());
-------------
-------------
Chart_18
/root/workbench/d4j_buggy/Chart_18/tests//org/jfree/data/category/junit/DefaultCategoryDatasetTests.java
analyze: testBug1835955
Invocation:
add addValue to all_set
Invocation:
add addValue to all_set
Invocation:
add removeColumn to all_set
Invocation:
add addValue to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     	assertEquals(3.0, d.getValue("R2", "C2").doubleValue(), EPSILON);
/root/workbench/d4j_buggy/Chart_18/tests//org/jfree/data/junit/DefaultKeyedValues2DTests.java
analyze: testRemoveColumnByKey
Invocation:
add addValue to all_set
Invocation:
add addValue to all_set
Invocation:
add removeColumn to all_set
Invocation:
add addValue to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     	assertEquals(3.0, d.getValue("R2", "C2").doubleValue(), EPSILON);
Invocation:
add removeColumn to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     	assertTrue(pass);
/root/workbench/d4j_buggy/Chart_18/tests//org/jfree/data/junit/DefaultKeyedValuesTests.java
analyze: testGetIndex2
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     	assertEquals(-1, v.getIndex("K1"));
Invocation:
add addValue to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     	assertEquals(0, v.getIndex("K1"));
Invocation:
add removeValue to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     	assertEquals(-1, v.getIndex("K1"));
analyze: testRemoveValue
Invocation:
add addValue to all_set
Invocation:
add addValue to all_set
Invocation:
add addValue to all_set
Invocation:
add addValue to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, data.getIndex("B"));
Invocation:
add removeValue to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, data.getIndex("B"));
Invocation:
add removeValue to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
-------------
-------------
Chart_19
/root/workbench/d4j_buggy/Chart_19/tests//org/jfree/chart/plot/junit/CategoryPlotTests.java
analyze: testGetDomainAxisIndex
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, plot.getDomainAxisIndex(domainAxis1));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, plot.getDomainAxisIndex(domainAxis2));
Invocation:
add setDomainAxis to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, plot.getDomainAxisIndex(domainAxis2));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, plot.getDomainAxisIndex(new CategoryAxis("X2")));
Invocation:
add getDomainAxisIndex to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
analyze: testGetRangeAxisIndex
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, plot.getRangeAxisIndex(rangeAxis1));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, plot.getRangeAxisIndex(rangeAxis2));
Invocation:
add setRangeAxis to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, plot.getRangeAxisIndex(rangeAxis2));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, plot.getRangeAxisIndex(new NumberAxis("Y2")));
Invocation:
add getRangeAxisIndex to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
-------------
-------------
Chart_21
/root/workbench/d4j_buggy/Chart_21/tests//org/jfree/data/statistics/junit/DefaultBoxAndWhiskerCategoryDatasetTests.java
analyze: testGetRangeBounds
Invocation:
add add to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(false));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Range(7.0, 8.0), d1.getRangeBounds(true));
Invocation:
add add to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(false));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Range(7.5, 8.5), d1.getRangeBounds(true));
Invocation:
add add to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(false));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Range(7.5, 9.5), d1.getRangeBounds(true));
Invocation:
add add to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(false));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Range(8.5, 9.6), d1.getRangeBounds(true));
-------------
-------------
Chart_22
/root/workbench/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java
analyze: testGetValueByKey
Invocation:
add addObject to all_set
Invocation:
add addObject to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Obj1", data.getObject("R1", "C1"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Obj2", data.getObject("R2", "C2"));
Invocation:
add assertNull to all_set
found containsAssert getting True in analyze_invocation, add assertNull to pure_name_set
qualifier: 
code:         assertNull(data.getObject("R1", "C2"));
Invocation:
add assertNull to all_set
found containsAssert getting True in analyze_invocation, add assertNull to pure_name_set
qualifier: 
code:         assertNull(data.getObject("R2", "C1"));
Invocation:
add getObject to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
Invocation:
add getObject to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
Invocation:
add getObject to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
Invocation:
add getObject to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
analyze: testSetObject
Invocation:
add setObject to all_set
Invocation:
add setObject to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Obj1", data.getObject("R1", "C1"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Obj2", data.getObject("R2", "C2"));
Invocation:
add assertNull to all_set
found containsAssert getting True in analyze_invocation, add assertNull to pure_name_set
qualifier: 
code:         assertNull(data.getObject("R1", "C2"));
Invocation:
add assertNull to all_set
found containsAssert getting True in analyze_invocation, add assertNull to pure_name_set
qualifier: 
code:         assertNull(data.getObject("R2", "C1"));
Invocation:
add setObject to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("ABC", data.getObject("R2", "C2"));
Invocation:
add setObject to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
Invocation:
add setObject to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
analyze: testRemoveColumnByIndex
Invocation:
add setObject to all_set
Invocation:
add setObject to all_set
Invocation:
add removeColumn to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, data.getColumnCount());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Obj2", data.getObject(1, 0));
Invocation:
add removeColumn to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
Invocation:
add removeColumn to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
analyze: testRemoveRowByKey
Invocation:
add setObject to all_set
Invocation:
add setObject to all_set
Invocation:
add removeRow to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, data.getRowCount());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Obj1", data.getObject(0, 0));
Invocation:
add removeRow to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
Invocation:
add removeRow to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
analyze: testRemoveColumnByKey
Invocation:
add setObject to all_set
Invocation:
add setObject to all_set
Invocation:
add removeColumn to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, data.getColumnCount());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Obj1", data.getObject(0, 0));
Invocation:
add removeColumn to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
Invocation:
add removeColumn to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(pass);
analyze: testRemoveValue
Invocation:
add setObject to all_set
Invocation:
add setObject to all_set
Invocation:
add removeObject to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, data.getRowCount());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, data.getColumnCount());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Obj1", data.getObject(0, 0));
-------------
-------------
Chart_25
/root/workbench/d4j_buggy/Chart_25/tests//org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java
analyze: testDrawWithNullMeanVertical
Invocation:
add add to all_set
Invocation:
add add to all_set
Invocation:
add createBufferedImage to all_set
Invocation:
add printStackTrace to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(success);
analyze: testDrawWithNullMeanHorizontal
Invocation:
add add to all_set
Invocation:
add add to all_set
Invocation:
add setOrientation to all_set
Invocation:
add createBufferedImage to all_set
Invocation:
add printStackTrace to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(success);
analyze: testDrawWithNullDeviationVertical
Invocation:
add add to all_set
Invocation:
add add to all_set
Invocation:
add createBufferedImage to all_set
Invocation:
add printStackTrace to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(success);
analyze: testDrawWithNullDeviationHorizontal
Invocation:
add add to all_set
Invocation:
add add to all_set
Invocation:
add setOrientation to all_set
Invocation:
add createBufferedImage to all_set
Invocation:
add printStackTrace to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(success);
-------------
-------------
Lang_1
/root/workbench/d4j_buggy/Lang_1/src/test/java//org/apache/commons/lang3/math/NumberUtilsTest.java
analyze: TestLang747
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber("0x8000"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber("0x80000"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber("0x800000"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber("0x8000000"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber("0x7FFFFFFF"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber("0x80000000"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber("0xFFFFFFFF"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber("0x08000000"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber("0x007FFFFFFF"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber("0x080000000"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber("0x00FFFFFFFF"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber("0x800000000"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber("0x8000000000"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber("0x80000000000"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber("0x800000000000"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber("0x8000000000000"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber("0x80000000000000"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber("0x800000000000000"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x7FFFFFFFFFFFFFFF"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x8000000000000000"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0xFFFFFFFFFFFFFFFF"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber("0x00080000000000000"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber("0x0800000000000000"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber("0x07FFFFFFFFFFFFFFF"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new BigInteger("8000000000000000", 16), NumberUtils.createNumber("0x00008000000000000000"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new BigInteger("FFFFFFFFFFFFFFFF", 16), NumberUtils.createNumber("0x0FFFFFFFFFFFFFFFF"));
-------------
-------------
Lang_3
/root/workbench/d4j_buggy/Lang_3/src/test/java//org/apache/commons/lang3/math/NumberUtilsTest.java
analyze: testStringCreateNumberEnsureNoPrecisionLoss
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(NumberUtils.createNumber(shouldBeFloat) instanceof Float);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(NumberUtils.createNumber(shouldBeDouble) instanceof Double);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(NumberUtils.createNumber(shouldBeBigDecimal) instanceof BigDecimal);
-------------
-------------
Lang_4
/root/workbench/d4j_buggy/Lang_4/src/test/java//org/apache/commons/lang3/text/translate/LookupTranslatorTest.java
analyze: testLang882
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Incorrect codepoint consumption", 3, result);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Incorrect value", "two", out.toString());
-------------
-------------
Lang_7
/root/workbench/d4j_buggy/Lang_7/src/test/java//org/apache/commons/lang3/math/NumberUtilsTest.java
analyze: testCreateNumber
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 1 failed", Float.valueOf("1234.5"), NumberUtils.createNumber("1234.5"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 2 failed", Integer.valueOf("12345"), NumberUtils.createNumber("12345"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 3 failed", Double.valueOf("1234.5"), NumberUtils.createNumber("1234.5D"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 3 failed", Double.valueOf("1234.5"), NumberUtils.createNumber("1234.5d"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 4 failed", Float.valueOf("1234.5"), NumberUtils.createNumber("1234.5F"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 4 failed", Float.valueOf("1234.5"), NumberUtils.createNumber("1234.5f"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 5 failed", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 6 failed", Long.valueOf(12345), NumberUtils.createNumber("12345L"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 6 failed", Long.valueOf(12345), NumberUtils.createNumber("12345l"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 7 failed", Float.valueOf("-1234.5"), NumberUtils.createNumber("-1234.5"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 8 failed", Integer.valueOf("-12345"), NumberUtils.createNumber("-12345"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("createNumber(String) 9a failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("createNumber(String) 9b failed", 0xFADE == NumberUtils.createNumber("0Xfade").intValue());
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("createNumber(String) 10a failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("createNumber(String) 10b failed", -0xFADE == NumberUtils.createNumber("-0Xfade").intValue());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 11 failed", Double.valueOf("1.1E200"), NumberUtils.createNumber("1.1E200"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 12 failed", Float.valueOf("1.1E20"), NumberUtils.createNumber("1.1E20"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 13 failed", Double.valueOf("-1.1E200"), NumberUtils.createNumber("-1.1E200"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 14 failed", Double.valueOf("1.1E-200"), NumberUtils.createNumber("1.1E-200"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 16 failed", Long.valueOf("10" + Integer.MAX_VALUE), NumberUtils
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 17 failed", Long.valueOf("10" + Integer.MAX_VALUE), NumberUtils
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) LANG-521 failed", Float.valueOf("2."), NumberUtils.createNumber("2."));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:         assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) LANG-693 failed", Double.valueOf(Double.MAX_VALUE), NumberUtils
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(BigDecimal.class,bigNum.getClass());
Invocation:
add assertNotNull to all_set
found containsAssert getting True in analyze_invocation, add assertNotNull to pure_name_set
qualifier: 
code:         assertNotNull(bigNum);
Invocation:
add createNumber to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("Expected NumberFormatException");
-------------
-------------
Lang_8
/root/workbench/d4j_buggy/Lang_8/src/test/java//org/apache/commons/lang3/time/FastDateFormat_PrinterTest.java
/root/workbench/d4j_buggy/Lang_8/src/test/java//org/apache/commons/lang3/time/FastDatePrinterTest.java
analyze: testCalendarTimezoneRespected
Invocation:
add assertNotNull to all_set
found containsAssert getting True in analyze_invocation, add assertNotNull to pure_name_set
qualifier: 
code:         assertNotNull("Cannot find another timezone", anotherZone);
Invocation:
add setTimeZone to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expectedValue, actualValue);
-------------
-------------
Lang_10
/root/workbench/d4j_buggy/Lang_10/src/test/java//org/apache/commons/lang3/time/FastDateFormat_ParserTest.java
/root/workbench/d4j_buggy/Lang_10/src/test/java//org/apache/commons/lang3/time/FastDateParserTest.java
analyze: testLANG_831
Invocation:
add testSdfAndFdp to all_set
found containsAssert getting True in analyze_invocation, add testSdfAndFdp to pure_name_set
qualifier: 
code:         testSdfAndFdp("M E","3  Tue", true);
-------------
-------------
Lang_12
/root/workbench/d4j_buggy/Lang_12/src/test/java//org/apache/commons/lang3/RandomStringUtilsTest.java
analyze: testLANG805
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("aaa", RandomStringUtils.random(3,0,0,false,false,new char[]{'a'},new Random(seed)));
analyze: testExceptions
Invocation:
add random to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add random to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add random to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add random to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add random to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add random to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add random to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add random to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add random to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
-------------
-------------
Lang_13
/root/workbench/d4j_buggy/Lang_13/src/test/java//org/apache/commons/lang3/SerializationUtilsTest.java
analyze: testPrimitiveTypeClassSerialization
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals(primitiveType, clone);
-------------
-------------
Lang_15
/root/workbench/d4j_buggy/Lang_15/src/test/java//org/apache/commons/lang3/reflect/TypeUtilsTest.java
analyze: testIsAssignable
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 0, 0, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 0, 1, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 1, 0, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 0, 2, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 2, 0, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 0, 3, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 3, 0, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 0, 4, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 4, 0, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 0, 5, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 5, 0, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 0, 6, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 6, 0, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 1, 1, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 1, 2, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 2, 1, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 1, 3, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 3, 1, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 1, 4, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 4, 1, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 1, 5, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 5, 1, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 1, 6, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 6, 1, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 2, 2, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 2, 3, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 3, 2, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 2, 4, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 4, 2, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 2, 5, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 5, 2, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 2, 6, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 6, 2, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 3, 3, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 3, 4, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 4, 3, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 3, 5, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 5, 3, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 3, 6, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 6, 3, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 4, 4, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 4, 5, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 5, 4, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 4, 6, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 6, 4, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 5, 5, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 5, 6, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 6, 5, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 6, 6, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 7, 7, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 7, 8, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 8, 7, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 7, 9, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 9, 7, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 7, 10, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 10, 7, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 7, 11, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 11, 7, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 7, 12, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 12, 7, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 7, 13, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 13, 7, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 8, 8, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 8, 9, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 9, 8, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 8, 10, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 10, 8, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 8, 11, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 11, 8, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 8, 12, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 12, 8, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 8, 13, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 13, 8, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 9, 9, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 9, 10, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 10, 9, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 9, 11, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 11, 9, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 9, 12, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 12, 9, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 9, 13, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 13, 9, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 10, 10, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 10, 11, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 11, 10, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 10, 12, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 12, 10, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 10, 13, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 13, 10, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 11, 11, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 11, 12, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 12, 11, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 11, 13, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 13, 11, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 12, 12, true);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 12, 13, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 13, 12, false);
Invocation:
add delegateBooleanAssertion to all_set
found containsAssert getting True in analyze_invocation, add delegateBooleanAssertion to pure_name_set
qualifier: 
code:         delegateBooleanAssertion(types, 13, 13, true);
Invocation:
add assertTrue to all_set
#should check: Assert.assertTrue
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(datType, disType));
Invocation:
add assertFalse to all_set
#should check: Assert.assertFalse
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(TypeUtils.isAssignable(daType, disType));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(String.format("type %s not assignable to %s!", dingType, disType),
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));
analyze: testGetTypeArguments
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue("Type var assigns for Comparable from Integer: " + typeVarAssigns,
Invocation:
add assertEquals to all_set
#should check: Assert.assertEquals
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals("Type argument of Comparable from Integer: " + typeArg, Integer.class,
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue("Type var assigns for Comparable from int: " + typeVarAssigns,
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals("Type argument of Comparable from int: " + typeArg, Integer.class,
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to mess_name_set
qualifier: Assert
code:         Assert.assertFalse("Type var assigns for Collection from List: " + typeVarAssigns,
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(typeVarAssigns.size() == 2);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(2, typeVarAssigns.size());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));
-------------
-------------
Lang_17
/root/workbench/d4j_buggy/Lang_17/src/test/java//org/apache/commons/lang3/StringEscapeUtilsTest.java
analyze: testLang720
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(input, escaped);
-------------
-------------
Lang_18
/root/workbench/d4j_buggy/Lang_18/src/test/java//org/apache/commons/lang3/time/FastDateFormatTest.java
analyze: testFormat
Invocation:
add setDefault to all_set
Invocation:
add setDefault to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals(sdf.format(date1), fdf.format(date1));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals("2003-01-10T15:33:20", fdf.format(date1));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals("2003-01-10T15:33:20", fdf.format(cal1));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals("2003-01-10T15:33:20", fdf.format(millis1));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals("2003-07-10T09:00:00", fdf.format(date2));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals("2003-07-10T09:00:00", fdf.format(cal2));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals("2003-07-10T09:00:00", fdf.format(millis2));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals("-0500", fdf.format(date1));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals("-0500", fdf.format(cal1));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals("-0500", fdf.format(millis1));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals("-0400", fdf.format(date2));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals("-0400", fdf.format(cal2));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals("-0400", fdf.format(millis2));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals("-05:00", fdf.format(date1));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals("-05:00", fdf.format(cal1));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals("-05:00", fdf.format(millis1));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals("-04:00", fdf.format(date2));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals("-04:00", fdf.format(cal2));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals("-04:00", fdf.format(millis2));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals(sdf.format(date1).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date1));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals(sdf.format(date2).replaceAll("2003 03 03 03", "2003 2003 03 2003"), fdf.format(date2));
Invocation:
add setDefault to all_set
Invocation:
add setDefault to all_set
-------------
-------------
Lang_19
/root/workbench/d4j_buggy/Lang_19/src/test/java//org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java
analyze: testOutOfBounds
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Failed to ignore when last character is &", "Test &", neu.translate("Test &"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Failed to ignore when last character is &", "Test &#", neu.translate("Test &#"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Failed to ignore when last character is &", "Test &#x", neu.translate("Test &#x"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Failed to ignore when last character is &", "Test &#X", neu.translate("Test &#X"));
analyze: testUnfinishedEntity
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Failed to support unfinished entities (i.e. missing semi-colon", expected, result);
-------------
-------------
Lang_20
/root/workbench/d4j_buggy/Lang_20/src/test/java//org/apache/commons/lang3/StringUtilsTest.java
analyze: testJoin_Objectarray
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, StringUtils.join((Object[]) null)); // equivalent explicit cast
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", StringUtils.join()); // empty array
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", StringUtils.join((Object) null)); // => new Object[]{null}
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", StringUtils.join(NULL_ARRAY_LIST));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("abc", StringUtils.join(new String[] {"a", "b", "c"}));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("a", StringUtils.join(new String[] {null, "a", ""}));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST));
analyze: testJoin_ArrayChar
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, StringUtils.join((Object[]) null, ','));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));
-------------
-------------
Lang_23
/root/workbench/d4j_buggy/Lang_23/src/test/java//org/apache/commons/lang3/text/ExtendedMessageFormatTest.java
analyze: testEqualsHashcode
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("same, equals()",   emf.equals(emf));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("same, hashcode()", emf.hashCode() == emf.hashCode());
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("equal, equals()",   emf.equals(other));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("equal, hashcode()", emf.hashCode() == other.hashCode());
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:         assertFalse("class, equals()",  emf.equals(other));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("class, hashcode()", emf.hashCode() == other.hashCode()); // same hashcode
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:         assertFalse("pattern, equals()",   emf.equals(other));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:         assertFalse("pattern, hashcode()", emf.hashCode() == other.hashCode());
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:         assertFalse("registry, equals()",   emf.equals(other));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:         assertFalse("registry, hashcode()", emf.hashCode() == other.hashCode());
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:         assertFalse("locale, equals()",  emf.equals(other));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("locale, hashcode()", emf.hashCode() == other.hashCode()); // same hashcode
-------------
-------------
Lang_27
/root/workbench/d4j_buggy/Lang_27/src/test/java//org/apache/commons/lang3/math/NumberUtilsTest.java
analyze: testCreateNumber
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:         assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));
-------------
-------------
Lang_30
/root/workbench/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
analyze: testContainsAny_StringCharArrayWithBadSupplementaryChars
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsAny("abc" + CharUSuppCharHigh + "xyz", CharU20001.toCharArray()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));
analyze: testContainsAny_StringWithBadSupplementaryChars
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));
analyze: testContainsNone_CharArrayWithBadSupplementaryChars
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));
analyze: testContainsNone_CharArrayWithSupplementaryChars
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, CharU20000.indexOf(CharU20001));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));
analyze: testContainsNone_StringWithBadSupplementaryChars
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));        
analyze: testContainsNone_StringWithSupplementaryChars
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, CharU20000.indexOf(CharU20001));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));
analyze: testIndexOfAny_StringCharArrayWithSupplementaryChars
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));    
analyze: testIndexOfAny_StringStringWithSupplementaryChars
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));    
analyze: testIndexOfAnyBut_StringCharArrayWithSupplementaryChars
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));        
analyze: testIndexOfAnyBut_StringStringWithSupplementaryChars
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));        
-------------
-------------
Lang_31
/root/workbench/d4j_buggy/Lang_31/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
analyze: testContainsAnyStringWithSupplementaryChars
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(-1, CharU20000.indexOf(CharU20001));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));
analyze: testContainsAnyCharArrayWithSupplementaryChars
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(-1, CharU20000.indexOf(CharU20001));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code: 		assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));
-------------
-------------
Lang_32
/root/workbench/d4j_buggy/Lang_32/src/test/java//org/apache/commons/lang3/builder/HashCodeBuilderTest.java
analyze: testReflectionObjectCycle
Invocation:
add hashCode to all_set
Invocation:
add assertNull to all_set
found containsAssert getting True in analyze_invocation, add assertNull to pure_name_set
qualifier: 
code:         assertNull(HashCodeBuilder.getRegistry());
Invocation:
add hashCode to all_set
Invocation:
add assertNull to all_set
found containsAssert getting True in analyze_invocation, add assertNull to pure_name_set
qualifier: 
code:         assertNull(HashCodeBuilder.getRegistry());
-------------
-------------
Lang_34
/root/workbench/d4j_buggy/Lang_34/src/test/java//org/apache/commons/lang3/builder/ToStringBuilderTest.java
analyze: testReflectionObjectArray
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{<null>,5,{3,6}}]", ToStringBuilder.reflectionToString(array));
Invocation:
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
analyze: testReflectionLongArray
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
Invocation:
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
analyze: testReflectionIntArray
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
Invocation:
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
analyze: testReflectionShortArray
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
Invocation:
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
analyze: testReflectionyteArray
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{1,2,-3,4}]", ToStringBuilder.reflectionToString(array));
Invocation:
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
analyze: testReflectionCharArray
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{A,2,_,D}]", ToStringBuilder.reflectionToString(array));
Invocation:
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
analyze: testReflectionDoubleArray
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array));
Invocation:
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
analyze: testReflectionFloatArray
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{1.0,2.9876,-3.00001,4.3}]", ToStringBuilder.reflectionToString(array));
Invocation:
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
analyze: testReflectionBooleanArray
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{true,false,false}]", ToStringBuilder.reflectionToString(array));
Invocation:
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
analyze: testReflectionFloatArrayArray
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array));
Invocation:
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
analyze: testReflectionLongArrayArray
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
Invocation:
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
analyze: testReflectionIntArrayArray
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
Invocation:
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
analyze: testReflectionhortArrayArray
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
Invocation:
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
analyze: testReflectionByteArrayArray
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{{1,2},<null>,{5}}]", ToStringBuilder.reflectionToString(array));
Invocation:
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
analyze: testReflectionCharArrayArray
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{{A,B},<null>,{p}}]", ToStringBuilder.reflectionToString(array));
Invocation:
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
analyze: testReflectionDoubleArrayArray
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{{1.0,2.29686},<null>,{NaN}}]", ToStringBuilder.reflectionToString(array));
Invocation:
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
analyze: testReflectionBooleanArrayArray
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[{{true,false},<null>,{false}}]", ToStringBuilder.reflectionToString(array));
Invocation:
add assertReflectionArray to all_set
found containsAssert getting True in analyze_invocation, add assertReflectionArray to pure_name_set
qualifier: 
code:         assertReflectionArray("<null>", array);
analyze: testReflectionHierarchy
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[a=a,transientA=t]", ToStringBuilder.reflectionToString(baseA, null, true));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, null));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[a=a]", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[b=b,transientB=t,a=a,transientA=t]", ToStringBuilder.reflectionToString(baseB, null, true));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, null));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[b=b,a=a]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseStr + "[b=b]", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));
analyze: testReflectionArrayCycle
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(
analyze: testReflectionArrayCycleLevel2
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(
analyze: testReflectionArrayArrayCycle
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(
analyze: testSimpleReflectionObjectCycle
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(this.toBaseString(simple) + "[o=" + this.toBaseString(simple) + "]", simple.toString());
analyze: testSelfInstanceVarReflectionObjectCycle
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(this.toBaseString(test) + "[typeIsSelf=" + this.toBaseString(test) + "]", test.toString());
analyze: testSelfInstanceTwoVarsReflectionObjectCycle
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(this.toBaseString(test) + "[typeIsSelf=" + this.toBaseString(test) + ",otherType=" + test.getOtherType().toString() + "]", test.toString());
analyze: testReflectionObjectCycle
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(
analyze: testReflectionArrayAndObjectCycle
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(
analyze: testObjectCycle
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, a.toString());
Invocation:
add validateNullToStringStyleRegistry to all_set
found containsAssert getting True in analyze_invocation, add validateNullToStringStyleRegistry to pure_name_set
qualifier: 
code:         validateNullToStringStyleRegistry();
-------------
-------------
Lang_35
/root/workbench/d4j_buggy/Lang_35/src/test/java//org/apache/commons/lang3/ArrayUtilsAddTest.java
analyze: testLANG571
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("Should have caused IllegalArgumentException");
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("Should have caused IllegalArgumentException");
-------------
-------------
Lang_36
/root/workbench/d4j_buggy/Lang_36/src/test//org/apache/commons/lang3/math/NumberUtilsTest.java
analyze: testCreateNumber
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));
analyze: testIsNumber
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 1 failed", NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 1 failed", checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 2 failed", NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 2 failed", checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 3 failed", NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 3 failed", checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 4 failed", NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 4 failed", checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 5 failed", NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 5 failed", checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 6 failed", NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 6 failed", checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 7 failed", NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 7 failed", checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 8 failed", NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 8 failed", checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 9 failed", NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 9 failed", checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 10 failed", NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 10 failed", checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 11 failed", NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 11 failed", checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 12 failed", NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 12 failed", checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 13 failed", NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 13 failed", checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 14 failed", NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 14 failed", checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 15 failed", NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 15 failed", checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 16 failed", NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 16 failed", checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 17 failed", NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 17 failed", checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 19 failed", NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 19 failed", checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 20 failed", NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 20 failed", checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 21 failed", NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 21 failed", checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 1 Neg failed", !NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 1 Neg failed", !checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 2 Neg failed", !NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 2 Neg failed", !checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 3 Neg failed", !NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 3 Neg failed", !checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 4 Neg failed", !NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 4 Neg failed", !checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 5 Neg failed", !NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 5 Neg failed", !checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 6 Neg failed", !NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 6 Neg failed", !checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 7 Neg failed", !NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 7 Neg failed", !checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 8 Neg failed", !NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 8 Neg failed", !checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 9 Neg failed", !NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 9 Neg failed", !checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 10 Neg failed", !NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 10 Neg failed", !checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 11 Neg failed", !NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 11 Neg failed", !checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 12 Neg failed", !NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 12 Neg failed", !checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 13 Neg failed", !NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 13 Neg failed", !checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 14 Neg failed", !NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 14 Neg failed", !checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 15 Neg failed", !NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 15 Neg failed", !checkCreateNumber(val)); 
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 16 Neg failed", !NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 16 Neg failed", !checkCreateNumber(val)); 
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 17 Neg failed", !NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 17 Neg failed", !checkCreateNumber(val)); 
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 18 Neg failed", !NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 18 Neg failed", !checkCreateNumber(val)); 
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 19 Neg failed", !NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 19 Neg failed", !checkCreateNumber(val)); 
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 20 Neg failed", !NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 20 Neg failed", !checkCreateNumber(val)); 
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 21 Neg failed", !NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 21 Neg failed", !checkCreateNumber(val)); 
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 22 Neg failed", !NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 22 Neg failed", !checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 23 Neg failed", !NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 23 Neg failed", !checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) 24 Neg failed", !NumberUtils.isNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String)/createNumber(String) 24 Neg failed", !checkCreateNumber(val));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("isNumber(String) LANG-521 failed", NumberUtils.isNumber(val));
-------------
-------------
Lang_41
/root/workbench/d4j_buggy/Lang_41/src/test//org/apache/commons/lang/ClassUtilsTest.java
analyze: test_getShortClassName_Class
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("ClassUtils", ClassUtils.getShortClassName(ClassUtils.class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Map.Entry", ClassUtils.getShortClassName(Map.Entry.class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", ClassUtils.getShortClassName((Class) null));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("String[]", ClassUtils.getShortClassName(String[].class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Map.Entry[]", ClassUtils.getShortClassName(Map.Entry[].class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("boolean", ClassUtils.getShortClassName(boolean.class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("byte", ClassUtils.getShortClassName(byte.class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("char", ClassUtils.getShortClassName(char.class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("short", ClassUtils.getShortClassName(short.class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("int", ClassUtils.getShortClassName(int.class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("long", ClassUtils.getShortClassName(long.class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("float", ClassUtils.getShortClassName(float.class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("double", ClassUtils.getShortClassName(double.class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("boolean[]", ClassUtils.getShortClassName(boolean[].class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("byte[]", ClassUtils.getShortClassName(byte[].class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("char[]", ClassUtils.getShortClassName(char[].class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("short[]", ClassUtils.getShortClassName(short[].class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("int[]", ClassUtils.getShortClassName(int[].class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("long[]", ClassUtils.getShortClassName(long[].class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("float[]", ClassUtils.getShortClassName(float[].class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("double[]", ClassUtils.getShortClassName(double[].class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("String[][]", ClassUtils.getShortClassName(String[][].class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("String[][][]", ClassUtils.getShortClassName(String[][][].class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("String[][][][]", ClassUtils.getShortClassName(String[][][][].class));
analyze: test_getPackageName_Class
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("java.lang", ClassUtils.getPackageName(String.class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("java.util", ClassUtils.getPackageName(Map.Entry.class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", ClassUtils.getPackageName((Class)null));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("java.lang", ClassUtils.getPackageName(String[].class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", ClassUtils.getPackageName(boolean[].class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", ClassUtils.getPackageName(byte[].class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", ClassUtils.getPackageName(char[].class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", ClassUtils.getPackageName(short[].class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", ClassUtils.getPackageName(int[].class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", ClassUtils.getPackageName(long[].class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", ClassUtils.getPackageName(float[].class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("", ClassUtils.getPackageName(double[].class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("java.lang", ClassUtils.getPackageName(String[][].class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("java.lang", ClassUtils.getPackageName(String[][][].class));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("java.lang", ClassUtils.getPackageName(String[][][][].class));
-------------
-------------
Lang_42
/root/workbench/d4j_buggy/Lang_42/src/test//org/apache/commons/lang/StringEscapeUtilsTest.java
analyze: testEscapeHtmlHighUnicode
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals( "High unicode was not escaped correctly", "&#119650;", escaped);
-------------
-------------
Lang_46
/root/workbench/d4j_buggy/Lang_46/src/test//org/apache/commons/lang/StringEscapeUtilsTest.java
analyze: testEscapeJavaWithSlash
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, actual);
-------------
-------------
Lang_47
/root/workbench/d4j_buggy/Lang_47/src/test//org/apache/commons/lang/text/StrBuilderTest.java
analyze: testLang412Right
Invocation:
add appendFixedWidthPadRight to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals( "Failed to invoke appendFixedWidthPadRight correctly", "**********", sb.toString());
analyze: testLang412Left
Invocation:
add appendFixedWidthPadLeft to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals( "Failed to invoke appendFixedWidthPadLeft correctly", "**********", sb.toString());
-------------
-------------
Lang_50
/root/workbench/d4j_buggy/Lang_50/src/test//org/apache/commons/lang/time/FastDateFormatTest.java
analyze: test_changeDefault_Locale_DateInstance
Invocation:
add setDefault to all_set
Invocation:
add setDefault to all_set
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to pure_name_set
qualifier: 
code:             assertSame(Locale.GERMANY, format1.getLocale());
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to pure_name_set
qualifier: 
code:             assertSame(Locale.US, format2.getLocale());
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to pure_name_set
qualifier: 
code:             assertSame(Locale.GERMANY, format3.getLocale());
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:             assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:             assertTrue(format2 != format3);
Invocation:
add setDefault to all_set
analyze: test_changeDefault_Locale_DateTimeInstance
Invocation:
add setDefault to all_set
Invocation:
add setDefault to all_set
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to pure_name_set
qualifier: 
code:             assertSame(Locale.GERMANY, format1.getLocale());
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to pure_name_set
qualifier: 
code:             assertSame(Locale.US, format2.getLocale());
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to pure_name_set
qualifier: 
code:             assertSame(Locale.GERMANY, format3.getLocale());
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:             assertTrue(format1 != format2); // -- junit 3.8 version -- assertFalse(format1 == format2);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:             assertTrue(format2 != format3);
Invocation:
add setDefault to all_set
-------------
-------------
Lang_53
/root/workbench/d4j_buggy/Lang_53/src/test//org/apache/commons/lang/time/DateUtilsTest.java
analyze: testRoundLang346
Invocation:
add setDefault to all_set
Invocation:
add setTimeZone to all_set
Invocation:
add set to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Minute Round Up Failed",
Invocation:
add set to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Minute No Round Failed",
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Second Round Up with 600 Milli Seconds Failed",
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Second Round Down with 200 Milli Seconds Failed",
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Second Round Up with 200 Milli Seconds Failed",
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Second Round Down with 200 Milli Seconds Failed",
Invocation:
add set to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Hour Round Down Failed",
Invocation:
add set to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Hour Round Up Failed",
-------------
-------------
Lang_56
/root/workbench/d4j_buggy/Lang_56/src/test//org/apache/commons/lang/time/FastDateFormatTest.java
analyze: testLang303
-------------
-------------
Lang_58
/root/workbench/d4j_buggy/Lang_58/src/test//org/apache/commons/lang/math/NumberUtilsTest.java
analyze: testLang300
Invocation:
add createNumber to all_set
Invocation:
add createNumber to all_set
Invocation:
add createNumber to all_set
-------------
-------------
Lang_60
/root/workbench/d4j_buggy/Lang_60/src/test//org/apache/commons/lang/text/StrBuilderTest.java
analyze: testLang295
Invocation:
add deleteFirst to all_set
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:         assertFalse( "The contains(char) method is looking beyond the end of the string", sb.contains('h'));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals( "The indexOf(char) method is looking beyond the end of the string", -1, sb.indexOf('h'));
-------------
-------------
Lang_62
/root/workbench/d4j_buggy/Lang_62/src/test//org/apache/commons/lang/EntitiesTest.java
analyze: testNumberOverflow
Invocation:
add doTestUnescapeEntity to all_set
found containsAssert getting True in analyze_invocation, add doTestUnescapeEntity to pure_name_set
qualifier: 
code:         doTestUnescapeEntity("&#12345678;", "&#12345678;");
Invocation:
add doTestUnescapeEntity to all_set
found containsAssert getting True in analyze_invocation, add doTestUnescapeEntity to pure_name_set
qualifier: 
code:         doTestUnescapeEntity("x&#12345678;y", "x&#12345678;y");
Invocation:
add doTestUnescapeEntity to all_set
found containsAssert getting True in analyze_invocation, add doTestUnescapeEntity to pure_name_set
qualifier: 
code:         doTestUnescapeEntity("&#x12345678;", "&#x12345678;");
Invocation:
add doTestUnescapeEntity to all_set
found containsAssert getting True in analyze_invocation, add doTestUnescapeEntity to pure_name_set
qualifier: 
code:         doTestUnescapeEntity("x&#x12345678;y", "x&#x12345678;y");
-------------
-------------
Lang_63
/root/workbench/d4j_buggy/Lang_63/src/test//org/apache/commons/lang/time/DurationFormatUtilsTest.java
analyze: testJiraLang281
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("09", result);
-------------
-------------
Lang_64
/root/workbench/d4j_buggy/Lang_64/src/test//org/apache/commons/lang/enums/ValuedEnumTest.java
analyze: testCompareTo_otherEnumType
Invocation:
add compareTo to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
-------------
-------------
Lang_65
/root/workbench/d4j_buggy/Lang_65/src/test//org/apache/commons/lang/time/DateUtilsTest.java
analyze: testTruncateLang59
Invocation:
add setDefault to all_set
Invocation:
add setTimeZone to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT));
Invocation:
add setTime to all_set
Invocation:
add set to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Truncate Calendar.MILLISECOND",
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Truncate Calendar.SECOND",
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Truncate Calendar.MINUTE",
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Truncate Calendar.HOUR_OF_DAY",
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Truncate Calendar.HOUR",
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Truncate Calendar.DATE",
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Round Calendar.MILLISECOND",
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Round Calendar.SECOND",
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Round Calendar.MINUTE",
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Round Calendar.HOUR_OF_DAY",
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Round Calendar.HOUR",
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("Round Calendar.DATE",
Invocation:
add setDefault to all_set
-------------
-------------
Math_1
/root/workbench/d4j_buggy/Math_1/src/test/java//org/apache/commons/math3/fraction/BigFractionTest.java
analyze: testDigitLimitConstructor
Invocation:
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(2, 5, new BigFraction(0.4, 9));
Invocation:
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(2, 5, new BigFraction(0.4, 99));
Invocation:
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(2, 5, new BigFraction(0.4, 999));
Invocation:
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(3, 5, new BigFraction(0.6152, 9));
Invocation:
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(8, 13, new BigFraction(0.6152, 99));
Invocation:
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(510, 829, new BigFraction(0.6152, 999));
Invocation:
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(769, 1250, new BigFraction(0.6152, 9999));
Invocation:
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(1, 2, new BigFraction(0.5000000001, 10));
/root/workbench/d4j_buggy/Math_1/src/test/java//org/apache/commons/math3/fraction/FractionTest.java
analyze: testDigitLimitConstructor
Invocation:
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(2, 5, new Fraction(0.4,   9));
Invocation:
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(2, 5, new Fraction(0.4,  99));
Invocation:
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(2, 5, new Fraction(0.4, 999));
Invocation:
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(3, 5,      new Fraction(0.6152,    9));
Invocation:
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(8, 13,     new Fraction(0.6152,   99));
Invocation:
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(510, 829,  new Fraction(0.6152,  999));
Invocation:
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(769, 1250, new Fraction(0.6152, 9999));
Invocation:
add assertFraction to all_set
found containsAssert getting True in analyze_invocation, add assertFraction to pure_name_set
qualifier: 
code:         assertFraction(1, 2, new Fraction(0.5000000001, 10));
-------------
-------------
Math_4
/root/workbench/d4j_buggy/Math_4/src/test/java//org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java
analyze: testIntersectionNotIntersecting
Invocation:
add assertNull to all_set
#should check: Assert.assertNull
found containsAssert getting True in analyze_invocation, add assertNull to mess_name_set
qualifier: Assert
code:         Assert.assertNull(sub1.intersection(sub2, true));
Invocation:
add assertNull to all_set
found containsAssert getting True in analyze_invocation, add assertNull to mess_name_set
qualifier: Assert
code:         Assert.assertNull(sub1.intersection(sub2, false));
/root/workbench/d4j_buggy/Math_4/src/test/java//org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java
analyze: testIntersectionParallel
Invocation:
add assertNull to all_set
found containsAssert getting True in analyze_invocation, add assertNull to mess_name_set
qualifier: Assert
code:         Assert.assertNull(sub1.intersection(sub2, true));
Invocation:
add assertNull to all_set
found containsAssert getting True in analyze_invocation, add assertNull to mess_name_set
qualifier: Assert
code:         Assert.assertNull(sub1.intersection(sub2, false));
-------------
-------------
Math_6
/root/workbench/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/gradient/NonLinearConjugateGradientOptimizerTest.java
analyze: testTrivial
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(1.5, optimum.getPoint()[0], 1.0e-10);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0.0, optimum.getValue(), 1.0e-10);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getIterations() > 0);
/root/workbench/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/CMAESOptimizerTest.java
analyze: testRosen
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Rosen(), startPoint, insigma, boundaries,
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Rosen(), startPoint, insigma, boundaries,
analyze: testMaximize
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new MinusElli(), startPoint, insigma, boundaries,
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new MinusElli(), startPoint, insigma, boundaries,
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new MinusElli(), startPoint, insigma, boundaries,
analyze: testEllipse
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Elli(), startPoint, insigma, boundaries,
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Elli(), startPoint, insigma, boundaries,
analyze: testElliRotated
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new ElliRotated(), startPoint, insigma, boundaries,
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new ElliRotated(), startPoint, insigma, boundaries,
analyze: testCigar
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Cigar(), startPoint, insigma, boundaries,
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Cigar(), startPoint, insigma, boundaries,
analyze: testCigarWithBoundaries
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Cigar(), startPoint, insigma, boundaries,
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Cigar(), startPoint, insigma, boundaries,
analyze: testTwoAxes
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new TwoAxes(), startPoint, insigma, boundaries,
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new TwoAxes(), startPoint, insigma, boundaries,
analyze: testCigTab
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new CigTab(), startPoint, insigma, boundaries,
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new CigTab(), startPoint, insigma, boundaries,
analyze: testSphere
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Sphere(), startPoint, insigma, boundaries,
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Sphere(), startPoint, insigma, boundaries,
analyze: testTablet
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Tablet(), startPoint, insigma, boundaries,
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Tablet(), startPoint, insigma, boundaries,
analyze: testDiffPow
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new DiffPow(), startPoint, insigma, boundaries,
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new DiffPow(), startPoint, insigma, boundaries,
analyze: testSsDiffPow
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new SsDiffPow(), startPoint, insigma, boundaries,
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new SsDiffPow(), startPoint, insigma, boundaries,
analyze: testAckley
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Ackley(), startPoint, insigma, boundaries,
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Ackley(), startPoint, insigma, boundaries,
analyze: testRastrigin
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Rastrigin(), startPoint, insigma, boundaries,
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Rastrigin(), startPoint, insigma, boundaries,
analyze: testConstrainedRosen
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Rosen(), startPoint, insigma, boundaries,
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Rosen(), startPoint, insigma, boundaries,
analyze: testDiagonalRosen
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(new Rosen(), startPoint, insigma, boundaries,
/root/workbench/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/PowellOptimizerTest.java
analyze: testSumSinc
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9);
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-5);
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:         doTest(func, minPoint, init, GoalType.MINIMIZE, 1e-9, 1e-9, 1e-7);
/root/workbench/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerMultiDirectionalTest.java
analyze: testMinimize1
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 4e-6);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 8e-13);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() > 120);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() < 150);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getIterations() > 0);
analyze: testMinimize2
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 2e-12);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() > 120);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() < 150);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getIterations() > 0);
analyze: testMaximize1
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 7e-7);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-7);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 2e-14);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() > 120);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() < 150);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getIterations() > 0);
analyze: testMaximize2
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 2e-8);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 3e-6);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 2e-12);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() > 180);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() < 220);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getIterations() > 0);
/root/workbench/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/scalar/noderiv/SimplexOptimizerNelderMeadTest.java
analyze: testMinimize1
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 2e-7);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 2e-5);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.valueXmYp, optimum.getValue(), 6e-12);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() > 60);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() < 90);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getIterations() > 0);
analyze: testMinimize2
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 5e-6);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 6e-6);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.valueXpYm, optimum.getValue(), 1e-11);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() > 60);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() < 90);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getIterations() > 0);
analyze: testMaximize1
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.xM, optimum.getPoint()[0], 1e-5);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.yM, optimum.getPoint()[1], 3e-6);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.valueXmYm, optimum.getValue(), 3e-12);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() > 60);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() < 90);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getIterations() > 0);
analyze: testMaximize2
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.xP, optimum.getPoint()[0], 4e-6);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.yP, optimum.getPoint()[1], 5e-6);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(fourExtrema.valueXpYp, optimum.getValue(), 7e-12);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() > 60);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getEvaluations() < 90);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(optimizer.getIterations() > 0);
/root/workbench/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/vector/jacobian/GaussNewtonOptimizerTest.java
/root/workbench/d4j_buggy/Math_6/src/test/java//org/apache/commons/math3/optim/nonlinear/vector/jacobian/LevenbergMarquardtOptimizerTest.java
-------------
-------------
Math_7
/root/workbench/d4j_buggy/Math_7/src/test/java//org/apache/commons/math3/ode/nonstiff/DormandPrince853IntegratorTest.java
analyze: testEventsScheduling
Invocation:
add addEventHandler to all_set
Invocation:
add addStepHandler to all_set
Invocation:
add addEventHandler to all_set
Invocation:
add addStepHandler to all_set
Invocation:
add integrate to all_set
found containsAssert getting True in analyze_invocation, add integrate to mess_name_set
qualifier: integ
code:       integ.integrate(sincos, t0, y0, t, y);
-------------
-------------
Math_8
/root/workbench/d4j_buggy/Math_8/src/test/java//org/apache/commons/math3/distribution/DiscreteRealDistributionTest.java
analyze: testIssue942
Invocation:
add add to all_set
Invocation:
add add to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(1, new DiscreteDistribution<Object>(list).sample(1).length);
-------------
-------------
Math_12
/root/workbench/d4j_buggy/Math_12/src/test/java//org/apache/commons/math3/distribution/GammaDistributionTest.java
/root/workbench/d4j_buggy/Math_12/src/test/java//org/apache/commons/math3/distribution/LogNormalDistributionTest.java
/root/workbench/d4j_buggy/Math_12/src/test/java//org/apache/commons/math3/distribution/NormalDistributionTest.java
-------------
-------------
Math_14
/root/workbench/d4j_buggy/Math_14/src/test/java//org/apache/commons/math3/fitting/PolynomialFitterTest.java
analyze: testLargeSample
Invocation:
add addObservedPoint to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:                 Assert.assertTrue(FastMath.abs(error) < 0.01);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(maxError > 0.001);
-------------
-------------
Math_15
/root/workbench/d4j_buggy/Math_15/src/test/java//org/apache/commons/math3/util/FastMathTest.java
analyze: testMath904
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(Math.pow(x, y),
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(Math.pow(x, -y),
-------------
-------------
Math_16
/root/workbench/d4j_buggy/Math_16/src/test/java//org/apache/commons/math3/util/FastMathTest.java
analyze: testMath905LargePositive
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0, maxErr, 3);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0, maxErr, 3);
analyze: testMath905LargeNegative
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0, maxErr, 3);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0, maxErr, 3);
-------------
-------------
Math_18
/root/workbench/d4j_buggy/Math_18/src/test/java//org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java
analyze: testFitAccuracyDependsOnBoundary
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(resNoBound, resNearLo, 1e-3);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(resNoBound, resNearHi, 1e-3);
-------------
-------------
Math_21
/root/workbench/d4j_buggy/Math_21/src/test/java//org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java
analyze: testFullRank
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(root.subtract(base).getNorm() > 0.3);
analyze: testMath789
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);
-------------
-------------
Math_22
/root/workbench/d4j_buggy/Math_22/src/test/java//org/apache/commons/math3/distribution/FDistributionTest.java
/root/workbench/d4j_buggy/Math_22/src/test/java//org/apache/commons/math3/distribution/UniformRealDistributionTest.java
-------------
-------------
Math_23
/root/workbench/d4j_buggy/Math_23/src/test/java//org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java
analyze: testKeepInitIfBest
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue("Best point not reported", f.value(sol) <= f.value(expected));
-------------
-------------
Math_24
/root/workbench/d4j_buggy/Math_24/src/test/java//org/apache/commons/math3/optimization/univariate/BrentOptimizerTest.java
analyze: testMath855
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue("Best point not reported", f.value(sol) <= f.value(expected));
-------------
-------------
Math_26
/root/workbench/d4j_buggy/Math_26/src/test/java//org/apache/commons/math3/fraction/FractionTest.java
analyze: testIntegerOverflow
Invocation:
add checkIntegerOverflow to all_set
found containsAssert getting True in analyze_invocation, add checkIntegerOverflow to pure_name_set
qualifier: 
code:         checkIntegerOverflow(0.75000000001455192);
Invocation:
add checkIntegerOverflow to all_set
found containsAssert getting True in analyze_invocation, add checkIntegerOverflow to pure_name_set
qualifier: 
code:         checkIntegerOverflow(1.0e10);
Invocation:
add checkIntegerOverflow to all_set
found containsAssert getting True in analyze_invocation, add checkIntegerOverflow to pure_name_set
qualifier: 
code:         checkIntegerOverflow(-1.0e10);
Invocation:
add checkIntegerOverflow to all_set
found containsAssert getting True in analyze_invocation, add checkIntegerOverflow to pure_name_set
qualifier: 
code:         checkIntegerOverflow(-43979.60679604749);
-------------
-------------
Math_28
/root/workbench/d4j_buggy/Math_28/src/test/java//org/apache/commons/math3/optimization/linear/SimplexSolverTest.java
analyze: testMath828Cycle
Invocation:
add add to all_set
Invocation:
add add to all_set
Invocation:
add add to all_set
Invocation:
add add to all_set
Invocation:
add add to all_set
Invocation:
add add to all_set
Invocation:
add add to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(1.0d, solution.getValue(), epsilon);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(validSolution(solution, constraints, epsilon));        
-------------
-------------
Math_29
/root/workbench/d4j_buggy/Math_29/src/test/java//org/apache/commons/math3/linear/SparseRealVectorTest.java
-------------
-------------
Math_31
/root/workbench/d4j_buggy/Math_31/src/test/java//org/apache/commons/math3/distribution/BinomialDistributionTest.java
analyze: testMath718
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:             Assert.assertEquals(trials / 2, p);
/root/workbench/d4j_buggy/Math_31/src/test/java//org/apache/commons/math3/distribution/FDistributionTest.java
analyze: testMath785
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:             Assert.assertTrue(result < 1.0);
Invocation:
add fail to all_set
#should check: Assert.fail
found containsAssert getting True in analyze_invocation, add fail to mess_name_set
qualifier: Assert
code:             Assert.fail("Failing to calculate inverse cumulative probability");
-------------
-------------
Math_35
/root/workbench/d4j_buggy/Math_35/src/test/java//org/apache/commons/math3/genetics/ElitisticListPopulationTest.java
analyze: testConstructorTooLow
analyze: testConstructorTooHigh
analyze: testChromosomeListConstructorTooLow
analyze: testChromosomeListConstructorTooHigh
-------------
-------------
Math_36
/root/workbench/d4j_buggy/Math_36/src/test/java//org/apache/commons/math/fraction/BigFractionTest.java
analyze: testDoubleValueForLargeNumeratorAndDenominator
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(5, large.doubleValue(), 1e-15);
analyze: testFloatValueForLargeNumeratorAndDenominator
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(5, large.floatValue(), 1e-15);
-------------
-------------
Math_37
/root/workbench/d4j_buggy/Math_37/src/test/java//org/apache/commons/math/complex/ComplexTest.java
analyze: testTan
Invocation:
add assertEquals to all_set
#should check: TestUtils.assertEquals
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertEquals(expected, z.tan(), 1.0e-5);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertEquals(expected, actual, 1.0e-5);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertEquals(expected, actual, 1.0e-5);
analyze: testTanInf
Invocation:
add assertSame to all_set
#should check: TestUtils.assertSame
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.NaN, infOne.tan());
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.NaN, negInfOne.tan());
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.NaN, infInf.tan());
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.NaN, infNegInf.tan());
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.NaN, negInfInf.tan());
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());
analyze: testTanh
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertEquals(expected, z.tanh(), 1.0e-5);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertEquals(expected, actual, 1.0e-5);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertEquals(expected, actual, 1.0e-5);
analyze: testTanhInf
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.NaN, oneInf.tanh());
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.NaN, infInf.tanh());
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.NaN, infNegInf.tanh());
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.NaN, negInfInf.tanh());
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to mess_name_set
qualifier: TestUtils
code:         TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());
-------------
-------------
Math_38
/root/workbench/d4j_buggy/Math_38/src/test/java//org/apache/commons/math/optimization/direct/BOBYQAOptimizerTest.java
analyze: testConstrainedRosenWithMoreInterpolationPoints
Invocation:
add doTest to all_set
found containsAssert getting True in analyze_invocation, add doTest to pure_name_set
qualifier: 
code:             doTest(new Rosen(), startPoint, boundaries,
-------------
-------------
Math_40
/root/workbench/d4j_buggy/Math_40/src/test/java//org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java
analyze: testIssue716
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0, sharpTurn.value(result), solver.getFunctionValueAccuracy());
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(sharpTurn.value(result) >= 0);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(-0.5, result, 1.0e-10);
-------------
-------------
Math_43
/root/workbench/d4j_buggy/Math_43/src/test/java//org/apache/commons/math/stat/descriptive/SummaryStatisticsTest.java
analyze: testOverrideVarianceWithMathClass
Invocation:
add setVarianceImpl to all_set
Invocation:
add addValue to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals((new Variance(false)).evaluate(scores),stats.getVariance(), 0); 
analyze: testOverrideMeanWithMathClass
Invocation:
add setMeanImpl to all_set
Invocation:
add addValue to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals((new Mean()).evaluate(scores),stats.getMean(), 0); 
analyze: testOverrideGeoMeanWithMathClass
Invocation:
add setGeoMeanImpl to all_set
Invocation:
add addValue to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals((new GeometricMean()).evaluate(scores),stats.getGeometricMean(), 0); 
/root/workbench/d4j_buggy/Math_43/src/test/java//org/apache/commons/math/stat/descriptive/SynchronizedSummaryStatisticsTest.java
-------------
-------------
Math_44
/root/workbench/d4j_buggy/Math_44/src/test/java//org/apache/commons/math/ode/events/EventStateTest.java
analyze: testIssue695
Invocation:
add addEventHandler to all_set
Invocation:
add addEventHandler to all_set
Invocation:
add setInitialStepSize to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(target, tEnd, 1.0e-10);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(32.0, y[0], 1.0e-10);
-------------
-------------
Math_46
/root/workbench/d4j_buggy/Math_46/src/test/java//org/apache/commons/math/complex/ComplexTest.java
analyze: testDivideZero
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(z, Complex.NaN);
analyze: testAtanI
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(Complex.I.atan().isNaN());
-------------
-------------
Math_47
/root/workbench/d4j_buggy/Math_47/src/test/java//org/apache/commons/math/complex/ComplexTest.java
analyze: testDivideZero
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(z, Complex.INF);
analyze: testAtanI
Invocation:
add println to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:         Assert.assertTrue(Complex.I.atan().isInfinite());
-------------
-------------
Math_49
/root/workbench/d4j_buggy/Math_49/src/test/java//org/apache/commons/math/linear/SparseRealVectorTest.java
analyze: testConcurrentModification
Invocation:
add setEntry to all_set
Invocation:
add setEntry to all_set
Invocation:
add setEntry to all_set
Invocation:
add setEntry to all_set
Invocation:
add setEntry to all_set
Invocation:
add setEntry to all_set
-------------
-------------
Math_51
/root/workbench/d4j_buggy/Math_51/src/test/java//org/apache/commons/math/analysis/solvers/RegulaFalsiSolverTest.java
analyze: testIssue631
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(3.4341896575482003, root, 1e-15);
-------------
-------------
Math_52
/root/workbench/d4j_buggy/Math_52/src/test/java//org/apache/commons/math/geometry/euclidean/threed/RotationTest.java
analyze: testIssue639
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);
-------------
-------------
Math_54
/root/workbench/d4j_buggy/Math_54/src/test/java//org/apache/commons/math/dfp/DfpTest.java
analyze: testIssue567
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), MathUtils.SAFE_MIN);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), MathUtils.EPSILON);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), MathUtils.EPSILON);
-------------
-------------
Math_61
/root/workbench/d4j_buggy/Math_61/src/test/java//org/apache/commons/math/distribution/PoissonDistributionTest.java
analyze: testMean
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("negative mean: NotStrictlyPositiveException expected");
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(10.0, dist.getMean(), 0.0);
-------------
-------------
Math_62
/root/workbench/d4j_buggy/Math_62/src/test/java//org/apache/commons/math/optimization/univariate/MultiStartUnivariateRealOptimizerTest.java
analyze: testQuinticMin
Invocation:
add setMaxEvaluations to all_set
Invocation:
add setSeed to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-0.2719561293, optimum.getPoint(), 1e-9);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-0.0443342695, optimum.getValue(), 1e-9);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals(f.value(optima[i].getPoint()), optima[i].getValue(), 1e-9);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(optimizer.getEvaluations() >= 50);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(optimizer.getEvaluations() <= 100);
-------------
-------------
Math_64
/root/workbench/d4j_buggy/Math_64/src/test/java//org/apache/commons/math/optimization/general/MinpackTest.java
analyze: testMinpackFreudensteinRoth
Invocation:
add minpackTest to all_set
found containsAssert getting True in analyze_invocation, add minpackTest to pure_name_set
qualifier: 
code:     minpackTest(new FreudensteinRothFunction(new double[] { 0.5, -2.0 },
Invocation:
add minpackTest to all_set
found containsAssert getting True in analyze_invocation, add minpackTest to pure_name_set
qualifier: 
code:     minpackTest(new FreudensteinRothFunction(new double[] { 5.0, -20.0 },
Invocation:
add minpackTest to all_set
found containsAssert getting True in analyze_invocation, add minpackTest to pure_name_set
qualifier: 
code:     minpackTest(new FreudensteinRothFunction(new double[] { 50.0, -200.0 },
analyze: testMinpackJennrichSampson
Invocation:
add minpackTest to all_set
found containsAssert getting True in analyze_invocation, add minpackTest to pure_name_set
qualifier: 
code:     minpackTest(new JennrichSampsonFunction(10, new double[] { 0.3, 0.4 },
-------------
-------------
Math_65
/root/workbench/d4j_buggy/Math_65/src/test/java//org/apache/commons/math/optimization/general/LevenbergMarquardtOptimizerTest.java
analyze: testCircleFitting
Invocation:
add addPoint to all_set
Invocation:
add addPoint to all_set
Invocation:
add addPoint to all_set
Invocation:
add addPoint to all_set
Invocation:
add addPoint to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(optimizer.getEvaluations() < 10);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(optimizer.getJacobianEvaluations() < 10);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.768262623567235,  Math.sqrt(circle.getN()) * rms,  1.0e-10);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(69.96016176931406, circle.getRadius(center), 1.0e-10);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(96.07590211815305, center.x,      1.0e-10);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(48.13516790438953, center.y,      1.0e-10);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.839, cov[0][0], 0.001);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0.731, cov[0][1], 0.001);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(cov[0][1], cov[1][0], 1.0e-14);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0.786, cov[1][1], 0.001);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.384, errors[0], 0.001);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0.905, errors[1], 0.001);
Invocation:
add addPoint to all_set
Invocation:
add fill to all_set
Invocation:
add fill to all_set
Invocation:
add optimize to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0.0016, cov[0][0], 0.001);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(3.2e-7, cov[0][1], 1.0e-9);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(cov[0][1], cov[1][0], 1.0e-14);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0.0016, cov[1][1], 0.001);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0.004, errors[0], 0.001);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0.004, errors[1], 0.001);
-------------
-------------
Math_66
/root/workbench/d4j_buggy/Math_66/src/test/java//org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java
analyze: testSinMin
Invocation:
add setSeed to all_set
Invocation:
add optimize to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:             assertTrue (Math.abs(d - Math.rint(d)) < 1.0e-8);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals(-1.0, f.value(optima[i]), 1.0e-10);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getEvaluations() > 150);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getEvaluations() < 250);
analyze: testQuinticMin
Invocation:
add setRelativeAccuracy to all_set
Invocation:
add setSeed to all_set
Invocation:
add setAbsoluteAccuracy to all_set
Invocation:
add setRelativeAccuracy to all_set
Invocation:
add getOptima to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("an exception should have been thrown");
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("wrong exception caught");
Invocation:
add getOptimaValues to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("an exception should have been thrown");
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("wrong exception caught");
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-0.2719561270319131, result, 1.0e-13);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-0.2719561270319131, minimizer.getResult(), 1.0e-13);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-0.04433426954946637, minimizer.getFunctionValue(), 1.0e-13);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getEvaluations()    >= 120);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getEvaluations()    <= 170);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getIterationCount() >= 120);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getIterationCount() <= 170);
/root/workbench/d4j_buggy/Math_66/src/test/java//org/apache/commons/math/optimization/univariate/BrentOptimizerTest.java
analyze: testSinMin
Invocation:
add setMaxEvaluations to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(200, minimizer.getMaxEvaluations());
Invocation:
add getResult to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("an exception should have been thrown");
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("wrong exception caught");
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 4, 5), 10 * minimizer.getRelativeAccuracy());
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getIterationCount() <= 50);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(3 * Math.PI / 2, minimizer.optimize(f, GoalType.MINIMIZE, 1, 5), 10 * minimizer.getRelativeAccuracy());
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getIterationCount() <= 50);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getEvaluations()    <= 100);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getEvaluations()    >=  15);
Invocation:
add setMaxEvaluations to all_set
Invocation:
add optimize to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("an exception should have been thrown");
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("wrong exception caught");
analyze: testQuinticMinStatistics
Invocation:
add setRelativeAccuracy to all_set
Invocation:
add setAbsoluteAccuracy to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(meanOptValue > -0.27195612812 && meanOptValue < -0.27195612811);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(medianIter, 17, Math.ulp(1d));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(medianEval, 18, Math.ulp(1d));
-------------
-------------
Math_67
/root/workbench/d4j_buggy/Math_67/src/test/java//org/apache/commons/math/optimization/MultiStartUnivariateRealOptimizerTest.java
analyze: testQuinticMin
Invocation:
add setSeed to all_set
Invocation:
add setAbsoluteAccuracy to all_set
Invocation:
add setRelativeAccuracy to all_set
Invocation:
add getOptima to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("an exception should have been thrown");
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("wrong exception caught");
Invocation:
add getOptimaValues to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("an exception should have been thrown");
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("wrong exception caught");
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-0.27195612846834, minimizer.optimize(f, GoalType.MINIMIZE, -0.3, -0.2), 1.0e-13);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-0.27195612846834, minimizer.getResult(), 1.0e-13);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-0.04433426954946, minimizer.getFunctionValue(), 1.0e-13);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals(f.value(optima[i]), optimaValues[i], 1.0e-10);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getEvaluations()    >= 510);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getEvaluations()    <= 530);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getIterationCount() >= 150);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(minimizer.getIterationCount() <= 170);
-------------
-------------
Math_68
/root/workbench/d4j_buggy/Math_68/src/test/java//org/apache/commons/math/optimization/general/MinpackTest.java
analyze: testMinpackFreudensteinRoth
Invocation:
add minpackTest to all_set
found containsAssert getting True in analyze_invocation, add minpackTest to pure_name_set
qualifier: 
code:     minpackTest(new FreudensteinRothFunction(new double[] { 0.5, -2.0 },
Invocation:
add minpackTest to all_set
found containsAssert getting True in analyze_invocation, add minpackTest to pure_name_set
qualifier: 
code:     minpackTest(new FreudensteinRothFunction(new double[] { 5.0, -20.0 },
Invocation:
add minpackTest to all_set
found containsAssert getting True in analyze_invocation, add minpackTest to pure_name_set
qualifier: 
code:     minpackTest(new FreudensteinRothFunction(new double[] { 50.0, -200.0 },
analyze: testMinpackJennrichSampson
Invocation:
add minpackTest to all_set
found containsAssert getting True in analyze_invocation, add minpackTest to pure_name_set
qualifier: 
code:     minpackTest(new JennrichSampsonFunction(10, new double[] { 0.3, 0.4 },
-------------
-------------
Math_71
/root/workbench/d4j_buggy/Math_71/src/test/java//org/apache/commons/math/ode/nonstiff/ClassicalRungeKuttaIntegratorTest.java
analyze: testMissedEndEvent
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(tEvent, finalT, 5.0e-6);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:           Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
#SubStatementExpression exists
StatementExpression(expression=MethodInvocation(arguments=[ClassCreator(arguments=[], body=[MethodDeclaration(annotations=[], body=[], documentation=None, modifiers={'public'}, name=resetState, parameters=[FormalParameter(annotations=[], modifiers=set(), name=t, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[None], name=double), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=BinaryOperation(operandl=MemberReference(member=t, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=tEvent, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), label=None)], documentation=None, modifiers={'public'}, name=g, parameters=[FormalParameter(annotations=[], modifiers=set(), name=t, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[None], name=double), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=tEvent, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=t, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5.0e-6)], member=assertEquals, postfix_operators=[], prefix_operators=[], qualifier=Assert, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=MemberReference(member=CONTINUE, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=eventOccurred, parameters=[FormalParameter(annotations=[], modifiers=set(), name=t, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=increasing, type=BasicType(dimensions=[], name=boolean), varargs=False)], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None)], constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=EventHandler, sub_type=None)), MemberReference(member=POSITIVE_INFINITY, postfix_operators=[], prefix_operators=[], qualifier=Double, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0e-20), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=100)], member=addEventHandler, postfix_operators=[], prefix_operators=[], qualifier=integrator, selectors=[], type_arguments=None), label=None)
Invocation:
add addEventHandler to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:               Assert.assertEquals(tEvent, t, 5.0e-6);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:           Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
/root/workbench/d4j_buggy/Math_71/src/test/java//org/apache/commons/math/ode/nonstiff/DormandPrince853IntegratorTest.java
analyze: testMissedEndEvent
Invocation:
add setInitialStepSize to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(tEvent, finalT, 5.0e-6);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:           Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
Invocation:
add setInitialStepSize to all_set
#SubStatementExpression exists
StatementExpression(expression=MethodInvocation(arguments=[ClassCreator(arguments=[], body=[MethodDeclaration(annotations=[], body=[], documentation=None, modifiers={'public'}, name=resetState, parameters=[FormalParameter(annotations=[], modifiers=set(), name=t, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[None], name=double), varargs=False)], return_type=None, throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[ReturnStatement(expression=BinaryOperation(operandl=MemberReference(member=t, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operandr=MemberReference(member=tEvent, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), operator=-), label=None)], documentation=None, modifiers={'public'}, name=g, parameters=[FormalParameter(annotations=[], modifiers=set(), name=t, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[None], name=double), varargs=False)], return_type=BasicType(dimensions=[], name=double), throws=None, type_parameters=None), MethodDeclaration(annotations=[], body=[StatementExpression(expression=MethodInvocation(arguments=[MemberReference(member=tEvent, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), MemberReference(member=t, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=5.0e-6)], member=assertEquals, postfix_operators=[], prefix_operators=[], qualifier=Assert, selectors=[], type_arguments=None), label=None), ReturnStatement(expression=MemberReference(member=CONTINUE, postfix_operators=[], prefix_operators=[], qualifier=, selectors=[]), label=None)], documentation=None, modifiers={'public'}, name=eventOccurred, parameters=[FormalParameter(annotations=[], modifiers=set(), name=t, type=BasicType(dimensions=[], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=y, type=BasicType(dimensions=[None], name=double), varargs=False), FormalParameter(annotations=[], modifiers=set(), name=increasing, type=BasicType(dimensions=[], name=boolean), varargs=False)], return_type=BasicType(dimensions=[], name=int), throws=None, type_parameters=None)], constructor_type_arguments=None, postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], type=ReferenceType(arguments=None, dimensions=None, name=EventHandler, sub_type=None)), MemberReference(member=POSITIVE_INFINITY, postfix_operators=[], prefix_operators=[], qualifier=Double, selectors=[]), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=1.0e-20), Literal(postfix_operators=[], prefix_operators=[], qualifier=None, selectors=[], value=100)], member=addEventHandler, postfix_operators=[], prefix_operators=[], qualifier=integrator, selectors=[], type_arguments=None), label=None)
Invocation:
add addEventHandler to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:               Assert.assertEquals(tEvent, t, 5.0e-6);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(tEvent + 120, finalT, 5.0e-6);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:           Assert.assertEquals(y0[i] * Math.exp(k[i] * (finalT - t0)), y[i], 1.0e-9);
-------------
-------------
Math_72
/root/workbench/d4j_buggy/Math_72/src/test/java//org/apache/commons/math/analysis/solvers/BrentSolverTest.java
analyze: testRootEndpoints
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Math.PI, result, solver.getAbsoluteAccuracy());
-------------
-------------
Math_74
/root/workbench/d4j_buggy/Math_74/src/test/java//org/apache/commons/math/ode/nonstiff/AdamsMoultonIntegratorTest.java
analyze: polynomial
Invocation:
add addStepHandler to all_set
Invocation:
add integrate to all_set
found containsAssert getting True in analyze_invocation, add integrate to mess_name_set
qualifier: integ
code:             integ.integrate(pb, pb.getInitialTime(), pb.getInitialState(),
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:                 assertTrue(integ.getEvaluations() > 140);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:                 assertTrue(integ.getEvaluations() < 90);
-------------
-------------
Math_76
/root/workbench/d4j_buggy/Math_76/src/test/java//org/apache/commons/math/linear/SingularValueSolverTest.java
analyze: testMath320A
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(reference.length, singularValues.length);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:             Assert.assertEquals(reference[i], singularValues[i], 4.0e-13);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0.0, recomposed.subtract(rm).getNorm(), 5.0e-13);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(rm.getColumnDimension(), resSVD.length);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:                     Assert.assertTrue((residual(rm, x, b) - svdMinResidual) > -epsilon);
analyze: testMath320B
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:         Assert.assertEquals(0.0, recomposed.subtract(rm).getNorm(), 2.0e-15);
-------------
-------------
Math_77
/root/workbench/d4j_buggy/Math_77/src/test/java//org/apache/commons/math/linear/ArrayRealVectorTest.java
analyze: testBasicFunctions
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ", 17.0, d_getL1Norm);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ", 6.0, d_getLInfNorm);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ",9d, d_getL1Distance );
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ",9d, d_getL1Distance_2 );
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ",9d, d_getL1Distance_3 );
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ",3d, d_getLInfDistance );
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ",3d, d_getLInfDistance_2 );
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ",3d, d_getLInfDistance_3 );
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare val ",32d, dot);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare val ",32d, dot_2);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);
Invocation:
add unitVector to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("Expecting ArithmeticException");
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("wrong exception caught");
Invocation:
add unitize to all_set
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);
Invocation:
add unitize to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("Expecting ArithmeticException");
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("wrong exception caught");
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);
/root/workbench/d4j_buggy/Math_77/src/test/java//org/apache/commons/math/linear/SparseRealVectorTest.java
analyze: testBasicFunctions
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ", 17.0, d_getL1Norm);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ", 6.0, d_getLInfNorm);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ",9d, d_getL1Distance );
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ",9d, d_getL1Distance_2 );
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ",3d, d_getLInfDistance );
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare values  ",3d, d_getLInfDistance_2 );
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare val ",32d, dot);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare val ",32d, dot_2);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);
Invocation:
add unitVector to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("Expecting ArithmeticException");
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("wrong exception caught");
Invocation:
add unitize to all_set
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);
Invocation:
add unitize to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("Expecting ArithmeticException");
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("wrong exception caught");
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);
Invocation:
add assertClose to all_set
found containsAssert getting True in analyze_invocation, add assertClose to pure_name_set
qualifier: 
code:         assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);
-------------
-------------
Math_79
/root/workbench/d4j_buggy/Math_79/src/test/java//org/apache/commons/math/stat/clustering/KMeansPlusPlusClustererTest.java
analyze: testPerformClusterAnalysisDegenerate
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, clusters.size());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(2, (clusters.get(0).getPoints().size()));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(clusters.get(0).getPoints().contains(pt1));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(clusters.get(0).getPoints().contains(pt2));
-------------
-------------
Math_81
/root/workbench/d4j_buggy/Math_81/src/test/java//org/apache/commons/math/linear/EigenDecompositionImplTest.java
analyze: testMath308
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals(refEigenValues[i], eigenValues[i], 1.0e-5);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals(0, refEigenVectors[i].subtract(decomposition.getEigenvector(i)).getNorm(), 2.0e-7);
-------------
-------------
Math_83
/root/workbench/d4j_buggy/Math_83/src/test/java//org/apache/commons/math/optimization/linear/SimplexSolverTest.java
analyze: testMath286
Invocation:
add add to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:       assertEquals(6.9, solution.getValue(), .0000001);
-------------
-------------
Math_84
/root/workbench/d4j_buggy/Math_84/src/test/java//org/apache/commons/math/optimization/direct/MultiDirectionalTest.java
analyze: testMinimizeMaximize
Invocation:
add setConvergenceChecker to all_set
Invocation:
add setMaxIterations to all_set
Invocation:
add setStartConfiguration to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(xM,        optimum.getPoint()[0], 4.0e-6);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(yP,        optimum.getPoint()[1], 3.0e-6);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(valueXmYp, optimum.getValue(),    8.0e-13);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:       Assert.assertTrue(optimizer.getEvaluations() > 120);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:       Assert.assertTrue(optimizer.getEvaluations() < 150);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(xP,        optimum.getPoint()[0], 2.0e-8);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(yM,        optimum.getPoint()[1], 3.0e-6);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(valueXpYm, optimum.getValue(),    2.0e-12);              
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:       Assert.assertTrue(optimizer.getEvaluations() > 120);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:       Assert.assertTrue(optimizer.getEvaluations() < 150);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(xM,        optimum.getPoint()[0], 7.0e-7);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(yM,        optimum.getPoint()[1], 3.0e-7);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(valueXmYm, optimum.getValue(),    2.0e-14);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:       Assert.assertTrue(optimizer.getEvaluations() > 120);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:       Assert.assertTrue(optimizer.getEvaluations() < 150);
Invocation:
add setConvergenceChecker to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(xP,        optimum.getPoint()[0], 2.0e-8);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(yP,        optimum.getPoint()[1], 3.0e-6);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(valueXpYp, optimum.getValue(),    2.0e-12);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:       Assert.assertTrue(optimizer.getEvaluations() > 180);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:       Assert.assertTrue(optimizer.getEvaluations() < 220);
analyze: testMath283
Invocation:
add setMaxIterations to all_set
Invocation:
add setMaxEvaluations to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(expectedMaximum, actualMaximum, EPSILON);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(expectedPosition[0], actualPosition[0], EPSILON );
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to mess_name_set
qualifier: Assert
code:       Assert.assertEquals(expectedPosition[1], actualPosition[1], EPSILON );
-------------
-------------
Math_86
/root/workbench/d4j_buggy/Math_86/src/test//org/apache/commons/math/linear/CholeskyDecompositionImplTest.java
analyze: testNotPositiveDefinite
Invocation:
add println to all_set
analyze: testMath274
-------------
-------------
Math_88
/root/workbench/d4j_buggy/Math_88/src/test//org/apache/commons/math/optimization/linear/SimplexSolverTest.java
analyze: testMath272
Invocation:
add add to all_set
Invocation:
add add to all_set
Invocation:
add add to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0.0, solution.getPoint()[0], .0000001);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.0, solution.getPoint()[1], .0000001);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1.0, solution.getPoint()[2], .0000001);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(3.0, solution.getValue(), .0000001);
-------------
-------------
Math_90
/root/workbench/d4j_buggy/Math_90/src/test//org/apache/commons/math/stat/FrequencyTest.java
analyze: testAddNonComparable
Invocation:
add addValue to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("Expected ClassCastException");
Invocation:
add clear to all_set
Invocation:
add addValue to all_set
Invocation:
add addValue to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("Expected ClassCastException"); // Previously would have been IllegalArgument
-------------
-------------
Math_92
/root/workbench/d4j_buggy/Math_92/src/test//org/apache/commons/math/util/MathUtilsTest.java
analyze: testBinomialCoefficientLarge
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:                 assertEquals(n+","+k, shouldThrow, didThrow);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:                 assertEquals(n+","+k, exactResult, ourResult);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:                 assertTrue(n+","+k, (n > 66 || !didThrow));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(exactResult, ourResult);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(exactResult, ourResult);
Invocation:
add binomialCoefficient to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("Expecting ArithmeticException");
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals(exactResult, ourResult);
-------------
-------------
Math_93
/root/workbench/d4j_buggy/Math_93/src/test//org/apache/commons/math/util/MathUtilsTest.java
analyze: testFactorial
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals(i + "! ", factorial(i), MathUtils.factorial(i));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals(i + "! ", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals(i + "! ", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("0", 1, MathUtils.factorial(0));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("0", 1.0d, MathUtils.factorialDouble(0), 1E-14);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("0", 0.0d, MathUtils.factorialLog(0), 1E-14);
-------------
-------------
Math_95
/root/workbench/d4j_buggy/Math_95/src/test//org/apache/commons/math/distribution/FDistributionTest.java
analyze: testSmallDegreesOfFreedom
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0.975, x, 1.0e-5);
Invocation:
add setDenominatorDegreesOfFreedom to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0.975, x, 1.0e-5);
-------------
-------------
Math_97
/root/workbench/d4j_buggy/Math_97/src/test//org/apache/commons/math/analysis/BrentSolverTest.java
analyze: testRootEndpoints
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(result, Math.PI, solver.getAbsoluteAccuracy());
-------------
-------------
Math_98
/root/workbench/d4j_buggy/Math_98/src/test//org/apache/commons/math/linear/BigMatrixImplTest.java
analyze: testMath209
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(a.getRowDimension(), b.length);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals( 3.0, b[0].doubleValue(), 1.0e-12);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals( 7.0, b[1].doubleValue(), 1.0e-12);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(11.0, b[2].doubleValue(), 1.0e-12);
/root/workbench/d4j_buggy/Math_98/src/test//org/apache/commons/math/linear/RealMatrixImplTest.java
analyze: testMath209
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(a.getRowDimension(), b.length);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals( 3.0, b[0], 1.0e-12);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals( 7.0, b[1], 1.0e-12);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(11.0, b[2], 1.0e-12);
-------------
-------------
Math_99
/root/workbench/d4j_buggy/Math_99/src/test//org/apache/commons/math/util/MathUtilsTest.java
analyze: testGcd
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, MathUtils.gcd(0, 0));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(b, MathUtils.gcd(0, b));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(a, MathUtils.gcd(a, 0));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(b, MathUtils.gcd(0, -b));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(a, MathUtils.gcd(-a, 0));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(10, MathUtils.gcd(a, b));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(10, MathUtils.gcd(-a, b));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(10, MathUtils.gcd(a, -b));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(10, MathUtils.gcd(-a, -b));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, MathUtils.gcd(a, c));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, MathUtils.gcd(-a, c));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, MathUtils.gcd(a, -c));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, MathUtils.gcd(-a, -c));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(3 * (1<<15), MathUtils.gcd(3 * (1<<20), 9 * (1<<15)));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Integer.MAX_VALUE, MathUtils.gcd(Integer.MAX_VALUE, 0));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(Integer.MAX_VALUE, MathUtils.gcd(-Integer.MAX_VALUE, 0));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1<<30, MathUtils.gcd(1<<30, -Integer.MIN_VALUE));
Invocation:
add gcd to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("expecting ArithmeticException");
Invocation:
add gcd to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("expecting ArithmeticException");
Invocation:
add gcd to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("expecting ArithmeticException");
analyze: testLcm
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, MathUtils.lcm(0, b));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, MathUtils.lcm(a, 0));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(b, MathUtils.lcm(1, b));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(a, MathUtils.lcm(a, 1));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(150, MathUtils.lcm(a, b));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(150, MathUtils.lcm(-a, b));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(150, MathUtils.lcm(a, -b));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(150, MathUtils.lcm(-a, -b));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(2310, MathUtils.lcm(a, c));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals((1<<20)*15, MathUtils.lcm((1<<20)*3, (1<<20)*5));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, MathUtils.lcm(0, 0));
Invocation:
add lcm to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("Expecting ArithmeticException");
Invocation:
add lcm to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("Expecting ArithmeticException");
Invocation:
add lcm to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("Expecting ArithmeticException");
-------------
-------------
Math_100
/root/workbench/d4j_buggy/Math_100/src/test//org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java
analyze: testBoundParameters
Invocation:
add estimate to all_set
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:       assertTrue(estimator.getRMS(problem) < 1.0e-10);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:       assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:       assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:       assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:       assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:       assertEquals(0, errors[i0], 1.0e-10);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:       assertEquals(0, errors[i1], 1.0e-10);
-------------
-------------
Math_102
/root/workbench/d4j_buggy/Math_102/src/test//org/apache/commons/math/stat/inference/ChiSquareFactoryTest.java
/root/workbench/d4j_buggy/Math_102/src/test//org/apache/commons/math/stat/inference/ChiSquareTestTest.java
analyze: testChiSquare
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("chi-square statistic", 0.2,  testStatistic.chiSquare(expected, observed), 10E-12);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("chi-square p-value", 0.904837418036, testStatistic.chiSquareTest(expected, observed), 1E-10);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals( "chi-square test statistic", 9.023307936427388, testStatistic.chiSquare(expected1, observed1), 1E-10);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("chi-square p-value", 0.06051952647453607, testStatistic.chiSquareTest(expected1, observed1), 1E-9);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("chi-square test reject", testStatistic.chiSquareTest(expected1, observed1, 0.08));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("chi-square test accept", !testStatistic.chiSquareTest(expected1, observed1, 0.05));
Invocation:
add chiSquareTest to all_set
found containsAssert getting True in analyze_invocation, add chiSquareTest to mess_name_set
qualifier: testStatistic
code:             testStatistic.chiSquareTest(expected1, observed1, 95);
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("alpha out of range, IllegalArgumentException expected");
Invocation:
add chiSquare to all_set
found containsAssert getting True in analyze_invocation, add chiSquare to mess_name_set
qualifier: testStatistic
code:             testStatistic.chiSquare(tooShortEx, tooShortObs);
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("arguments too short, IllegalArgumentException expected");
Invocation:
add chiSquare to all_set
found containsAssert getting True in analyze_invocation, add chiSquare to mess_name_set
qualifier: testStatistic
code:             testStatistic.chiSquare(unMatchedEx, unMatchedObs);
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("arrays have different lengths, IllegalArgumentException expected");
Invocation:
add chiSquareTest to all_set
found containsAssert getting True in analyze_invocation, add chiSquareTest to mess_name_set
qualifier: testStatistic
code:             testStatistic.chiSquareTest(expected, observed, .01);
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("bad expected count, IllegalArgumentException expected");
Invocation:
add chiSquareTest to all_set
found containsAssert getting True in analyze_invocation, add chiSquareTest to mess_name_set
qualifier: testStatistic
code:             testStatistic.chiSquareTest(expected, observed, .01);
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("bad expected count, IllegalArgumentException expected");
analyze: testChiSquareLargeTestStatistic
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("chi-square p-value", 0.0, cst, 1E-3);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals( "chi-square test statistic", 
/root/workbench/d4j_buggy/Math_102/src/test//org/apache/commons/math/stat/inference/TestUtilsTest.java
analyze: testChiSquare
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("chi-square statistic", 0.2,  TestUtils.chiSquare(expected, observed), 10E-12);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("chi-square p-value", 0.904837418036, TestUtils.chiSquareTest(expected, observed), 1E-10);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals( "chi-square test statistic", 9.023307936427388, TestUtils.chiSquare(expected1, observed1), 1E-10);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("chi-square p-value", 0.06051952647453607, TestUtils.chiSquareTest(expected1, observed1), 1E-9);
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("chi-square test reject", TestUtils.chiSquareTest(expected1, observed1, 0.07));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("chi-square test accept", !TestUtils.chiSquareTest(expected1, observed1, 0.05));
Invocation:
add chiSquareTest to all_set
#should check: TestUtils.chiSquareTest
found containsAssert getting True in analyze_invocation, add chiSquareTest to mess_name_set
qualifier: TestUtils
code:             TestUtils.chiSquareTest(expected1, observed1, 95);
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("alpha out of range, IllegalArgumentException expected");
Invocation:
add chiSquare to all_set
#should check: TestUtils.chiSquare
found containsAssert getting True in analyze_invocation, add chiSquare to mess_name_set
qualifier: TestUtils
code:             TestUtils.chiSquare(tooShortEx, tooShortObs);
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("arguments too short, IllegalArgumentException expected");
Invocation:
add chiSquare to all_set
found containsAssert getting True in analyze_invocation, add chiSquare to mess_name_set
qualifier: TestUtils
code:             TestUtils.chiSquare(unMatchedEx, unMatchedObs);
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("arrays have different lengths, IllegalArgumentException expected");
Invocation:
add chiSquareTest to all_set
found containsAssert getting True in analyze_invocation, add chiSquareTest to mess_name_set
qualifier: TestUtils
code:             TestUtils.chiSquareTest(expected, observed, .01);
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("bad expected count, IllegalArgumentException expected");
Invocation:
add chiSquareTest to all_set
found containsAssert getting True in analyze_invocation, add chiSquareTest to mess_name_set
qualifier: TestUtils
code:             TestUtils.chiSquareTest(expected, observed, .01);
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("bad expected count, IllegalArgumentException expected");
analyze: testChiSquareLargeTestStatistic
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("chi-square p-value", 0.0, cst, 1E-3);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals( "chi-square test statistic", 
-------------
-------------
Math_106
/root/workbench/d4j_buggy/Math_106/src/test//org/apache/commons/math/fraction/FractionFormatTest.java
analyze: testParseProperInvalidMinus
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("invalid minus in improper fraction.");
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail("invalid minus in improper fraction.");
-------------
-------------
Mockito_2
/root/workbench/d4j_buggy/Mockito_2/test//org/mockito/internal/util/TimerTest.java
analyze: should_throw_friendly_reminder_exception_when_duration_is_negative
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to mess_name_set
qualifier: Assert
code:             Assert.fail("It is forbidden to create timer with negative value of timer's duration.");
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:             Assert.assertTrue(true);
/root/workbench/d4j_buggy/Mockito_2/test//org/mockito/verification/NegativeDurationTest.java
analyze: should_throw_exception_when_duration_is_negative_for_timeout_method
Invocation:
add timeout to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to mess_name_set
qualifier: Assert
code:             Assert.fail("It is forbidden to invoke Mockito.timeout() with negative value.");
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:             Assert.assertTrue(true);
analyze: should_throw_exception_when_duration_is_negative_for_after_method
Invocation:
add after to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to mess_name_set
qualifier: Assert
code:             Assert.fail("It is forbidden to invoke Mockito.after() with negative value.");
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to mess_name_set
qualifier: Assert
code:             Assert.assertTrue(true);
-------------
-------------
Mockito_3
/root/workbench/d4j_buggy/Mockito_3/test//org/mockito/internal/invocation/InvocationMatcherTest.java
analyze: should_capture_varargs_as_vararg
Invocation:
add mixedVarargs to all_set
Invocation:
add captureArgumentsFrom to all_set
In selectors:
add containsExactly to all_set
found containsAssert getting True in analyze_invocation, add containsExactly to mess_name_set
qualifier: None
code:         Assertions.assertThat(m.getAllValues()).containsExactly("a", "b");
Invocation:
add assertThat to all_set
#should check: Assertions.assertThat
found containsAssert getting True in analyze_invocation, add assertThat to mess_name_set
qualifier: Assertions
code:         Assertions.assertThat(m.getAllValues()).containsExactly("a", "b");
/root/workbench/d4j_buggy/Mockito_3/test//org/mockitousage/bugs/varargs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java
analyze: shouldVerifyCorrectlyNumberOfInvocationsWithVarargs
Invocation:
add newRow to all_set
Invocation:
add newRow to all_set
In selectors:
add newRow to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(table).newRow(anyString(), eq("foo"), anyString(), anyString());
In selectors:
add newRow to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(table).newRow(anyString(), anyString());
/root/workbench/d4j_buggy/Mockito_3/test//org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyObjectTest.java
analyze: shouldMatchAnyVararg
Invocation:
add run to all_set
In selectors:
add run to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock).run(anyString(), anyString());
In selectors:
add run to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock).run((String) anyObject(), (String) anyObject());
In selectors:
add run to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock).run((String[]) anyVararg());
In selectors:
add run to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock, never()).run();
In selectors:
add run to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock, never()).run(anyString(), eq("f"));
/root/workbench/d4j_buggy/Mockito_3/test//org/mockitousage/matchers/CapturingArgumentsTest.java
analyze: should_capture_byte_vararg_by_creating_captor_with_primitive
Invocation:
add varargsbyte to all_set
In selectors:
add varargsbyte to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock).varargsbyte(argumentCaptor.capture());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals((byte) 2, (byte) argumentCaptor.getValue());
In selectors:
add containsExactly to all_set
found containsAssert getting True in analyze_invocation, add containsExactly to mess_name_set
qualifier: None
code:         Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly((byte) 1, (byte) 2);
Invocation:
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to mess_name_set
qualifier: Assertions
code:         Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly((byte) 1, (byte) 2);
analyze: should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper
Invocation:
add varargsbyte to all_set
In selectors:
add varargsbyte to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock).varargsbyte(argumentCaptor.capture());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals((byte) 2, (byte) argumentCaptor.getValue());
In selectors:
add containsExactly to all_set
found containsAssert getting True in analyze_invocation, add containsExactly to mess_name_set
qualifier: None
code:         Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly((byte) 1, (byte) 2);
Invocation:
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to mess_name_set
qualifier: Assertions
code:         Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly((byte) 1, (byte) 2);
analyze: should_capture_vararg
Invocation:
add mixedVarargs to all_set
In selectors:
add mixedVarargs to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock).mixedVarargs(any(), argumentCaptor.capture());
In selectors:
add containsExactly to all_set
found containsAssert getting True in analyze_invocation, add containsExactly to mess_name_set
qualifier: None
code:         Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly("a", "b", "c");
Invocation:
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to mess_name_set
qualifier: Assertions
code:         Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly("a", "b", "c");
analyze: should_capture_all_vararg
Invocation:
add mixedVarargs to all_set
Invocation:
add mixedVarargs to all_set
In selectors:
add mixedVarargs to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock, times(2)).mixedVarargs(any(), argumentCaptor.capture());
In selectors:
add containsExactly to all_set
found containsAssert getting True in analyze_invocation, add containsExactly to mess_name_set
qualifier: None
code:         Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly("a", "b", "c", "again ?!");
Invocation:
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to mess_name_set
qualifier: Assertions
code:         Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly("a", "b", "c", "again ?!");
analyze: captures_correctly_when_captor_used_multiple_times
Invocation:
add mixedVarargs to all_set
In selectors:
add mixedVarargs to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock).mixedVarargs(any(), argumentCaptor.capture(), argumentCaptor.capture(), argumentCaptor.capture());
In selectors:
add containsExactly to all_set
found containsAssert getting True in analyze_invocation, add containsExactly to mess_name_set
qualifier: None
code:         Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly("a", "b", "c");
Invocation:
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to mess_name_set
qualifier: Assertions
code:         Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly("a", "b", "c");
analyze: captures_correctly_when_captor_used_on_pure_vararg_method
Invocation:
add varargs to all_set
In selectors:
add varargs to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock).varargs(eq(42), argumentCaptor.capture());
In selectors:
add contains to all_set
found containsAssert getting True in analyze_invocation, add contains to mess_name_set
qualifier: None
code:         Assertions.assertThat(argumentCaptor.getValue()).contains("capturedValue");
Invocation:
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to mess_name_set
qualifier: Assertions
code:         Assertions.assertThat(argumentCaptor.getValue()).contains("capturedValue");
-------------
-------------
Mockito_4
/root/workbench/d4j_buggy/Mockito_4/test//org/mockito/exceptions/ReporterTest.java
analyze: can_use_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted
analyze: can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_no_more_interaction_wanted_in_order
analyze: can_use_print_mock_name_even_when_mock_bogus_default_answer_and_when_reporting_injection_failure
/root/workbench/d4j_buggy/Mockito_4/test//org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java
analyze: should_not_throw_a_ClassCastException
Invocation:
add m1 to all_set
Invocation:
add verifyZeroInteractions to all_set
found containsAssert getting True in analyze_invocation, add verifyZeroInteractions to pure_name_set
qualifier: 
code:         verifyZeroInteractions(test);
-------------
-------------
Mockito_6
/root/workbench/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java
analyze: shouldNotAcceptNullInAnyXMatchers
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.oneArg((Object) null));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.oneArg((String) null));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forList(null));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forMap(null));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forCollection(null));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forSet(null));
analyze: shouldNotAcceptNullInAllAnyPrimitiveWrapperMatchers
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forInteger(null));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forCharacter(null));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forShort(null));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forByte(null));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forBoolean(null));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forLong(null));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forFloat(null));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forDouble(null));
/root/workbench/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/MatchersTest.java
analyze: anyStringMatcher
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("matched", mock.oneArg(""));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("matched", mock.oneArg("any string"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.oneArg((String) null));
/root/workbench/d4j_buggy/Mockito_6/test//org/mockitousage/matchers/NewMatchersTest.java
analyze: shouldAllowAnyList
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("matched", mock.forList(Arrays.asList("x", "y")));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forList(null));
In selectors:
add forList to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock, times(1)).forList(anyList());
analyze: shouldAllowAnyCollection
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("matched", mock.forCollection(Arrays.asList("x", "y")));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forCollection(null));
In selectors:
add forCollection to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock, times(1)).forCollection(anyCollection());
analyze: shouldAllowAnyMap
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("matched", mock.forMap(new HashMap<String, String>()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forMap(null));
In selectors:
add forMap to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock, times(1)).forMap(anyMap());
analyze: shouldAllowAnySet
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("matched", mock.forSet(new HashSet<String>()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(null, mock.forSet(null));
In selectors:
add forSet to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock, times(1)).forSet(anySet());
-------------
-------------
Mockito_9
/root/workbench/d4j_buggy/Mockito_9/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java
analyze: abstractMethodReturnsDefault
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     	assertEquals("abstract null", thing.fullName());
analyze: abstractMethodStubbed
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     	assertEquals("abstract me", thing.fullName());
analyze: testCallsRealInterfaceMethod
Invocation:
add assertNull to all_set
found containsAssert getting True in analyze_invocation, add assertNull to pure_name_set
qualifier: 
code:     	assertNull(list.get(1));
-------------
-------------
Mockito_10
/root/workbench/d4j_buggy/Mockito_10/test//org/mockitousage/bugs/DeepStubsWronglyReportsSerializationProblemsTest.java
analyze: should_not_raise_a_mockito_exception_about_serialization_when_accessing_deep_stub
In selectors:
add isNotNull to all_set
Invocation:
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to pure_name_set
qualifier: 
code:         assertThat(the_deep_stub).isNotNull();
-------------
-------------
Mockito_11
/root/workbench/d4j_buggy/Mockito_11/test//org/mockito/internal/creation/DelegatingMethodTest.java
analyze: equals_should_return_true_when_equal
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(delegatingMethod.equals(equal));
analyze: equals_should_return_true_when_self
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(delegatingMethod.equals(delegatingMethod));
-------------
-------------
Mockito_13
/root/workbench/d4j_buggy/Mockito_13/test//org/mockitousage/bugs/VerifyingWithAnExtraCallToADifferentMockTest.java
analyze: shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
Invocation:
add simpleMethod to all_set
In selectors:
add simpleMethod to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mockTwo).simpleMethod(mock.otherMethod());
In selectors:
add simpleMethod to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:             verify(mockTwo, never()).simpleMethod(mock.otherMethod());
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
-------------
-------------
Mockito_14
/root/workbench/d4j_buggy/Mockito_14/test//org/mockitousage/bugs/VerifyingWithAnExtraCallToADifferentMockTest.java
analyze: shouldAllowVerifyingWhenOtherMockCallIsInTheSameLine
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
Invocation:
add simpleMethod to all_set
In selectors:
add simpleMethod to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mockTwo).simpleMethod(mock.otherMethod());
-------------
-------------
Mockito_15
/root/workbench/d4j_buggy/Mockito_15/test//org/mockitousage/bugs/InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest.java
analyze: shouldInjectUsingPropertySetterIfAvailable
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(awaitingInjection.propertySetterUsed);
-------------
-------------
Mockito_16
/root/workbench/d4j_buggy/Mockito_16/test//org/mockitousage/bugs/StubbingMocksThatAreConfiguredToReturnMocksTest.java
analyze: shouldAllowStubbingMocksConfiguredWithRETURNS_MOCKS
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
-------------
-------------
Mockito_17
/root/workbench/d4j_buggy/Mockito_17/test//org/mockitousage/basicapi/MocksSerializationTest.java
analyze: shouldBeSerializeAndHaveExtraInterfaces
Invocation:
add serializeAndBack to all_set
found containsAssert getting True in analyze_invocation, add serializeAndBack to pure_name_set
qualifier: 
code:         serializeAndBack((List) mock);
Invocation:
add serializeAndBack to all_set
found containsAssert getting True in analyze_invocation, add serializeAndBack to pure_name_set
qualifier: 
code:         serializeAndBack((List) mockTwo);
-------------
-------------
Mockito_19
/root/workbench/d4j_buggy/Mockito_19/test//org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java
analyze: shouldInsertFieldWithCorrectNameWhenMultipleTypesAvailable
Invocation:
add initMocks to all_set
Invocation:
add assertNull to all_set
found containsAssert getting True in analyze_invocation, add assertNull to pure_name_set
qualifier: 
code: 		assertNull(otherSuperUnderTesting.candidate1);
Invocation:
add assertNotNull to all_set
found containsAssert getting True in analyze_invocation, add assertNotNull to pure_name_set
qualifier: 
code: 		assertNotNull(otherSuperUnderTesting.candidate2);
-------------
-------------
Mockito_20
/root/workbench/d4j_buggy/Mockito_20/test//org/mockitousage/annotation/SpyAnnotationTest.java
analyze: should_report_when_constructor_is_explosive
Invocation:
add initMocks to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
In selectors:
add contains to all_set
found containsAssert getting True in analyze_invocation, add contains to mess_name_set
qualifier: None
code:             Assertions.assertThat(e.getMessage()).contains("Unable to create mock instance");
Invocation:
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to mess_name_set
qualifier: Assertions
code:             Assertions.assertThat(e.getMessage()).contains("Unable to create mock instance");
analyze: should_spy_inner_class
Invocation:
add assertNotNull to all_set
found containsAssert getting True in analyze_invocation, add assertNotNull to pure_name_set
qualifier: 
code:             		assertNotNull(list);
Invocation:
add initMocks to all_set
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("inner strength", outer.strength.fullStrength());
/root/workbench/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java
analyze: can_create_mock_with_constructor
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("hey!", mock.getMessage());
analyze: can_mock_abstract_classes
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("hey!", mock.getMessage());
analyze: can_spy_abstract_classes
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("hey!", mock.getMessage());
analyze: can_mock_inner_classes
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("hey!", mock.getMessage());
analyze: exception_message_when_constructor_not_found
Invocation:
add spy to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals("Unable to create mock instance of type 'HasConstructor'", e.getMessage());
Invocation:
add assertContains to all_set
found containsAssert getting True in analyze_invocation, add assertContains to pure_name_set
qualifier: 
code:             assertContains("0-arg constructor", e.getCause().getMessage());
analyze: mocking_inner_classes_with_wrong_outer_instance
Invocation:
add mock to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals("Unable to create mock instance of type 'InnerClass'", e.getMessage());
Invocation:
add assertContains to all_set
found containsAssert getting True in analyze_invocation, add assertContains to pure_name_set
qualifier: 
code:             assertContains("Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.", e.getCause().getMessage());
-------------
-------------
Mockito_21
/root/workbench/d4j_buggy/Mockito_21/test//org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java
analyze: creates_instances_of_inner_classes
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new ConstructorInstantiator(this).newInstance(SomeInnerClass.class).getClass(), SomeInnerClass.class);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new ConstructorInstantiator(new ChildOfThis()).newInstance(SomeInnerClass.class).getClass(), SomeInnerClass.class);
-------------
-------------
Mockito_23
/root/workbench/d4j_buggy/Mockito_23/test//org/mockitousage/stubbing/DeepStubsSerializableTest.java
analyze: should_serialize_and_deserialize_mock_created_by_deep_stubs
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
In selectors:
add thenReturn to all_set
Invocation:
add when to all_set
In selectors:
add isInstanceOf to all_set
Invocation:
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to pure_name_set
qualifier: 
code:         assertThat(o).isInstanceOf(SampleClass.class);
In selectors:
add isEqualTo to all_set
Invocation:
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to pure_name_set
qualifier: 
code:         assertThat(deserializedSample.getSample().isSth()).isEqualTo(STUBBED_BOOLEAN_VALUE);
In selectors:
add isEqualTo to all_set
Invocation:
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to pure_name_set
qualifier: 
code:         assertThat(deserializedSample.getSample().getNumber()).isEqualTo(STUBBED_INTEGER_VALUE);
-------------
-------------
Mockito_25
/root/workbench/d4j_buggy/Mockito_25/test//org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java
analyze: generic_deep_mock_frenzy__look_at_these_chained_calls
analyze: can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_parameterizedtype_that_is_referencing_a_typevar_on_class
analyze: can_create_mock_from_multiple_type_variable_bounds_when_method_return_type_is_referencing_a_typevar_on_class
analyze: can_create_mock_from_multiple_type_variable_bounds_when_return_type_of_parameterized_method_is_a_typevar_that_is_referencing_a_typevar_on_class
analyze: can_create_mock_from_return_types_declared_with_a_bounded_wildcard
Invocation:
add floatValue to all_set
analyze: will_return_default_value_on_non_mockable_nested_generic
In selectors:
add isNull to all_set
Invocation:
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to pure_name_set
qualifier: 
code:         assertThat(genericsNest.returningNonMockableNestedGeneric().keySet().iterator().next()).isNull();
In selectors:
add isEqualTo to all_set
Invocation:
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to pure_name_set
qualifier: 
code:         assertThat(listOfInteger.get(25)).isEqualTo(0);
-------------
-------------
Mockito_30
/root/workbench/d4j_buggy/Mockito_30/test//org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java
analyze: shouldPrintTheParametersOnSmartNullPointerExceptionMessage
Invocation:
add get to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         	assertTrue("Exception message should include oompa and lumpa, but was: " + message,
-------------
-------------
Mockito_31
/root/workbench/d4j_buggy/Mockito_31/test//org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java
analyze: shouldPrintTheParametersWhenCallingAMethodWithArgs
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     	assertEquals("SmartNull returned by unstubbed withArgs(oompa, lumpa) method on mock", smartNull + "");
-------------
-------------
Mockito_32
/root/workbench/d4j_buggy/Mockito_32/test//org/mockitousage/bugs/SpyShouldHaveNiceNameTest.java
analyze: shouldPrintNiceName
Invocation:
add add to all_set
In selectors:
add add to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:             verify(veryCoolSpy).add(2);
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
In selectors:
add contains to all_set
found containsAssert getting True in analyze_invocation, add contains to mess_name_set
qualifier: None
code:             Assertions.assertThat(e.getMessage()).contains("veryCoolSpy");
Invocation:
add assertThat to all_set
found containsAssert getting True in analyze_invocation, add assertThat to mess_name_set
qualifier: Assertions
code:             Assertions.assertThat(e.getMessage()).contains("veryCoolSpy");
-------------
-------------
Mockito_35
/root/workbench/d4j_buggy/Mockito_35/test//org/mockitousage/bugs/NPEWithCertainMatchersTest.java
analyze: shouldNotThrowNPEWhenIntegerPassed
Invocation:
add intArgumentMethod to all_set
In selectors:
add intArgumentMethod to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock).intArgumentMethod(isA(Integer.class));
analyze: shouldNotThrowNPEWhenIntPassed
Invocation:
add intArgumentMethod to all_set
In selectors:
add intArgumentMethod to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock).intArgumentMethod(isA(Integer.class));
analyze: shouldNotThrowNPEWhenIntegerPassedToEq
Invocation:
add intArgumentMethod to all_set
In selectors:
add intArgumentMethod to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock).intArgumentMethod(eq(new Integer(100)));
analyze: shouldNotThrowNPEWhenIntegerPassedToSame
Invocation:
add intArgumentMethod to all_set
In selectors:
add intArgumentMethod to all_set
Invocation:
add verify to all_set
found containsAssert getting True in analyze_invocation, add verify to pure_name_set
qualifier: 
code:         verify(mock, never()).intArgumentMethod(same(new Integer(100)));
-------------
-------------
Mockito_36
/root/workbench/d4j_buggy/Mockito_36/test//org/mockito/internal/invocation/InvocationTest.java
analyze: shouldScreamWhenCallingRealMethodOnInterface
Invocation:
add callRealMethod to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
/root/workbench/d4j_buggy/Mockito_36/test//org/mockitousage/spies/SpyingOnInterfacesTest.java
analyze: shouldFailInRuntimeWhenCallingRealMethodOnInterface
In selectors:
add thenAnswer to all_set
Invocation:
add when to all_set
Invocation:
add get to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
-------------
-------------
Mockito_37
/root/workbench/d4j_buggy/Mockito_37/test//org/mockito/internal/stubbing/answers/AnswersValidatorTest.java
analyze: shouldFailWhenCallingRealMethodOnIterface
Invocation:
add validate to all_set
found containsAssert getting True in analyze_invocation, add validate to mess_name_set
qualifier: validator
code:             validator.validate(new CallsRealMethods(), inovcationOnIterface);
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
/root/workbench/d4j_buggy/Mockito_37/test//org/mockitousage/spies/SpyingOnInterfacesTest.java
analyze: shouldFailFastWhenCallingRealMethodOnInterface
In selectors:
add thenCallRealMethod to all_set
Invocation:
add when to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
-------------
-------------
Time_1
/root/workbench/d4j_buggy/Time_1/src/test/java//org/joda/time/TestPartial_Constructors.java
analyze: testConstructorEx7_TypeArray_intArray
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add assertMessageContains to all_set
found containsAssert getting True in analyze_invocation, add assertMessageContains to pure_name_set
qualifier: 
code:             assertMessageContains(ex, "must be in order", "largest-smallest");
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add assertMessageContains to all_set
found containsAssert getting True in analyze_invocation, add assertMessageContains to pure_name_set
qualifier: 
code:             assertMessageContains(ex, "must be in order", "largest-smallest");
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add assertMessageContains to all_set
found containsAssert getting True in analyze_invocation, add assertMessageContains to pure_name_set
qualifier: 
code:             assertMessageContains(ex, "must be in order", "largest-smallest");
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add assertMessageContains to all_set
found containsAssert getting True in analyze_invocation, add assertMessageContains to pure_name_set
qualifier: 
code:             assertMessageContains(ex, "must be in order", "largest-smallest");
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add assertMessageContains to all_set
found containsAssert getting True in analyze_invocation, add assertMessageContains to pure_name_set
qualifier: 
code:             assertMessageContains(ex, "must be in order", "largest-smallest");
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add assertMessageContains to all_set
found containsAssert getting True in analyze_invocation, add assertMessageContains to pure_name_set
qualifier: 
code:             assertMessageContains(ex, "must be in order", "largest-smallest");
-------------
-------------
Time_2
/root/workbench/d4j_buggy/Time_2/src/test/java//org/joda/time/TestPartial_Basics.java
analyze: testWith_baseAndArgHaveNoRange
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(2, result.size());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, result.indexOf(DateTimeFieldType.era()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, result.indexOf(DateTimeFieldType.year()));
-------------
-------------
Time_3
/root/workbench/d4j_buggy/Time_3/src/test/java//org/joda/time/TestMutableDateTime_Adds.java
analyze: testAdd_DurationFieldType_int_dstOverlapWinter_addZero
Invocation:
add addHours to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
Invocation:
add add to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
analyze: testAddYears_int_dstOverlapWinter_addZero
Invocation:
add addHours to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
Invocation:
add addYears to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
analyze: testAddMonths_int_dstOverlapWinter_addZero
Invocation:
add addHours to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
Invocation:
add addMonths to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
analyze: testAddDays_int_dstOverlapWinter_addZero
Invocation:
add addHours to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
Invocation:
add addDays to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
analyze: testAddWeeks_int_dstOverlapWinter_addZero
Invocation:
add addHours to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
Invocation:
add addWeeks to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2011-10-30T02:30:00.000+01:00", test.toString());
-------------
-------------
Time_5
/root/workbench/d4j_buggy/Time_5/src/test/java//org/joda/time/TestPeriod_Basics.java
analyze: testNormalizedStandard_periodType_months1
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Period(1, 15, 0, 0, 0, 0, 0, 0), test);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Period(0, 27, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);
analyze: testNormalizedStandard_periodType_months2
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Period(-2, 15, 0, 0, 0, 0, 0, 0), test);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Period(0, -9, 0, 0, 0, 0, 0, 0, PeriodType.months()), result);
analyze: testNormalizedStandard_periodType_monthsWeeks
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Period(2, 4, 6, 0, 0, 0, 0, 0), test);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(new Period(0, 28, 6, 0, 0, 0, 0, 0, type), result);
-------------
-------------
Time_6
/root/workbench/d4j_buggy/Time_6/src/test/java//org/joda/time/chrono/TestGJDate.java
analyze: test_plusYears_positiveToZero_crossCutover
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, date.plusYears(-2003));
analyze: test_plusYears_positiveToNegative_crossCutover
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, date.plusYears(-2004));
analyze: test_plusWeekyears_positiveToZero_crossCutover
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, date.weekyear().addToCopy(-2003));
analyze: test_plusWeekyears_positiveToNegative_crossCutover
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, date.weekyear().addToCopy(-2004));
analyze: test_cutoverPreZero
Invocation:
add getInstance to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
-------------
-------------
Time_8
/root/workbench/d4j_buggy/Time_8/src/test/java//org/joda/time/TestDateTimeZone.java
analyze: testForOffsetHoursMinutes_int_int
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("+02:15"), DateTimeZone.forOffsetHoursMinutes(2, 15));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("+02:00"), DateTimeZone.forOffsetHoursMinutes(2, 0));
Invocation:
add forOffsetHoursMinutes to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("+00:15"), DateTimeZone.forOffsetHoursMinutes(0, 15));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("+00:00"), DateTimeZone.forOffsetHoursMinutes(0, 0));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("-00:15"), DateTimeZone.forOffsetHoursMinutes(0, -15));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes(-2, 0));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("-02:15"), DateTimeZone.forOffsetHoursMinutes(-2, -15));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("-02:15"), DateTimeZone.forOffsetHoursMinutes(-2, 15));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes(-23, 59));
Invocation:
add forOffsetHoursMinutes to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add forOffsetHoursMinutes to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add forOffsetHoursMinutes to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add forOffsetHoursMinutes to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
-------------
-------------
Time_9
/root/workbench/d4j_buggy/Time_9/src/test/java//org/joda/time/TestDateTimeZone.java
analyze: testForOffsetHoursMinutes_int_int
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.UTC, DateTimeZone.forOffsetHoursMinutes(0, 0));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("+23:59"), DateTimeZone.forOffsetHoursMinutes(23, 59));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("+03:15"), DateTimeZone.forOffsetHoursMinutes(3, 15));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("-02:00"), DateTimeZone.forOffsetHoursMinutes(-2, 0));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("-02:30"), DateTimeZone.forOffsetHoursMinutes(-2, 30));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(DateTimeZone.forID("-23:59"), DateTimeZone.forOffsetHoursMinutes(-23, 59));
Invocation:
add forOffsetHoursMinutes to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add forOffsetHoursMinutes to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add forOffsetHoursMinutes to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add forOffsetHoursMinutes to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add forOffsetHoursMinutes to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
Invocation:
add forOffsetHoursMinutes to all_set
Invocation:
add fail to all_set
found containsAssert getting True in analyze_invocation, add fail to pure_name_set
qualifier: 
code:             fail();
-------------
-------------
Time_10
/root/workbench/d4j_buggy/Time_10/src/test/java//org/joda/time/TestDays.java
analyze: testFactory_daysBetween_RPartial_MonthDay
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(27, Days.daysBetween(start1, end1).getDays());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(28, Days.daysBetween(start1, end2).getDays());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, Days.daysBetween(start2, end1).getDays());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, Days.daysBetween(start2, end2).getDays());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-27, Days.daysBetween(end1, start1).getDays());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-28, Days.daysBetween(end2, start1).getDays());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, Days.daysBetween(end1, start2).getDays());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, Days.daysBetween(end2, start2).getDays());
/root/workbench/d4j_buggy/Time_10/src/test/java//org/joda/time/TestMonths.java
analyze: testFactory_monthsBetween_RPartial_MonthDay
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, Months.monthsBetween(start, end1).getMonths());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, Months.monthsBetween(start, end2).getMonths());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, Months.monthsBetween(start, end3).getMonths());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, Months.monthsBetween(end1, start).getMonths());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(0, Months.monthsBetween(end2, start).getMonths());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(-1, Months.monthsBetween(end3, start).getMonths());
-------------
-------------
Time_12
/root/workbench/d4j_buggy/Time_12/src/test/java//org/joda/time/TestLocalDateTime_Constructors.java
analyze: testFactory_fromCalendarFields_beforeYearZero1
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, LocalDateTime.fromCalendarFields(cal));
analyze: testFactory_fromCalendarFields_beforeYearZero3
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, LocalDateTime.fromCalendarFields(cal));
analyze: testFactory_fromDateFields_beforeYearZero1
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
analyze: testFactory_fromDateFields_beforeYearZero3
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, LocalDateTime.fromDateFields(cal.getTime()));
/root/workbench/d4j_buggy/Time_12/src/test/java//org/joda/time/TestLocalDate_Constructors.java
analyze: testFactory_fromCalendarFields_beforeYearZero1
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, LocalDate.fromCalendarFields(cal));
analyze: testFactory_fromCalendarFields_beforeYearZero3
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, LocalDate.fromCalendarFields(cal));
analyze: testFactory_fromDateFields_beforeYearZero1
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
analyze: testFactory_fromDateFields_beforeYearZero3
Invocation:
add set to all_set
Invocation:
add set to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(expected, LocalDate.fromDateFields(cal.getTime()));
-------------
-------------
Time_13
/root/workbench/d4j_buggy/Time_13/src/test/java//org/joda/time/format/TestISOPeriodFormat.java
analyze: testFormatStandard_negative
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("P-1Y-2M-3W-4DT-5H-6M-7.008S", ISOPeriodFormat.standard().print(p));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("P-54Y", ISOPeriodFormat.standard().print(p));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("PT3.992S", ISOPeriodFormat.standard().print(p));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("PT-3.992S", ISOPeriodFormat.standard().print(p));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("PT-23S", ISOPeriodFormat.standard().print(p));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("PT-0.008S", ISOPeriodFormat.standard().print(p));
-------------
-------------
Time_17
/root/workbench/d4j_buggy/Time_17/src/test/java//org/joda/time/TestDateTimeZoneCutover.java
analyze: testBug3476684_adjustOffset
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to pure_name_set
qualifier: 
code:         assertSame(base, base.withEarlierOffsetAtOverlap());
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to pure_name_set
qualifier: 
code:         assertSame(base, base.withLaterOffsetAtOverlap());
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to pure_name_set
qualifier: 
code:         assertSame(baseBefore, baseBefore.withEarlierOffsetAtOverlap());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseAfter, baseBefore.withLaterOffsetAtOverlap());
Invocation:
add assertSame to all_set
found containsAssert getting True in analyze_invocation, add assertSame to pure_name_set
qualifier: 
code:         assertSame(baseAfter, baseAfter.withLaterOffsetAtOverlap());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(baseBefore, baseAfter.withEarlierOffsetAtOverlap());
-------------
-------------
Time_20
/root/workbench/d4j_buggy/Time_20/src/test/java//org/joda/time/format/TestDateTimeFormatterBuilder.java
analyze: test_printParseZoneDawsonCreek
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2007-03-04 12:30 America/Dawson_Creek", f.print(dt));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(dt, f.parseDateTime("2007-03-04 12:30 America/Dawson_Creek"));
-------------
-------------
Time_23
/root/workbench/d4j_buggy/Time_23/src/test/java//org/joda/time/TestDateTimeZone.java
analyze: testForID_String_old
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:             assertEquals(value, zone.getID());
-------------
-------------
Time_26
/root/workbench/d4j_buggy/Time_26/src/test/java//org/joda/time/TestDateTimeZoneCutover.java
analyze: testWithMinuteOfHourInDstChange_mockZone
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T01:15:00.000+00:30", cutover.toString());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T01:00:00.000+01:00", pre.toString());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T01:59:00.000+00:30", post.toString());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T01:30:00.000+01:00", testPre1.toString());  // retain offset
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T01:50:00.000+00:30", testPre2.toString());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T01:30:00.000+00:30", testPost1.toString());  // retain offset
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T01:10:00.000+01:00", testPost2.toString());
analyze: testWithHourOfDayInDstChange
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T02:30:10.123+02:00", test.toString());
analyze: testWithMinuteOfHourInDstChange
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T02:00:10.123+02:00", test.toString());
analyze: testWithSecondOfMinuteInDstChange
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T02:30:00.123+02:00", test.toString());
analyze: testWithMillisOfSecondInDstChange_Paris_summer
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T02:30:10.123+02:00", dateTime.toString());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2010-10-31T02:30:10.000+02:00", test.toString());
analyze: testWithMillisOfSecondInDstChange_NewYork_winter
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2007-11-04T01:30:00.123-05:00", dateTime.toString());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals("2007-11-04T01:30:00.000-05:00", test.toString());
analyze: testBug2182444_usCentral
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("Should be standard time", chronUSCentral.getZone().isStandardOffset(usCentralStandardInUTC.getMillis()));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:         assertFalse("Should be daylight time", chronUSCentral.getZone().isStandardOffset(usCentralDaylightInUTC.getMillis()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(1, usCentralStandardInUSCentral.getHourOfDay());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(usCentralStandardInUSCentral.getHourOfDay(), usCentralDaylightInUSCentral.getHourOfDay());
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(usCentralStandardInUSCentral.getMillis() != usCentralDaylightInUSCentral.getMillis());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(usCentralStandardInUSCentral, usCentralStandardInUSCentral.withHourOfDay(1));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(usCentralStandardInUSCentral.getMillis() + 3, usCentralStandardInUSCentral.withMillisOfSecond(3).getMillis());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(usCentralDaylightInUSCentral, usCentralDaylightInUSCentral.withHourOfDay(1));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(usCentralDaylightInUSCentral.getMillis() + 3, usCentralDaylightInUSCentral.withMillisOfSecond(3).getMillis());
analyze: testBug2182444_ausNSW
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue("Should be standard time", chronAusNSW.getZone().isStandardOffset(australiaNSWStandardInUTC.getMillis()));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:         assertFalse("Should be daylight time", chronAusNSW.getZone().isStandardOffset(australiaNSWDaylightInUTC.getMillis()));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(2, australiaNSWStandardInAustraliaNSW.getHourOfDay());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(australiaNSWStandardInAustraliaNSW.getHourOfDay(), australiaNSWDaylightInAusraliaNSW.getHourOfDay());
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:         assertTrue(australiaNSWStandardInAustraliaNSW.getMillis() != australiaNSWDaylightInAusraliaNSW.getMillis());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(australiaNSWStandardInAustraliaNSW, australiaNSWStandardInAustraliaNSW.withHourOfDay(2));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(australiaNSWStandardInAustraliaNSW.getMillis() + 3, australiaNSWStandardInAustraliaNSW.withMillisOfSecond(3).getMillis());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(australiaNSWDaylightInAusraliaNSW, australiaNSWDaylightInAusraliaNSW.withHourOfDay(2));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:         assertEquals(australiaNSWDaylightInAusraliaNSW.getMillis() + 3, australiaNSWDaylightInAusraliaNSW.withMillisOfSecond(3).getMillis());
-------------
-------------
Closure_3
/root/workbench/d4j_buggy/Closure_3/test//com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
analyze: testDoNotInlineCatchExpression1
Invocation:
add noInline to all_set
found containsAssert getting True in analyze_invocation, add noInline to pure_name_set
qualifier: 
code:     noInline(
analyze: testDoNotInlineCatchExpression1a
Invocation:
add noInline to all_set
found containsAssert getting True in analyze_invocation, add noInline to pure_name_set
qualifier: 
code:     noInline(
analyze: testDoNotInlineCatchExpression3
Invocation:
add noInline to all_set
found containsAssert getting True in analyze_invocation, add noInline to pure_name_set
qualifier: 
code:     noInline(
-------------
-------------
Closure_4
/root/workbench/d4j_buggy/Closure_4/test//com/google/javascript/jscomp/TypeCheckTest.java
analyze: testImplementsLoop
Invocation:
add testClosureTypesMultipleWarnings to all_set
found containsAssert getting True in analyze_invocation, add testClosureTypesMultipleWarnings to pure_name_set
qualifier: 
code:     testClosureTypesMultipleWarnings(
analyze: testImplementsExtendsLoop
Invocation:
add testClosureTypesMultipleWarnings to all_set
found containsAssert getting True in analyze_invocation, add testClosureTypesMultipleWarnings to pure_name_set
qualifier: 
code:     testClosureTypesMultipleWarnings(
analyze: testConversionFromInterfaceToRecursiveConstructor
Invocation:
add testClosureTypesMultipleWarnings to all_set
found containsAssert getting True in analyze_invocation, add testClosureTypesMultipleWarnings to pure_name_set
qualifier: 
code:     testClosureTypesMultipleWarnings(
-------------
-------------
Closure_6
/root/workbench/d4j_buggy/Closure_6/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
analyze: testTypeRedefinition
Invocation:
add testClosureTypesMultipleWarnings to all_set
found containsAssert getting True in analyze_invocation, add testClosureTypesMultipleWarnings to pure_name_set
qualifier: 
code:     testClosureTypesMultipleWarnings(
/root/workbench/d4j_buggy/Closure_6/test//com/google/javascript/jscomp/TypeCheckTest.java
analyze: testTypeRedefinition
Invocation:
add testClosureTypesMultipleWarnings to all_set
found containsAssert getting True in analyze_invocation, add testClosureTypesMultipleWarnings to pure_name_set
qualifier: 
code:     testClosureTypesMultipleWarnings("a={};/**@enum {string}*/ a.A = {ZOR:'b'};"
analyze: testIssue635b
Invocation:
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
-------------
-------------
Closure_8
/root/workbench/d4j_buggy/Closure_8/test//com/google/javascript/jscomp/CollapseVariableDeclarationsTest.java
analyze: testIssue820
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("function f(a){ var b=1; a=2; var c; }");
-------------
-------------
Closure_9
/root/workbench/d4j_buggy/Closure_9/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java
analyze: testGuessModuleName
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("module$baz",
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("module$baz",
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("module$bar$baz",
-------------
-------------
Closure_16
/root/workbench/d4j_buggy/Closure_16/test//com/google/javascript/jscomp/IntegrationTest.java
analyze: testIssue772
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
/root/workbench/d4j_buggy/Closure_16/test//com/google/javascript/jscomp/ScopedAliasesTest.java
analyze: testIssue772
Invocation:
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
-------------
-------------
Closure_21
/root/workbench/d4j_buggy/Closure_21/test//com/google/javascript/jscomp/CheckSideEffectsTest.java
analyze: testUselessCode
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x) { if(x) return; }", ok);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x) { if(x); }", "function f(x) { if(x); }", e);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("if(x) x = y;", ok);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("x = 3;", ok);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var x = 'test'", ok);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var x = 'test'\n'str'",
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("", ok);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("foo();;;;bar();;;;", ok);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a, b; a = 5, b = 6", ok);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a, b; a = 5, b == 6",
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a, b; a = (5, 6)",
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a, b; a = (bar(), 6, 7)",
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a, b; a = (bar(), bar(), 7, 8)",
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a, b; a = (b = 7, 6)", ok);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));",
-------------
-------------
Closure_22
/root/workbench/d4j_buggy/Closure_22/test//com/google/javascript/jscomp/CheckSideEffectsTest.java
analyze: testUselessCode
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x) { if(x) return; }", ok);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x) { if(x); }", "function f(x) { if(x); }", e);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("if(x) x = y;", ok);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("if(x) x == bar();", "if(x) JSCOMPILER_PRESERVE(x == bar());", e);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("x = 3;", ok);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("x == 3;", "JSCOMPILER_PRESERVE(x == 3);", e);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var x = 'test'", ok);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var x = 'test'\n'str'",
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("", ok);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("foo();;;;bar();;;;", ok);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a, b; a = 5, b = 6", ok);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a, b; a = 5, b == 6",
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a, b; a = (5, 6)",
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a, b; a = (bar(), 6, 7)",
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a, b; a = (bar(), bar(), 7, 8)",
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a, b; a = (b = 7, 6)", ok);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function x(){}\nfunction f(a, b){}\nf(1,(x(), 2));", ok);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function x(){}\nfunction f(a, b){}\nf(1,(2, 3));",
-------------
-------------
Closure_24
/root/workbench/d4j_buggy/Closure_24/test//com/google/javascript/jscomp/ScopedAliasesTest.java
analyze: testNonAliasLocal
Invocation:
add testScopedFailure to all_set
found containsAssert getting True in analyze_invocation, add testScopedFailure to pure_name_set
qualifier: 
code:     testScopedFailure("var x = 10", ScopedAliases.GOOG_SCOPE_NON_ALIAS_LOCAL);
Invocation:
add testScopedFailure to all_set
found containsAssert getting True in analyze_invocation, add testScopedFailure to pure_name_set
qualifier: 
code:     testScopedFailure("var x = goog.dom + 10",
Invocation:
add testScopedFailure to all_set
found containsAssert getting True in analyze_invocation, add testScopedFailure to pure_name_set
qualifier: 
code:     testScopedFailure("var x = goog['dom']",
Invocation:
add testScopedFailure to all_set
found containsAssert getting True in analyze_invocation, add testScopedFailure to pure_name_set
qualifier: 
code:     testScopedFailure("var x = goog.dom, y = 10",
Invocation:
add testScopedFailure to all_set
found containsAssert getting True in analyze_invocation, add testScopedFailure to pure_name_set
qualifier: 
code:     testScopedFailure("function f() {}",
-------------
-------------
Closure_25
/root/workbench/d4j_buggy/Closure_25/test//com/google/javascript/jscomp/TypeInferenceTest.java
analyze: testBackwardsInferenceNew
Invocation:
add inFunction to all_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction(
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("{foo: (number|undefined)}", getType("y").toString());
-------------
-------------
Closure_26
/root/workbench/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
analyze: testProcessCJS
Invocation:
add add to all_set
Invocation:
add add to all_set
Invocation:
add setFilename to all_set
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("exports.test = 1",
analyze: testTransformAMDAndProcessCJS
Invocation:
add add to all_set
Invocation:
add add to all_set
Invocation:
add add to all_set
Invocation:
add setFilename to all_set
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("define({foo: 1})",
/root/workbench/d4j_buggy/Closure_26/test//com/google/javascript/jscomp/ProcessCommonJSModulesTest.java
analyze: testWithoutExports
Invocation:
add setFilename to all_set
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
Invocation:
add setFilename to all_set
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testExports
Invocation:
add setFilename to all_set
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testVarRenaming
Invocation:
add setFilename to all_set
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testDash
Invocation:
add setFilename to all_set
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testModuleName
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("module$foo$baz",
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("module$foo$baz_bar",
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("module$baz",
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("module$baz",
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("module$baz", ProcessCommonJSModules.toModuleName(
Invocation:
add setFilename to all_set
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
-------------
-------------
Closure_27
/root/workbench/d4j_buggy/Closure_27/test//com/google/javascript/rhino/IRTest.java
analyze: testIssue727_1
Invocation:
add testIR to all_set
found containsAssert getting True in analyze_invocation, add testIR to pure_name_set
qualifier: 
code:     testIR(
analyze: testIssue727_2
Invocation:
add testIR to all_set
found containsAssert getting True in analyze_invocation, add testIR to pure_name_set
qualifier: 
code:     testIR(
analyze: testIssue727_3
Invocation:
add testIR to all_set
found containsAssert getting True in analyze_invocation, add testIR to pure_name_set
qualifier: 
code:     testIR(
-------------
-------------
Closure_29
/root/workbench/d4j_buggy/Closure_29/test//com/google/javascript/jscomp/InlineObjectLiteralsTest.java
analyze: testObject10
Invocation:
add testLocal to all_set
found containsAssert getting True in analyze_invocation, add testLocal to pure_name_set
qualifier: 
code:     testLocal("var x; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b);",
Invocation:
add testLocal to all_set
found containsAssert getting True in analyze_invocation, add testLocal to pure_name_set
qualifier: 
code:     testLocal("var x = {}; var b = f(); x = {a:a, b:b}; if(x.a) g(x.b) + x.c",
Invocation:
add testLocal to all_set
found containsAssert getting True in analyze_invocation, add testLocal to pure_name_set
qualifier: 
code:     testLocal("var x; var b = f(); x = {a:a, b:b}; x.c = c; if(x.a) g(x.b) + x.c",
Invocation:
add testLocal to all_set
found containsAssert getting True in analyze_invocation, add testLocal to pure_name_set
qualifier: 
code:     testLocal("var x = {a:a}; if (b) x={b:b}; f(x.a||x.b);",
Invocation:
add testLocal to all_set
found containsAssert getting True in analyze_invocation, add testLocal to pure_name_set
qualifier: 
code:     testLocal("var x; var y = 5; x = {a:a, b:b, c:c}; if (b) x={b:b}; f(x.a||x.b);",
analyze: testObject12
Invocation:
add testLocal to all_set
found containsAssert getting True in analyze_invocation, add testLocal to pure_name_set
qualifier: 
code:     testLocal("var a; a = {x:1, y:2}; f(a.x, a.y2);",
analyze: testObject22
Invocation:
add testLocal to all_set
found containsAssert getting True in analyze_invocation, add testLocal to pure_name_set
qualifier: 
code:     testLocal("while(1) { var a = {y:1}; if (b) a.x = 2; f(a.y, a.x);}",
Invocation:
add testLocal to all_set
found containsAssert getting True in analyze_invocation, add testLocal to pure_name_set
qualifier: 
code:     testLocal("var a; while (1) { f(a.x, a.y); a = {x:1, y:1};}",
analyze: testIssue724
Invocation:
add testSameLocal to all_set
found containsAssert getting True in analyze_invocation, add testSameLocal to pure_name_set
qualifier: 
code:     testSameLocal(
/root/workbench/d4j_buggy/Closure_29/test//com/google/javascript/jscomp/IntegrationTest.java
analyze: testIssue724
Invocation:
add setOptionsForCompilationLevel to all_set
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(options, code, result);
-------------
-------------
Closure_30
/root/workbench/d4j_buggy/Closure_30/test//com/google/javascript/jscomp/FlowSensitiveInlineVariablesTest.java
analyze: testInlineAcrossSideEffect1
Invocation:
add noInline to all_set
found containsAssert getting True in analyze_invocation, add noInline to pure_name_set
qualifier: 
code:     noInline("var y; var x = noSFX(y); print(x)");
analyze: testCanInlineAcrossNoSideEffect
Invocation:
add noInline to all_set
found containsAssert getting True in analyze_invocation, add noInline to pure_name_set
qualifier: 
code:     noInline(
analyze: testIssue698
Invocation:
add inline to all_set
found containsAssert getting True in analyze_invocation, add inline to pure_name_set
qualifier: 
code:     inline(
-------------
-------------
Closure_32
/root/workbench/d4j_buggy/Closure_32/test//com/google/javascript/jscomp/IntegrationTest.java
analyze: testIssue701
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame(createCompilerOptions(), ascii);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals(result, lastCompiler.toSource());
/root/workbench/d4j_buggy/Closure_32/test//com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
analyze: testParsePreserve
Invocation:
add parse to all_set
found containsAssert getting True in analyze_invocation, add parse to pure_name_set
qualifier: 
code:     parse(comment);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals(" Foo\nBar\n\nBaz", node.getJSDocInfo().getLicense());
analyze: testParseLicense
Invocation:
add parse to all_set
found containsAssert getting True in analyze_invocation, add parse to pure_name_set
qualifier: 
code:     parse(comment);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals(" Foo\nBar\n\nBaz", node.getJSDocInfo().getLicense());
analyze: testParseLicenseAscii
Invocation:
add parse to all_set
found containsAssert getting True in analyze_invocation, add parse to pure_name_set
qualifier: 
code:     parse(comment);
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals(" Foo\n   Bar\n\n  Baz", node.getJSDocInfo().getLicense());
-------------
-------------
Closure_34
/root/workbench/d4j_buggy/Closure_34/test//com/google/javascript/jscomp/CodePrinterTest.java
analyze: testManyAdds
Invocation:
add add to all_set
Invocation:
add addChildToBack to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals(expected, actual);
-------------
-------------
Closure_37
/root/workbench/d4j_buggy/Closure_37/test//com/google/javascript/jscomp/IntegrationTest.java
analyze: testIncompleteFunction
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(options,
-------------
-------------
Closure_39
/root/workbench/d4j_buggy/Closure_39/test//com/google/javascript/rhino/jstype/RecordTypeTest.java
analyze: testRecursiveRecord
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("{loop: number, number: number, string: string}",
Invocation:
add setReferencedType to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("{loop: {...}, number: number, string: string}",
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("{loop: ?, number: number, string: string}",
Invocation:
add assertEquivalenceOperations to all_set
#should check: Asserts.assertEquivalenceOperations
found containsAssert getting True in analyze_invocation, add assertEquivalenceOperations to mess_name_set
qualifier: Asserts
code:     Asserts.assertEquivalenceOperations(record, loop);
analyze: testLongToString
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("{a1: number, a2: number, a3: number, a4: number, ...}",
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals(
-------------
-------------
Closure_40
/root/workbench/d4j_buggy/Closure_40/test//com/google/javascript/jscomp/IntegrationTest.java
analyze: testIssue284
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(options,
/root/workbench/d4j_buggy/Closure_40/test//com/google/javascript/jscomp/NameAnalyzerTest.java
analyze: testIssue284
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
-------------
-------------
Closure_41
/root/workbench/d4j_buggy/Closure_41/test//com/google/javascript/jscomp/LooseTypeCheckTest.java
analyze: testMethodInference6
Invocation:
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
/root/workbench/d4j_buggy/Closure_41/test//com/google/javascript/jscomp/TypeCheckTest.java
analyze: testMethodInference6
Invocation:
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
analyze: testIssue368
Invocation:
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
-------------
-------------
Closure_43
/root/workbench/d4j_buggy/Closure_43/test//com/google/javascript/jscomp/TypeCheckTest.java
analyze: testLends10
Invocation:
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
analyze: testLends11
Invocation:
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
-------------
-------------
Closure_45
/root/workbench/d4j_buggy/Closure_45/test//com/google/javascript/jscomp/RemoveUnusedVarsTest.java
analyze: testIssue618_1
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame(
-------------
-------------
Closure_47
/root/workbench/d4j_buggy/Closure_47/test//com/google/debugging/sourcemap/SourceMapGeneratorV3Test.java
analyze: testBasicMapping1
Invocation:
add compileAndCheck to all_set
found containsAssert getting True in analyze_invocation, add compileAndCheck to pure_name_set
qualifier: 
code:     compileAndCheck("function __BASIC__() { }");
analyze: testBasicMappingGoldenOutput
Invocation:
add checkSourceMap to all_set
found containsAssert getting True in analyze_invocation, add checkSourceMap to pure_name_set
qualifier: 
code:     checkSourceMap("function __BASIC__() { }",
analyze: testBasicMapping2
Invocation:
add compileAndCheck to all_set
found containsAssert getting True in analyze_invocation, add compileAndCheck to pure_name_set
qualifier: 
code:     compileAndCheck("function __BASIC__(__PARAM1__) {}");
analyze: testLiteralMappings
Invocation:
add compileAndCheck to all_set
found containsAssert getting True in analyze_invocation, add compileAndCheck to pure_name_set
qualifier: 
code:     compileAndCheck("function __BASIC__(__PARAM1__, __PARAM2__) { " +
analyze: testLiteralMappingsGoldenOutput
Invocation:
add checkSourceMap to all_set
found containsAssert getting True in analyze_invocation, add checkSourceMap to pure_name_set
qualifier: 
code:     checkSourceMap("function __BASIC__(__PARAM1__, __PARAM2__) { " +
analyze: testMultilineMapping
Invocation:
add compileAndCheck to all_set
found containsAssert getting True in analyze_invocation, add compileAndCheck to pure_name_set
qualifier: 
code:     compileAndCheck("function __BASIC__(__PARAM1__, __PARAM2__) {\n" +
analyze: testMultilineMapping2
Invocation:
add compileAndCheck to all_set
found containsAssert getting True in analyze_invocation, add compileAndCheck to pure_name_set
qualifier: 
code:     compileAndCheck("function __BASIC__(__PARAM1__, __PARAM2__) {\n" +
analyze: testMultiFunctionMapping
Invocation:
add compileAndCheck to all_set
found containsAssert getting True in analyze_invocation, add compileAndCheck to pure_name_set
qualifier: 
code:     compileAndCheck("function __BASIC__(__PARAM1__, __PARAM2__) {\n" +
analyze: testGoldenOutput0a
Invocation:
add checkSourceMap to all_set
found containsAssert getting True in analyze_invocation, add checkSourceMap to pure_name_set
qualifier: 
code:     checkSourceMap("a;",
analyze: testGoldenOutput1
Invocation:
add checkSourceMap to all_set
found containsAssert getting True in analyze_invocation, add checkSourceMap to pure_name_set
qualifier: 
code:     checkSourceMap("function f(foo, bar) { foo = foo + bar + 2; return foo; }",
Invocation:
add checkSourceMap to all_set
found containsAssert getting True in analyze_invocation, add checkSourceMap to pure_name_set
qualifier: 
code:     checkSourceMap("function f(foo, bar) { foo = foo + bar + 2; return foo; }",
analyze: testGoldenOutput2
Invocation:
add checkSourceMap to all_set
found containsAssert getting True in analyze_invocation, add checkSourceMap to pure_name_set
qualifier: 
code:     checkSourceMap("function f(foo, bar) {\r\n\n\n\nfoo = foo + bar + foo;" +
analyze: testGoldenOutput3
Invocation:
add checkSourceMap to all_set
found containsAssert getting True in analyze_invocation, add checkSourceMap to pure_name_set
qualifier: 
code:     checkSourceMap("c:\\myfile.js",
analyze: testGoldenOutput4
Invocation:
add checkSourceMap to all_set
found containsAssert getting True in analyze_invocation, add checkSourceMap to pure_name_set
qualifier: 
code:     checkSourceMap("c:\\myfile.js",
analyze: testGoldenOutput5
Invocation:
add checkSourceMap to all_set
found containsAssert getting True in analyze_invocation, add checkSourceMap to pure_name_set
qualifier: 
code:     checkSourceMap(
Invocation:
add checkSourceMap to all_set
found containsAssert getting True in analyze_invocation, add checkSourceMap to pure_name_set
qualifier: 
code:     checkSourceMap("c:\\myfile.js",
analyze: testParseSourceMetaMap
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add add to all_set
Invocation:
add append to all_set
Invocation:
add add to all_set
Invocation:
add appendIndexMapTo to all_set
Invocation:
add check to all_set
found containsAssert getting True in analyze_invocation, add check to pure_name_set
qualifier: 
code:     check(inputs, output.toString(), mapContents.toString(),
analyze: testSourceMapMerging
Invocation:
add put to all_set
Invocation:
add put to all_set
Invocation:
add append to all_set
Invocation:
add mergeMapSection to all_set
Invocation:
add mergeMapSection to all_set
Invocation:
add appendTo to all_set
Invocation:
add check to all_set
found containsAssert getting True in analyze_invocation, add check to pure_name_set
qualifier: 
code:     check(inputs, output.toString(), mapContents.toString());
-------------
-------------
Closure_48
/root/workbench/d4j_buggy/Closure_48/test//com/google/javascript/jscomp/TypeCheckTest.java
analyze: testIssue586
Invocation:
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
-------------
-------------
Closure_49
/root/workbench/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionInjectorTest.java
analyze: testInline13
Invocation:
add helperInlineReferenceToFunction to all_set
found containsAssert getting True in analyze_invocation, add helperInlineReferenceToFunction to pure_name_set
qualifier: 
code:     helperInlineReferenceToFunction(
analyze: testInline14
Invocation:
add helperInlineReferenceToFunction to all_set
found containsAssert getting True in analyze_invocation, add helperInlineReferenceToFunction to pure_name_set
qualifier: 
code:     helperInlineReferenceToFunction(
analyze: testInline15
Invocation:
add helperInlineReferenceToFunction to all_set
found containsAssert getting True in analyze_invocation, add helperInlineReferenceToFunction to pure_name_set
qualifier: 
code:     helperInlineReferenceToFunction(
analyze: testInline16
Invocation:
add helperInlineReferenceToFunction to all_set
found containsAssert getting True in analyze_invocation, add helperInlineReferenceToFunction to pure_name_set
qualifier: 
code:     helperInlineReferenceToFunction(
analyze: testInline17
Invocation:
add helperInlineReferenceToFunction to all_set
found containsAssert getting True in analyze_invocation, add helperInlineReferenceToFunction to pure_name_set
qualifier: 
code:     helperInlineReferenceToFunction(
analyze: testInline18
Invocation:
add helperInlineReferenceToFunction to all_set
found containsAssert getting True in analyze_invocation, add helperInlineReferenceToFunction to pure_name_set
qualifier: 
code:     helperInlineReferenceToFunction(
analyze: testInline19
Invocation:
add helperInlineReferenceToFunction to all_set
found containsAssert getting True in analyze_invocation, add helperInlineReferenceToFunction to pure_name_set
qualifier: 
code:     helperInlineReferenceToFunction(
analyze: testInline19b
Invocation:
add helperInlineReferenceToFunction to all_set
found containsAssert getting True in analyze_invocation, add helperInlineReferenceToFunction to pure_name_set
qualifier: 
code:     helperInlineReferenceToFunction(
analyze: testInlineIntoLoop
Invocation:
add helperInlineReferenceToFunction to all_set
found containsAssert getting True in analyze_invocation, add helperInlineReferenceToFunction to pure_name_set
qualifier: 
code:     helperInlineReferenceToFunction(
Invocation:
add helperInlineReferenceToFunction to all_set
found containsAssert getting True in analyze_invocation, add helperInlineReferenceToFunction to pure_name_set
qualifier: 
code:     helperInlineReferenceToFunction(
Invocation:
add helperInlineReferenceToFunction to all_set
found containsAssert getting True in analyze_invocation, add helperInlineReferenceToFunction to pure_name_set
qualifier: 
code:     helperInlineReferenceToFunction(
analyze: testInlineFunctionWithInnerFunction5
Invocation:
add helperInlineReferenceToFunction to all_set
found containsAssert getting True in analyze_invocation, add helperInlineReferenceToFunction to pure_name_set
qualifier: 
code:     helperInlineReferenceToFunction(
analyze: testBug1897706
Invocation:
add helperInlineReferenceToFunction to all_set
found containsAssert getting True in analyze_invocation, add helperInlineReferenceToFunction to pure_name_set
qualifier: 
code:     helperInlineReferenceToFunction(
Invocation:
add helperInlineReferenceToFunction to all_set
found containsAssert getting True in analyze_invocation, add helperInlineReferenceToFunction to pure_name_set
qualifier: 
code:     helperInlineReferenceToFunction(
Invocation:
add helperInlineReferenceToFunction to all_set
found containsAssert getting True in analyze_invocation, add helperInlineReferenceToFunction to pure_name_set
qualifier: 
code:     helperInlineReferenceToFunction(
/root/workbench/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/FunctionToBlockMutatorTest.java
analyze: testMutateWithParameters3
Invocation:
add helperMutate to all_set
found containsAssert getting True in analyze_invocation, add helperMutate to pure_name_set
qualifier: 
code:     helperMutate(
analyze: testMutate8
Invocation:
add helperMutate to all_set
found containsAssert getting True in analyze_invocation, add helperMutate to pure_name_set
qualifier: 
code:     helperMutate(
analyze: testMutateInitializeUninitializedVars1
Invocation:
add helperMutate to all_set
found containsAssert getting True in analyze_invocation, add helperMutate to pure_name_set
qualifier: 
code:     helperMutate(
analyze: testMutateInitializeUninitializedVars2
Invocation:
add helperMutate to all_set
found containsAssert getting True in analyze_invocation, add helperMutate to pure_name_set
qualifier: 
code:     helperMutate(
analyze: testMutateCallInLoopVars1
Invocation:
add helperMutate to all_set
found containsAssert getting True in analyze_invocation, add helperMutate to pure_name_set
qualifier: 
code:     helperMutate(
Invocation:
add helperMutate to all_set
found containsAssert getting True in analyze_invocation, add helperMutate to pure_name_set
qualifier: 
code:     helperMutate(
analyze: testMutateFunctionDefinition
Invocation:
add helperMutate to all_set
found containsAssert getting True in analyze_invocation, add helperMutate to pure_name_set
qualifier: 
code:      helperMutate(
/root/workbench/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/InlineFunctionsTest.java
analyze: testInlineFunctions9
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function INC(x){return x++}" +
analyze: testInlineFunctions10
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function INC(x){return x++}" +
analyze: testInlineFunctions13
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x){return x}" +
analyze: testInlineFunctions15b
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function foo(){var x;return function(a){return a+1}}" +
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function foo(){var x;return function(a){return a+1}}" +
analyze: testInlineFunctions15d
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function foo(){var x; return function(a){return a+1}}" +
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function foo(){var x; return function(a){return a+1}}" +
analyze: testInlineFunctions16a
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("function foo(b){return window.bar(function(){c(b)})}" +
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testInlineFunctions22
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function plex(a){if(a) return 0;else return 1;}" +
analyze: testInlineFunctions23
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function complex(a){if(a) return 0;else return 1;}" +
analyze: testMixedModeInliningCosting3
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testNoInlineIfParametersModified1
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x){return x=1}f(undefined)",
analyze: testNoInlineIfParametersModified2
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x){return (x)=1;}f(2)",
analyze: testNoInlineIfParametersModified3
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x){return x*=2}f(2)",
analyze: testNoInlineIfParametersModified4
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x){return x?(x=2):0}f(2)",
analyze: testNoInlineIfParametersModified5
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x,y){return x?(y=2):0}f(2,undefined)",
analyze: testNoInlineIfParametersModified6
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x,y){return x?(y=2):0}f(2)",
analyze: testNoInlineIfParametersModified7
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(a){return++a<++a}f(1)",
analyze: testInlineNeverMutateConstants
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x){return x=1}f(undefined)",
analyze: testInlineNeverOverrideNewValues
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(a){return++a<++a}f(1)",
analyze: testInlineBlockMutableArgs1
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function foo(x){x+x}foo([])",
analyze: testInlineBlockMutableArgs2
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function foo(x){x+x}foo(new Date)",
analyze: testInlineBlockMutableArgs3
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function foo(x){x+x}foo(true&&new Date)",
analyze: testInlineBlockMutableArgs4
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function foo(x){x+x}foo({})",
analyze: testShadowVariables1
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a=0;" +
analyze: testShadowVariables3
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a=0;" +
analyze: testShadowVariables6
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a=0;" +
analyze: testShadowVariables7
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a=3;" +
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a=3;" +
analyze: testShadowVariables16
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a=3;" +
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a=3;" +
analyze: testShadowVariables18
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a=0;" +
analyze: testCostBasedInlining9
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(a){return 1 + a + a;}" +
analyze: testCostBasedInlining11
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(a){return a + a;}" +
analyze: testComplexInlineNoResultNoParamCall3
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(){a();b();var z=1+1}function _foo(){f()}",
analyze: testComplexInline7
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x,y){if (x) return y(); else return true;}" +
analyze: testComplexInlineVars7
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(x,y){if (x) return y(); else return true;}" +
analyze: testComplexSample
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var foo = function(stylesString, opt_element) { " +
analyze: testComplexFunctionWithFunctionDefinition2
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("function f(a){call(function(){return})}f()");
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("(function(){" +
analyze: testComplexFunctionWithFunctionDefinition2a
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("(function(){" +
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("(function(){" +
analyze: testComplexFunctionWithFunctionDefinition3
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("function f(){var a; call(function(){return a})}f()");
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(){var a; call(function(){return a})}f()",
analyze: testDecomposeFunctionExpressionInCall
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testFunctionExpressionCallInlining11b
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("((function(){var a; return function(){foo()}})())();");
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testFunctionExpressionOmega
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("(function (f){f(f)})(function(f){f(f)})",
analyze: testInlineWithThis7
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(a){a=1;this} f.call();",
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(a){a=1;this} f.call(x, x);",
analyze: testFunctionExpressionYCombinator
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame(
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testBug4944818
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testIssue423
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testAnonymous1
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();",
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("(function(){var a=10;(function(){var b=a;a++;alert(b)})()})();",
analyze: testAnonymous3
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("(function(){var a=10;(function(){arguments;})()})();");
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("(function(){var a=10;(function(){arguments;})()})();",
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("(function(){(function(){arguments;})()})();",
analyze: testLoopWithFunctionWithFunction
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function _testLocalVariableInLoop_() {\n" +
analyze: testMethodWithFunctionWithFunction
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function _testLocalVariable_() {\n" +
/root/workbench/d4j_buggy/Closure_49/test//com/google/javascript/jscomp/MakeDeclaredNamesUniqueTest.java
analyze: testMakeLocalNamesUniqueWithContext5
Invocation:
add testWithInversion to all_set
found containsAssert getting True in analyze_invocation, add testWithInversion to pure_name_set
qualifier: 
code:     testWithInversion(
Invocation:
add testWithInversion to all_set
found containsAssert getting True in analyze_invocation, add testWithInversion to pure_name_set
qualifier: 
code:     testWithInversion(
Invocation:
add testWithInversion to all_set
found containsAssert getting True in analyze_invocation, add testWithInversion to pure_name_set
qualifier: 
code:     testWithInversion(
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
-------------
-------------
Closure_50
/root/workbench/d4j_buggy/Closure_50/test//com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java
analyze: testNoStringJoin
Invocation:
add foldSame to all_set
found containsAssert getting True in analyze_invocation, add foldSame to pure_name_set
qualifier: 
code:     foldSame("x = [].join(',',2)");
Invocation:
add foldSame to all_set
found containsAssert getting True in analyze_invocation, add foldSame to pure_name_set
qualifier: 
code:     foldSame("x = [].join(f)");
analyze: testStringJoinAdd
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = [].join(',')", "x = \"\"");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a'].join(',')", "x = \"a\"");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', foo, 'b', 'c'].join(',')",
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = [foo, 'a', 'b', 'c'].join(',')",
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', 'b', 'c', foo].join(',')",
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a=', 5].join('')", "x = \"a=5\"");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', '5'].join(7)", "x = \"a75\"");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a=', false].join('')", "x = \"a=false\"");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', '5', 'c'].join('a very very very long chain')",
Invocation:
add foldSame to all_set
found containsAssert getting True in analyze_invocation, add foldSame to pure_name_set
qualifier: 
code:     foldSame("x = ['', foo].join('-')");
Invocation:
add foldSame to all_set
found containsAssert getting True in analyze_invocation, add foldSame to pure_name_set
qualifier: 
code:     foldSame("x = ['', foo, ''].join()");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['', '', foo, ''].join(',')",
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['', '', foo, '', ''].join(',')",
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['', '', foo, '', '', bar].join(',')",
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = [1,2,3].join('abcdef')",
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = [1,2].join()", "x = '1,2'");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = [null,undefined,''].join(',')", "x = ',,'");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = [null,undefined,0].join(',')", "x = ',,0'");
Invocation:
add foldSame to all_set
found containsAssert getting True in analyze_invocation, add foldSame to pure_name_set
qualifier: 
code:     foldSame("x = [[1,2],[3,4]].join()"); // would like: "x = '1,2,3,4'"
-------------
-------------
Closure_51
/root/workbench/d4j_buggy/Closure_51/test//com/google/javascript/jscomp/CodePrinterTest.java
analyze: testIssue582
Invocation:
add assertPrint to all_set
found containsAssert getting True in analyze_invocation, add assertPrint to pure_name_set
qualifier: 
code:     assertPrint("var x = -0.0;", "var x=-0.0");
-------------
-------------
Closure_54
/root/workbench/d4j_buggy/Closure_54/test//com/google/javascript/jscomp/TypeCheckTest.java
analyze: testIssue537a
Invocation:
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
analyze: testIssue537b
Invocation:
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
/root/workbench/d4j_buggy/Closure_54/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java
analyze: testPropertyOnUnknownSuperClass2
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame(
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("Foo", x.toString());
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("Foo.prototype", x.getImplicitPrototype().toString());
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(x.getImplicitPrototype().hasOwnProperty("bar"));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("?", x.getPropertyType("bar").toString());
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(x.isPropertyTypeInferred("bar"));
-------------
-------------
Closure_60
/root/workbench/d4j_buggy/Closure_60/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
analyze: testIssue504
Invocation:
add add to all_set
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("void function() { alert('hi'); }();",
/root/workbench/d4j_buggy/Closure_60/test//com/google/javascript/jscomp/NodeUtilTest.java
analyze: testGetBooleanValue
Invocation:
add assertPureBooleanTrue to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanTrue to pure_name_set
qualifier: 
code:     assertPureBooleanTrue("true");
Invocation:
add assertPureBooleanTrue to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanTrue to pure_name_set
qualifier: 
code:     assertPureBooleanTrue("10");
Invocation:
add assertPureBooleanTrue to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanTrue to pure_name_set
qualifier: 
code:     assertPureBooleanTrue("'0'");
Invocation:
add assertPureBooleanTrue to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanTrue to pure_name_set
qualifier: 
code:     assertPureBooleanTrue("/a/");
Invocation:
add assertPureBooleanTrue to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanTrue to pure_name_set
qualifier: 
code:     assertPureBooleanTrue("{}");
Invocation:
add assertPureBooleanTrue to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanTrue to pure_name_set
qualifier: 
code:     assertPureBooleanTrue("[]");
Invocation:
add assertPureBooleanFalse to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanFalse to pure_name_set
qualifier: 
code:     assertPureBooleanFalse("false");
Invocation:
add assertPureBooleanFalse to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanFalse to pure_name_set
qualifier: 
code:     assertPureBooleanFalse("null");
Invocation:
add assertPureBooleanFalse to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanFalse to pure_name_set
qualifier: 
code:     assertPureBooleanFalse("0");
Invocation:
add assertPureBooleanFalse to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanFalse to pure_name_set
qualifier: 
code:     assertPureBooleanFalse("''");
Invocation:
add assertPureBooleanFalse to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanFalse to pure_name_set
qualifier: 
code:     assertPureBooleanFalse("undefined");
Invocation:
add assertPureBooleanFalse to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanFalse to pure_name_set
qualifier: 
code:     assertPureBooleanFalse("void 0");
Invocation:
add assertPureBooleanUnknown to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanUnknown to pure_name_set
qualifier: 
code:     assertPureBooleanUnknown("void foo()");
Invocation:
add assertPureBooleanUnknown to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanUnknown to pure_name_set
qualifier: 
code:     assertPureBooleanUnknown("b");
Invocation:
add assertPureBooleanUnknown to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanUnknown to pure_name_set
qualifier: 
code:     assertPureBooleanUnknown("-'0.0'");
Invocation:
add assertPureBooleanUnknown to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanUnknown to pure_name_set
qualifier: 
code:     assertPureBooleanUnknown("{a:foo()}");
Invocation:
add assertPureBooleanUnknown to all_set
found containsAssert getting True in analyze_invocation, add assertPureBooleanUnknown to pure_name_set
qualifier: 
code:     assertPureBooleanUnknown("[foo()]");
-------------
-------------
Closure_64
/root/workbench/d4j_buggy/Closure_64/test//com/google/javascript/jscomp/CommandLineRunnerTest.java
analyze: testES5StrictUseStrictMultipleInputs
Invocation:
add add to all_set
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals("'use strict'", outputSource.substring(0, 12));
Invocation:
add assertEquals to all_set
found containsAssert getting True in analyze_invocation, add assertEquals to pure_name_set
qualifier: 
code:     assertEquals(outputSource.substring(13).indexOf("'use strict'"), -1);
-------------
-------------
Closure_68
/root/workbench/d4j_buggy/Closure_68/test//com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
analyze: testIssue477
Invocation:
add parse to all_set
found containsAssert getting True in analyze_invocation, add parse to pure_name_set
qualifier: 
code:     parse("@type function */",
-------------
-------------
Closure_72
/root/workbench/d4j_buggy/Closure_72/test//com/google/javascript/jscomp/InlineFunctionsTest.java
analyze: testInlineFunctions31
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function foo(){ lab:{4;} }" +
-------------
-------------
Closure_74
/root/workbench/d4j_buggy/Closure_74/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
analyze: testFoldComparison3
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = !1 == !0", "x = false");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = !0 == !0", "x = true");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = !1 == !1", "x = true");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = !1 == null", "x = false");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = !1 == !0", "x = false");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = !0 == null", "x = false");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("!0 == !0", "true");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("!1 == null", "false");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("!1 == !0", "false");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("!0 == null", "false");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = !0 === !0", "x = true");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = !1 === !1", "x = true");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = !1 === null", "x = false");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = !1 === !0", "x = false");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = !0 === null", "x = false");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("!0 === !0", "true");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("!1 === null", "false");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("!1 === !0", "false");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("!0 === null", "false");
analyze: testInvertibleOperators
Invocation:
add assertSameResults to all_set
found containsAssert getting True in analyze_invocation, add assertSameResults to pure_name_set
qualifier: 
code:             assertSameResults(join(a, op, b), "false");
Invocation:
add assertSameResults to all_set
found containsAssert getting True in analyze_invocation, add assertSameResults to pure_name_set
qualifier: 
code:             assertSameResults(join(a, inverse, b), "false");
Invocation:
add foldSame to all_set
found containsAssert getting True in analyze_invocation, add foldSame to pure_name_set
qualifier: 
code:               foldSame(join(a, op, b));
Invocation:
add foldSame to all_set
found containsAssert getting True in analyze_invocation, add foldSame to pure_name_set
qualifier: 
code:               foldSame(join(a, inverse, b));
Invocation:
add assertSameResults to all_set
found containsAssert getting True in analyze_invocation, add assertSameResults to pure_name_set
qualifier: 
code:               assertSameResults(join(a, op, b), "true");
Invocation:
add assertSameResults to all_set
found containsAssert getting True in analyze_invocation, add assertSameResults to pure_name_set
qualifier: 
code:               assertSameResults(join(a, inverse, b), "false");
Invocation:
add assertNotSameResults to all_set
found containsAssert getting True in analyze_invocation, add assertNotSameResults to pure_name_set
qualifier: 
code:             assertNotSameResults(join(a, op, b), join(a, inverse, b));
analyze: testCommutativeOperators
Invocation:
add assertSameResultsOrUncollapsed to all_set
found containsAssert getting True in analyze_invocation, add assertSameResultsOrUncollapsed to pure_name_set
qualifier: 
code:           assertSameResultsOrUncollapsed(join(a, op, b), join(b, op, a));
-------------
-------------
Closure_75
/root/workbench/d4j_buggy/Closure_75/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
analyze: testIEString
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("!+'\\v1'");
-------------
-------------
Closure_76
/root/workbench/d4j_buggy/Closure_76/test//com/google/javascript/jscomp/DeadAssignmentsEliminationTest.java
analyze: testInExpression2
Invocation:
add inFunction to all_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction(
Invocation:
add inFunction to all_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction(
Invocation:
add inFunction to all_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction("var a; (a = 1) || (a = 2); return a");
Invocation:
add inFunction to all_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction(
Invocation:
add inFunction to all_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction("var a; a = 1; a ? a = 2 : a; return a");
Invocation:
add inFunction to all_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction(
Invocation:
add inFunction to all_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction("var a; a = 1; a ? a : a =2; return a");
Invocation:
add inFunction to all_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction(
Invocation:
add inFunction to all_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction("var a; (a = 1) ? a = 2 : a = 3; return a");
analyze: testIssue384b
Invocation:
add inFunction to all_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction(
analyze: testIssue384c
Invocation:
add inFunction to all_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction(
analyze: testIssue384d
Invocation:
add inFunction to all_set
found containsAssert getting True in analyze_invocation, add inFunction to pure_name_set
qualifier: 
code:     inFunction(
-------------
-------------
Closure_78
/root/workbench/d4j_buggy/Closure_78/test//com/google/javascript/jscomp/PeepholeFoldConstantsTest.java
analyze: testFoldArithmetic
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = 10 + 20", "x = 30");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = 2 / 4", "x = 0.5");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = 2.25 * 3", "x = 6.75");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("z = x * y", "z = x * y");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = y * 5", "x = y * 5");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = 1 / 0", "x = 1 / 0");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = 3 % 2", "x = 1");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = 3 % -2", "x = 1");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = -1 % 3", "x = -1");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = 1 % 0", "x = 1 % 0");
-------------
-------------
Closure_79
/root/workbench/d4j_buggy/Closure_79/test//com/google/javascript/jscomp/NormalizeTest.java
analyze: testIssue
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a,b,c; var a,b", "a(), b()", "a(), b()", null, null);
/root/workbench/d4j_buggy/Closure_79/test//com/google/javascript/jscomp/VarCheckTest.java
analyze: testVarReferenceInExterns
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("asdf;", "var asdf;",
analyze: testCallInExterns
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("yz();", "function yz() {}",
analyze: testPropReferenceInExterns1
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("asdf.foo;", "var asdf;",
analyze: testPropReferenceInExterns3
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("asdf.foo;", "var asdf;",
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("asdf.foo;", "var asdf;", "var asdf;", null, null);
-------------
-------------
Closure_80
/root/workbench/d4j_buggy/Closure_80/test//com/google/javascript/jscomp/NodeUtilTest.java
analyze: testLocalValue1
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x()"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("this"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("arguments"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("new x()"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("(new x()).y"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("(new x())['y']"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("null"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("undefined"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("Infinity"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("NaN"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("1"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("'a'"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("true"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("false"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("[]"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("{}"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("[x]"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("{'a':x}"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("++x"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("--x"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x++"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x--"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("x=1"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x=[]"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x=y"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("x+=y"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("x*=y"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("x==y"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("x!=y"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("x>y"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("(1,2)"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("(x,1)"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("(x,y)"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("1||2"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x||1"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x||y"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("1||y"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("1&&2"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x&&1"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x&&y"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("1&&y"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("x?1:2"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x?x:2"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x?1:x"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("x?x:y"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("!y"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("~y"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("y + 1"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("y + z"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("y * z"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("'a' in x"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("typeof x"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("x instanceof y"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("void x"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("void 0"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("{}.x"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("{}.toString()"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("o.toString()"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testLocalValue("o.valueOf()"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testLocalValue("delete a.b"));
analyze: testIsBooleanResult
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("1")));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("true")));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("+true")));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("+1")));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("-1")));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("-Infinity")));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("Infinity")));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("NaN")));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("undefined")));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("void 0")));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("a << b")));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("a >> b")));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("a >>> b")));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a == b")));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a != b")));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a === b")));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a !== b")));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a < b")));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a > b")));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a <= b")));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a >= b")));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a in b")));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a instanceof b")));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("'a'")));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("'a'+b")));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("a+'b'")));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("a+b")));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("a()")));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("''.a")));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("a.b")));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("a.b()")));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("a().b()")));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("new a()")));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("delete a")));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("([true,false])")));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("({a:true})")));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("true && false")));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("true || false")));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a ? true : false")));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a,true")));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(NodeUtil.isBooleanResult(getNode("a=true")));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(NodeUtil.isBooleanResult(getNode("a=1")));
-------------
-------------
Closure_84
/root/workbench/d4j_buggy/Closure_84/test//com/google/javascript/jscomp/parsing/ParserTest.java
analyze: testDestructuringAssignForbidden4
Invocation:
add parseError to all_set
found containsAssert getting True in analyze_invocation, add parseError to pure_name_set
qualifier: 
code:     parseError("[x, y] = foo();",
-------------
-------------
Closure_85
/root/workbench/d4j_buggy/Closure_85/test//com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
analyze: testCascadedRemovalOfUnlessUnconditonalJumps
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("switch (a) { case 'a': break; case 'b': break; case 'c': break }",
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("switch (a) { case 'a': break; case 'b': case 'c': }",
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function foo() {" +
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function foo() {" +
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("function foo() {" +
analyze: testIssue311
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function a(b) {\n" +
-------------
-------------
Closure_89
/root/workbench/d4j_buggy/Closure_89/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
analyze: testAliasCreatedForFunctionDepth1_1
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("var a = function(){}; a.b = 1; var c = a; c.b = 2; a.b != c.b;");
analyze: testAliasCreatedForFunctionDepth1_2
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("var a = function(){}; a.b = 1; f(a); a.b;");
analyze: testAliasCreatedForFunctionDepth1_3
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("var a = function(){}; a.b = 1; new f(a); a.b;");
analyze: testAliasCreatedForFunctionDepth2
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testAddPropertyToUncollapsibleFunctionInLocalScopeDepth1
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("function a() {} var c = a; (function() {a.b = 0;})(); a.b;");
analyze: testAddPropertyToUncollapsibleNamedCtorInLocalScopeDepth1
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame(
analyze: testAddPropertyToUncollapsibleFunctionInLocalScopeDepth2
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a = {}; a.b = function (){}; var d = a.b;" +
analyze: testAddPropertyToChildOfUncollapsibleFunctionInLocalScope
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame(
-------------
-------------
Closure_90
/root/workbench/d4j_buggy/Closure_90/test//com/google/javascript/jscomp/TypeCheckTest.java
analyze: testBackwardsTypedefUse8
Invocation:
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
analyze: testBackwardsTypedefUse9
Invocation:
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
-------------
-------------
Closure_94
/root/workbench/d4j_buggy/Closure_94/test//com/google/javascript/jscomp/NodeUtilTest.java
analyze: testValidDefine
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testValidDefineValue("1"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testValidDefineValue("-3"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testValidDefineValue("true"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testValidDefineValue("false"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testValidDefineValue("'foo'"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testValidDefineValue("x"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testValidDefineValue("null"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testValidDefineValue("undefined"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testValidDefineValue("NaN"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testValidDefineValue("!true"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testValidDefineValue("-true"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testValidDefineValue("1 & 8"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testValidDefineValue("1 + 8"));
Invocation:
add assertTrue to all_set
found containsAssert getting True in analyze_invocation, add assertTrue to pure_name_set
qualifier: 
code:     assertTrue(testValidDefineValue("'a' + 'b'"));
Invocation:
add assertFalse to all_set
found containsAssert getting True in analyze_invocation, add assertFalse to pure_name_set
qualifier: 
code:     assertFalse(testValidDefineValue("1 & foo"));
/root/workbench/d4j_buggy/Closure_94/test//com/google/javascript/jscomp/ProcessDefinesTest.java
analyze: testOverridingString1
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testOverridingString3
Invocation:
add put to all_set
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
-------------
-------------
Closure_96
/root/workbench/d4j_buggy/Closure_96/test//com/google/javascript/jscomp/TypeCheckTest.java
analyze: testFunctionArguments16
Invocation:
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
-------------
-------------
Closure_98
/root/workbench/d4j_buggy/Closure_98/test//com/google/javascript/jscomp/InlineVariablesTest.java
analyze: testNoInlineAliasesInLoop
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame(
-------------
-------------
Closure_99
/root/workbench/d4j_buggy/Closure_99/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
analyze: testInterface1
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame(
analyze: testMethod4
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a.prototype['x' + 'y'] =  function() { this.foo = 3; };");
analyze: testPropertyOfMethod
Invocation:
add testFailure to all_set
found containsAssert getting True in analyze_invocation, add testFailure to pure_name_set
qualifier: 
code:     testFailure("a.protoype.b = {}; " +
-------------
-------------
Closure_100
/root/workbench/d4j_buggy/Closure_100/test//com/google/javascript/jscomp/CheckGlobalThisTest.java
analyze: testGlobalThis7
Invocation:
add testFailure to all_set
found containsAssert getting True in analyze_invocation, add testFailure to pure_name_set
qualifier: 
code:     testFailure("var a = this.foo;");
analyze: testStaticFunction6
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("function a() { return function() { this = 8; } }");
analyze: testStaticFunction7
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("var a = function() { return function() { this = 8; } }");
analyze: testStaticFunction8
Invocation:
add testFailure to all_set
found containsAssert getting True in analyze_invocation, add testFailure to pure_name_set
qualifier: 
code:     testFailure("var a = function() { return this.foo; };");
analyze: testStaticMethod2
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a.b = function() { return function() { this.m2 = 5; } }");
analyze: testStaticMethod3
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a.b.c = function() { return function() { this.m2 = 5; } }");
analyze: testInnerFunction1
Invocation:
add testFailure to all_set
found containsAssert getting True in analyze_invocation, add testFailure to pure_name_set
qualifier: 
code:     testFailure("function f() { function g() { return this.x; } }");
analyze: testInnerFunction2
Invocation:
add testFailure to all_set
found containsAssert getting True in analyze_invocation, add testFailure to pure_name_set
qualifier: 
code:     testFailure("function f() { var g = function() { return this.x; } }");
analyze: testInnerFunction3
Invocation:
add testFailure to all_set
found containsAssert getting True in analyze_invocation, add testFailure to pure_name_set
qualifier: 
code:     testFailure(
-------------
-------------
Closure_103
/root/workbench/d4j_buggy/Closure_103/test//com/google/javascript/jscomp/CheckUnreachableCodeTest.java
analyze: testInstanceOfThrowsException
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("function f() {try { if (value instanceof type) return true; } " +
/root/workbench/d4j_buggy/Closure_103/test//com/google/javascript/jscomp/ControlFlowAnalysisTest.java
analyze: testInstanceOf
Invocation:
add assertCrossEdge to all_set
found containsAssert getting True in analyze_invocation, add assertCrossEdge to pure_name_set
qualifier: 
code:     assertCrossEdge(cfg, Token.EXPR_RESULT, Token.BLOCK, Branch.ON_EX);
/root/workbench/d4j_buggy/Closure_103/test//com/google/javascript/jscomp/DisambiguatePropertiesTest.java
analyze: testSupertypeReferenceOfSubtypeProperty
Invocation:
add testSets to all_set
found containsAssert getting True in analyze_invocation, add testSets to pure_name_set
qualifier: 
code:     testSets(false, externs, js, result, "{a=[[Bar.prototype]]}");
-------------
-------------
Closure_105
/root/workbench/d4j_buggy/Closure_105/test//com/google/javascript/jscomp/FoldConstantsTest.java
analyze: testStringJoinAdd
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = [].join(',')", "x = \"\"");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a'].join(',')", "x = \"a\"");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', foo, 'b', 'c'].join(',')", "x = [\"a\",foo,\"b,c\"].join(\",\")");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = [foo, 'a', 'b', 'c'].join(',')", "x = [foo,\"a,b,c\"].join(\",\")");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', 'b', 'c', foo].join(',')", "x = [\"a,b,c\",foo].join(\",\")");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a=', 5].join('')", "x = \"a=5\"");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', '5'].join(7)", "x = \"a75\"");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a=', false].join('')", "x = \"a=false\"");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['a', '5', 'c'].join('a very very very long chain')",
Invocation:
add foldSame to all_set
found containsAssert getting True in analyze_invocation, add foldSame to pure_name_set
qualifier: 
code:     foldSame("x = ['', foo].join(',')");
Invocation:
add foldSame to all_set
found containsAssert getting True in analyze_invocation, add foldSame to pure_name_set
qualifier: 
code:     foldSame("x = ['', foo, ''].join(',')");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['', '', foo, ''].join(',')", "x = [',', foo, ''].join(',')");
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['', '', foo, '', ''].join(',')",
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = ['', '', foo, '', '', bar].join(',')",
Invocation:
add fold to all_set
found containsAssert getting True in analyze_invocation, add fold to pure_name_set
qualifier: 
code:     fold("x = [1,2,3].join('abcdef')",
-------------
-------------
Closure_106
/root/workbench/d4j_buggy/Closure_106/test//com/google/javascript/jscomp/CheckSideEffectsTest.java
analyze: testJSDocComments
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function A() { /** This is a jsdoc comment */ this.foo; }", ok);
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function A() { /* This is a normal comment */ this.foo; }", e);
/root/workbench/d4j_buggy/Closure_106/test//com/google/javascript/jscomp/CollapsePropertiesTest.java
analyze: testCrashInCommaOperator
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a = {}; a.b = function() {},a.b();",
analyze: testCrashInNestedAssign
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a = {}; if (a.b = function() {}) a.b();",
analyze: testTwinReferenceCancelsChildCollapsing
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var a = {}; if (a.b = function() {}) { a.b.c = 3; a.b(a.b.c); }",
-------------
-------------
Closure_108
/root/workbench/d4j_buggy/Closure_108/test//com/google/javascript/jscomp/ScopedAliasesTest.java
analyze: testIssue1144
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var ns = {};" +
-------------
-------------
Closure_110
/root/workbench/d4j_buggy/Closure_110/test//com/google/javascript/jscomp/ScopedAliasesTest.java
analyze: testFunctionDeclaration
Invocation:
add testScoped to all_set
found containsAssert getting True in analyze_invocation, add testScoped to pure_name_set
qualifier: 
code:     testScoped("if (x) { function f() {} } g(f)",
analyze: testHoistedFunctionDeclaration
Invocation:
add testScoped to all_set
found containsAssert getting True in analyze_invocation, add testScoped to pure_name_set
qualifier: 
code:     testScoped(" g(f); function f() {} ",
-------------
-------------
Closure_115
/root/workbench/d4j_buggy/Closure_115/test//com/google/javascript/jscomp/InlineFunctionsTest.java
analyze: testInlineFunctions6
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function BAR_FN(x, y, z) { return z(foo(x + y)) }" +
analyze: testNoInlineIfParametersModified8
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(a){return a.x=2}f(o)", "o.x=2");
analyze: testNoInlineIfParametersModified9
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(a){return a[2]=2}f(o)", "o[2]=2");
analyze: testDoubleInlining1
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var foo = function(a) { return getWindow(a); };" +
analyze: testBug4944818
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
-------------
-------------
Closure_116
/root/workbench/d4j_buggy/Closure_116/test//com/google/javascript/jscomp/FunctionInjectorTest.java
analyze: testIssue1101a
Invocation:
add helperCanInlineReferenceToFunction to all_set
found containsAssert getting True in analyze_invocation, add helperCanInlineReferenceToFunction to pure_name_set
qualifier: 
code:     helperCanInlineReferenceToFunction(CanInlineResult.NO,
analyze: testIssue1101b
Invocation:
add helperCanInlineReferenceToFunction to all_set
found containsAssert getting True in analyze_invocation, add helperCanInlineReferenceToFunction to pure_name_set
qualifier: 
code:     helperCanInlineReferenceToFunction(CanInlineResult.NO,
/root/workbench/d4j_buggy/Closure_116/test//com/google/javascript/jscomp/InlineFunctionsTest.java
analyze: testInlineFunctions6
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function BAR_FN(x, y, z) { return z(nochg(x + y)) }" +
analyze: testInlineIfParametersModified8
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(a){return a.x=2}f(o)", "{o.x=2}");
analyze: testInlineIfParametersModified9
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("function f(a){return a[2]=2}f(o)", "{o[2]=2}");
analyze: testDoubleInlining2
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("var foo = function(a) { return getWindow(a); };" +
analyze: testBug4944818
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testIssue1101
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
-------------
-------------
Closure_117
/root/workbench/d4j_buggy/Closure_117/test//com/google/javascript/jscomp/TypeCheckTest.java
analyze: testIssue1047
Invocation:
add testTypes to all_set
found containsAssert getting True in analyze_invocation, add testTypes to pure_name_set
qualifier: 
code:     testTypes(
-------------
-------------
Closure_127
/root/workbench/d4j_buggy/Closure_127/test//com/google/javascript/jscomp/UnreachableCodeEliminationTest.java
analyze: testIssue4177428a
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame(
analyze: testIssue4177428c
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame(
analyze: testIssue4177428_continue
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame(
analyze: testIssue4177428_return
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test(
analyze: testDontRemoveBreakInTryFinally
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("function f() {b:try{throw 9} finally {break b} return 1;}");
analyze: testDontRemoveBreakInTryFinallySwitch
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("function f() {b:try{throw 9} finally {switch(x) {case 1: break b} } return 1;}");
-------------
-------------
Closure_128
/root/workbench/d4j_buggy/Closure_128/test//com/google/javascript/jscomp/CodePrinterTest.java
analyze: testIssue942
Invocation:
add assertPrint to all_set
found containsAssert getting True in analyze_invocation, add assertPrint to pure_name_set
qualifier: 
code:     assertPrint("var x = {0: 1};", "var x={0:1}");
-------------
-------------
Closure_131
/root/workbench/d4j_buggy/Closure_131/test//com/google/javascript/jscomp/ConvertToDottedPropertiesTest.java
analyze: testDoNotConvert
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a[0]");
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a['']");
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a[' ']");
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a[',']");
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a[';']");
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a[':']");
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a['.']");
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a['0']");
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a['p ']");
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a['p' + '']");
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a[p]");
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a[P]");
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a[$]");
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a[p()]");
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a['default']");
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("a['A\u0004']");
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("a['\u1d17A']", "a['\u1d17A']");
Invocation:
add test to all_set
found containsAssert getting True in analyze_invocation, add test to pure_name_set
qualifier: 
code:     test("a['\u00d1StuffAfter']", "a['\u00d1StuffAfter']");
analyze: testQuotedProps
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("({'':0})");
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("({'1.0':0})");
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("({'\u1d17A':0})");
Invocation:
add testSame to all_set
found containsAssert getting True in analyze_invocation, add testSame to pure_name_set
qualifier: 
code:     testSame("({'a\u0004b':0})");
-------------
-----
qualifiers: 83
sdf
System.out
CompilationLevel.ADVANCED_OPTIMIZATIONS
Mockito
type_that_is_the_upper_bound_of_the_wildcard
v
format
d1
smartNull
b
fitter
series
estimator
cal
integ
multiDirectional
cal2
None
numbers
fd
d
NumberUtils
inputs
v1
map
MathUtils
circle
Arrays
minimizer
mockTwo
g2
ValuedColorEnum.BLUE
Assert
integrator
testCalendar
points
Assertions
s
TimeZone
f
testStatistic
u
maps
DateTimeZone
data
current
output
underlying
a
binomialCache
mock
args
invocationMatcher
MockitoAnnotations
optimizer
Asserts
TestUtils
gval
v_unitize
g
sb
v_null
test
GJChronology
Locale
RandomStringUtils
table
list
dataset
chart
constraints
empty
generator
invocationOnInterface
stats
dateTimeParser
plot
loop
validator
sections
e
veryCoolSpy
overrides
-----
members: 170
testSets
appendIndexMapTo
assertCrossEdge
setAbsoluteAccuracy
optimize
assertSame
assertPrint
binomialCoefficient
getRangeAxisIndex
compileAndCheck
unitVector
setStartConfiguration
testLocal
fill
setDomainAxis
forCollection
addStepHandler
thenCallRealMethod
floatValue
addEventHandler
after
isEqualTo
setDenominatorDegreesOfFreedom
addObservedPoint
testWithInversion
assertSameResultsOrUncollapsed
initMocks
isNotNull
testScoped
mixedVarargs
testSameLocal
addObject
compareTo
fold
integrate
varargsbyte
gcd
removeValue
forMap
doTestUnescapeEntity
getOptima
estimate
addOrUpdate
testTypes
lcm
containsExactly
fail
testClosureTypesMultipleWarnings
inFunction
addValue
addPoint
run
addYears
serializeAndBack
addDays
addMonths
printStackTrace
getOptimaValues
simpleMethod
setConvergenceChecker
setRangeAxis
unitize
assertContains
delegateBooleanAssertion
assertClose
assertTrue
parse
contains
assertMessageContains
addWeeks
assertFalse
testSdfAndFdp
add
assertEquals
assertEquivalenceOperations
checkSourceMap
assertPureBooleanTrue
assertPureBooleanUnknown
createBufferedImage
verify
removeColumn
setTimeZone
setVarianceImpl
isInstanceOf
thenAnswer
varargs
m1
random
when
checkIntegerOverflow
validateNullToStringStyleRegistry
dispose
setEntry
assertNotNull
set
getInstance
testSame
appendFixedWidthPadLeft
check
chiSquareTest
setMaxIterations
forOffsetHoursMinutes
noInline
addChildToBack
removeObject
inline
assertSameResults
getResult
setOrientation
newRow
thenReturn
addSeries
setTime
mock
assertNotSameResults
setGeoMeanImpl
helperCanInlineReferenceToFunction
setRelativeAccuracy
println
validate
foldSame
setObject
append
parseError
setSeed
removeRow
intArgumentMethod
chiSquare
clear
mergeMapSection
callRealMethod
draw
getDomainAxisIndex
assertNull
forList
captureArgumentsFrom
appendFixedWidthPadRight
assertFraction
addHours
assertReflectionArray
setMeanImpl
hashCode
setCategoryKeys
timeout
helperInlineReferenceToFunction
setMaxEvaluations
setFilename
setReferencedType
doTest
test
deleteFirst
getObject
isNull
helperMutate
put
minpackTest
appendTo
setOptionsForCompilationLevel
assertPureBooleanFalse
setDefault
assertThat
get
createNumber
setInitialStepSize
testIR
forSet
testScopedFailure
testFailure
spy
verifyZeroInteractions
-----
in new: 1
validate
-----
all: 170
testSets
appendIndexMapTo
assertCrossEdge
setAbsoluteAccuracy
optimize
assertSame
assertPrint
binomialCoefficient
getRangeAxisIndex
compileAndCheck
unitVector
setStartConfiguration
testLocal
fill
setDomainAxis
forCollection
addStepHandler
thenCallRealMethod
floatValue
addEventHandler
after
isEqualTo
setDenominatorDegreesOfFreedom
addObservedPoint
testWithInversion
assertSameResultsOrUncollapsed
initMocks
isNotNull
testScoped
mixedVarargs
testSameLocal
addObject
compareTo
fold
integrate
varargsbyte
gcd
removeValue
forMap
doTestUnescapeEntity
getOptima
estimate
addOrUpdate
testTypes
lcm
containsExactly
fail
testClosureTypesMultipleWarnings
inFunction
addValue
addPoint
run
addYears
serializeAndBack
addDays
addMonths
printStackTrace
getOptimaValues
simpleMethod
setConvergenceChecker
setRangeAxis
unitize
assertContains
delegateBooleanAssertion
assertClose
assertTrue
parse
contains
assertMessageContains
addWeeks
assertFalse
testSdfAndFdp
add
assertEquals
assertEquivalenceOperations
checkSourceMap
assertPureBooleanTrue
assertPureBooleanUnknown
createBufferedImage
verify
removeColumn
setTimeZone
setVarianceImpl
isInstanceOf
thenAnswer
varargs
m1
random
when
checkIntegerOverflow
validateNullToStringStyleRegistry
dispose
setEntry
assertNotNull
set
getInstance
testSame
appendFixedWidthPadLeft
check
chiSquareTest
setMaxIterations
forOffsetHoursMinutes
noInline
addChildToBack
removeObject
inline
assertSameResults
getResult
setOrientation
newRow
thenReturn
addSeries
setTime
mock
assertNotSameResults
setGeoMeanImpl
helperCanInlineReferenceToFunction
setRelativeAccuracy
println
validate
foldSame
setObject
append
parseError
setSeed
removeRow
intArgumentMethod
chiSquare
clear
mergeMapSection
callRealMethod
draw
getDomainAxisIndex
assertNull
forList
captureArgumentsFrom
appendFixedWidthPadRight
assertFraction
addHours
assertReflectionArray
setMeanImpl
hashCode
setCategoryKeys
timeout
helperInlineReferenceToFunction
setMaxEvaluations
setFilename
setReferencedType
doTest
test
deleteFirst
getObject
isNull
helperMutate
put
minpackTest
appendTo
setOptionsForCompilationLevel
assertPureBooleanFalse
setDefault
assertThat
get
createNumber
setInitialStepSize
testIR
forSet
testScopedFailure
testFailure
spy
verifyZeroInteractions
-----
empty q: 60
validateNullToStringStyleRegistry
testSame
assertNotNull
fail
assertFraction
testClosureTypesMultipleWarnings
testSets
inFunction
check
assertCrossEdge
assertReflectionArray
helperInlineReferenceToFunction
assertSame
assertPrint
serializeAndBack
compileAndCheck
setFilename
testLocal
noInline
inline
doTest
test
assertSameResults
helperMutate
assertContains
delegateBooleanAssertion
assertClose
mock
assertNotSameResults
testWithInversion
assertSameResultsOrUncollapsed
helperCanInlineReferenceToFunction
testScoped
assertTrue
parse
minpackTest
testSameLocal
foldSame
fold
assertMessageContains
assertPureBooleanFalse
assertThat
parseError
assertFalse
testSdfAndFdp
assertPureBooleanUnknown
assertEquals
checkSourceMap
doTestUnescapeEntity
testIR
verify
assertPureBooleanTrue
testTypes
testScopedFailure
spy
testFailure
verifyZeroInteractions
when
assertNull
checkIntegerOverflow
-----
pure: 56
validateNullToStringStyleRegistry
testSame
assertNotNull
fail
assertFraction
testClosureTypesMultipleWarnings
testSets
inFunction
check
assertCrossEdge
assertReflectionArray
helperInlineReferenceToFunction
assertSame
assertPrint
serializeAndBack
compileAndCheck
testLocal
noInline
inline
doTest
test
assertSameResults
helperMutate
assertContains
delegateBooleanAssertion
assertClose
assertNotSameResults
testWithInversion
assertSameResultsOrUncollapsed
helperCanInlineReferenceToFunction
testScoped
assertTrue
parse
minpackTest
testSameLocal
foldSame
fold
assertMessageContains
assertPureBooleanFalse
assertThat
parseError
assertFalse
testSdfAndFdp
assertPureBooleanUnknown
assertEquals
checkSourceMap
doTestUnescapeEntity
testIR
verify
assertPureBooleanTrue
testTypes
testScopedFailure
testFailure
verifyZeroInteractions
assertNull
checkIntegerOverflow
mess: 14
assertThat
assertFalse
fail
assertEquivalenceOperations
assertEquals
chiSquareTest
assertSame
chiSquare
assertTrue
contains
validate
integrate
containsExactly
assertNull
-----
