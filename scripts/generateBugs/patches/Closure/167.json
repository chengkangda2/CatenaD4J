{
    "num_of_hunks": 8,
    "0": {
        "file_name": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "from_line_no": 301,
        "to_line_no": 302,
        "replaced_with": "          left, leftType, leftIsRefineable ? merged.typeA : null,\n          right, rightType, rightIsRefineable ? merged.typeB : null);\n",
        "replaced": "          left, leftIsRefineable, merged.typeA,\n          right, rightIsRefineable, merged.typeB);\n",
        "patch_type": "replace",
        "next_line_no": 303
    },
    "1": {
        "file_name": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "from_line_no": 348,
        "to_line_no": 349,
        "replaced_with": "          left, leftType, leftIsRefineable ? restrictedLeftType : null,\n          right, rightType, rightIsRefineable ? restrictedRightType : null);\n",
        "replaced": "          left, leftIsRefineable, restrictedLeftType,\n          right, rightIsRefineable, restrictedRightType);\n",
        "patch_type": "replace",
        "next_line_no": 350
    },
    "2": {
        "file_name": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "from_line_no": 394,
        "to_line_no": 394,
        "replaced_with": "    if (restrictedType != null && restrictedType != originalType) {\n",
        "replaced": "    if (restrictedType != null && !restrictedType.equals(originalType)) {\n",
        "patch_type": "replace",
        "next_line_no": 395
    },
    "3": {
        "file_name": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "from_line_no": 407,
        "to_line_no": 408,
        "replaced_with": "      Node left, JSType originalLeftType, JSType restrictedLeftType,\n      Node right, JSType originalRightType, JSType restrictedRightType) {\n",
        "replaced": "      Node left, boolean leftIsRefineable, JSType restrictedLeftType,\n      Node right, boolean rightIsRefineable, JSType restrictedRightType) {\n",
        "patch_type": "replace",
        "next_line_no": 409
    },
    "4": {
        "file_name": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "from_line_no": 410,
        "to_line_no": 410,
        "replaced_with": "        restrictedLeftType != null && restrictedLeftType != originalLeftType;\n",
        "replaced": "        leftIsRefineable && restrictedLeftType != null;\n",
        "patch_type": "replace",
        "next_line_no": 411
    },
    "5": {
        "file_name": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "from_line_no": 412,
        "to_line_no": 412,
        "replaced_with": "        restrictedRightType != null && restrictedRightType != originalRightType;\n",
        "replaced": "        rightIsRefineable && restrictedRightType != null;\n",
        "patch_type": "replace",
        "next_line_no": 413
    },
    "6": {
        "file_name": "src/com/google/javascript/jscomp/type/SemanticReverseAbstractInterpreter.java",
        "from_line_no": 430,
        "to_line_no": 434,
        "replaced_with": "      return maybeRestrictName(\n          blindScope, name, type,\n          type.getRestrictedTypeGivenToBooleanOutcome(outcome));\n",
        "replaced": "      JSType restrictedType =\n          type.getRestrictedTypeGivenToBooleanOutcome(outcome);\n      FlowScope informed = blindScope.createChildFlowScope();\n      declareNameInScope(informed, name, restrictedType);\n      return informed;\n",
        "patch_type": "replace",
        "next_line_no": 435
    },
    "7": {
        "file_name": "src/com/google/javascript/rhino/jstype/JSType.java",
        "replaced_with": "    if (outcome && this == getNativeType(JSTypeNative.UNKNOWN_TYPE)) {\n      return getNativeType(JSTypeNative.CHECKED_UNKNOWN_TYPE);\n    }\n",
        "patch_type": "insert",
        "next_line_no": 883
    }
}