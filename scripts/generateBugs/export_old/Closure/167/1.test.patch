{
    "com.google.javascript.rhino.jstype.JSTypeTest::testRestrictedTypeGivenToBoolean": {
        "begin_line_no": 5215,
        "end_line_no": 5282,
        "file_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "to": [
            "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_18() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }"
        ]
    },
    "com.google.javascript.jscomp.TypeCheckTest::testIssue783": {
        "begin_line_no": 5996,
        "end_line_no": 6008,
        "file_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "to": [
            ""
        ]
    },
    "com.google.javascript.jscomp.TypeCheckTest::testMissingProperty20": {
        "begin_line_no": 9114,
        "end_line_no": 9119,
        "file_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "to": [
            ""
        ]
    }
}