{
    "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber": {
        "begin_line_no": 184,
        "end_line_no": 246,
        "file_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "to": [
            "    @Test\n    public void testCreateNumber$catena_30() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            fail(\"Expected NumberFormatException\");                                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }"
        ]
    }
}