{
    "org.apache.commons.math3.dfp.DfpTest::testMultiply": {
        "begin_line_no": 755,
        "end_line_no": 920,
        "file_path": "src/test/java/org/apache/commons/math3/dfp/DfpTest.java",
        "to": [
            "    @Test\n    public void testMultiply$catena_39()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @Test\n    public void testMultiply$catena_37()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testMultiply$catena_38()\n    {\n        try{ test(field.newDfp(\"1\").multiply(field.newDfp(\"1\")),      // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #1\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(1),             // Basic tests   1*1 = 1\n             field.newDfp(\"1\"),\n             0, \"Multiply #2\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(field.newDfp(\"1\")),     // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #3\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-1\").multiply(1),            // Basic tests   -1*1 = -1\n             field.newDfp(\"-1\"),\n             0, \"Multiply #4\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // basic tests with integers\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #5\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(3),\n             field.newDfp(\"6\"),\n             0, \"Multiply #6\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #7\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(3),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #8\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"-6\"),\n             0, \"Multiply #9\");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"-3\")),\n             field.newDfp(\"6\"),\n             0, \"Multiply #10\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //multiply by zero\n\n        try{ test(field.newDfp(\"-2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #11\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(0),\n             field.newDfp(\"-0\"),\n             0, \"Multiply #12\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(field.newDfp(\"0\")),\n             field.newDfp(\"0\"),\n             0, \"Multiply #13\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(0),\n             field.newDfp(\"0\"),\n             0, \"Multiply #14\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(pinf),\n             pinf,\n             0, \"Multiply #15\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"2\").multiply(ninf),\n             ninf,\n             0, \"Multiply #16\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(pinf),\n             ninf,\n             0, \"Multiply #17\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-2\").multiply(ninf),\n             pinf,\n             0, \"Multiply #18\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(field.newDfp(\"-2\")),\n             pinf,\n             0, \"Multiply #18.1\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(2),\n             pinf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #19\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"9.9999999999999950000e131071\"),\n             0, \"Multiply #20\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(2),\n             ninf,\n             DfpField.FLAG_OVERFLOW, \"Multiply #22\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"-5e131071\").multiply(field.newDfp(\"1.999999999999999\")),\n             field.newDfp(\"-9.9999999999999950000e131071\"),\n             0, \"Multiply #23\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1e-65539\").multiply(field.newDfp(\"1e-65539\")),\n             field.newDfp(\"1e-131078\"),\n             DfpField.FLAG_UNDERFLOW, \"Multiply #24\");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(nan),\n             nan,\n             0, \"Multiply #25\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(field.newDfp(\"1\")),\n             nan,\n             0, \"Multiply #26\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(pinf),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(nan),\n             nan,\n             0, \"Multiply #27\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(field.newDfp(\"0\")),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #28\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"0\").multiply(pinf),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #29\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(pinf),\n             pinf,\n             0, \"Multiply #30\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(pinf),\n             ninf,\n             0, \"Multiply #31\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(ninf),\n             ninf,\n             0, \"Multiply #32\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(ninf.multiply(ninf),\n             pinf,\n             0, \"Multiply #33\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(1),\n             pinf,\n             0, \"Multiply #34\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(pinf.multiply(0),\n             nan,\n             DfpField.FLAG_INVALID, \"Multiply #35\");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(nan.multiply(1),\n             nan,\n             0, \"Multiply #36\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ test(field.newDfp(\"1\").multiply(10000),\n             field.newDfp(\"10000\"),\n             0, \"Multiply #37\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        test(field.newDfp(\"2\").multiply(1000000),\n             field.newDfp(\"2000000\"),\n             0, \"Multiply #38\");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ test(field.newDfp(\"1\").multiply(-1),\n             field.newDfp(\"-1\"),\n             0, \"Multiply #39\");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}