{
    "org.apache.commons.lang3.reflect.TypeUtilsTest::testGetTypeArguments": {
        "begin_line_no": 471,
        "end_line_no": 508,
        "file_path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
        "to": [
            "    @Test\n    public void testGetTypeArguments$catena_8() {\n        Map<TypeVariable<?>, Type> typeVarAssigns;\n        TypeVariable<?> treeSetTypeVar;\n        Type typeArg;\n\n        typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);\n        treeSetTypeVar = Comparable.class.getTypeParameters()[0];\n        try{ Assert.assertTrue(\"Type var assigns for Comparable from Integer: \" + typeVarAssigns,\n                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        typeArg = typeVarAssigns.get(treeSetTypeVar);\n        try{ Assert.assertEquals(\"Type argument of Comparable from Integer: \" + typeArg, Integer.class,\n                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);\n        treeSetTypeVar = Comparable.class.getTypeParameters()[0];\n        try{ Assert.assertTrue(\"Type var assigns for Comparable from int: \" + typeVarAssigns,\n                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        typeArg = typeVarAssigns.get(treeSetTypeVar);\n        try{ Assert.assertEquals(\"Type argument of Comparable from int: \" + typeArg, Integer.class,\n                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Collection<Integer> col = Arrays.asList(new Integer[0]);\n        typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);\n        treeSetTypeVar = Comparable.class.getTypeParameters()[0];\n        try{ Assert.assertFalse(\"Type var assigns for Collection from List: \" + typeVarAssigns,\n                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);\n        try{ Assert.assertTrue(typeVarAssigns.size() == 2);                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n        Assert.assertEquals(2, typeVarAssigns.size());                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testGetTypeArguments$catena_9() {\n        Map<TypeVariable<?>, Type> typeVarAssigns;\n        TypeVariable<?> treeSetTypeVar;\n        Type typeArg;\n\n        typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);\n        treeSetTypeVar = Comparable.class.getTypeParameters()[0];\n        try{ Assert.assertTrue(\"Type var assigns for Comparable from Integer: \" + typeVarAssigns,\n                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        typeArg = typeVarAssigns.get(treeSetTypeVar);\n        try{ Assert.assertEquals(\"Type argument of Comparable from Integer: \" + typeArg, Integer.class,\n                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);\n        treeSetTypeVar = Comparable.class.getTypeParameters()[0];\n        try{ Assert.assertTrue(\"Type var assigns for Comparable from int: \" + typeVarAssigns,\n                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        typeArg = typeVarAssigns.get(treeSetTypeVar);\n        try{ Assert.assertEquals(\"Type argument of Comparable from int: \" + typeArg, Integer.class,\n                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Collection<Integer> col = Arrays.asList(new Integer[0]);\n        typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);\n        treeSetTypeVar = Comparable.class.getTypeParameters()[0];\n        try{ Assert.assertFalse(\"Type var assigns for Collection from List: \" + typeVarAssigns,\n                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);\n        try{ Assert.assertTrue(typeVarAssigns.size() == 2);                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n        try{ Assert.assertEquals(2, typeVarAssigns.size());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testGetTypeArguments$catena_10() {\n        Map<TypeVariable<?>, Type> typeVarAssigns;\n        TypeVariable<?> treeSetTypeVar;\n        Type typeArg;\n\n        typeVarAssigns = TypeUtils.getTypeArguments(Integer.class, Comparable.class);\n        treeSetTypeVar = Comparable.class.getTypeParameters()[0];\n        try{ Assert.assertTrue(\"Type var assigns for Comparable from Integer: \" + typeVarAssigns,\n                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        typeArg = typeVarAssigns.get(treeSetTypeVar);\n        try{ Assert.assertEquals(\"Type argument of Comparable from Integer: \" + typeArg, Integer.class,\n                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        typeVarAssigns = TypeUtils.getTypeArguments(int.class, Comparable.class);\n        treeSetTypeVar = Comparable.class.getTypeParameters()[0];\n        try{ Assert.assertTrue(\"Type var assigns for Comparable from int: \" + typeVarAssigns,\n                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        typeArg = typeVarAssigns.get(treeSetTypeVar);\n        try{ Assert.assertEquals(\"Type argument of Comparable from int: \" + typeArg, Integer.class,\n                typeVarAssigns.get(treeSetTypeVar));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Collection<Integer> col = Arrays.asList(new Integer[0]);\n        typeVarAssigns = TypeUtils.getTypeArguments(List.class, Collection.class);\n        treeSetTypeVar = Comparable.class.getTypeParameters()[0];\n        try{ Assert.assertFalse(\"Type var assigns for Collection from List: \" + typeVarAssigns,\n                typeVarAssigns.containsKey(treeSetTypeVar));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        typeVarAssigns = TypeUtils.getTypeArguments(AAAClass.BBBClass.class, AAClass.BBClass.class);\n        try{ Assert.assertTrue(typeVarAssigns.size() == 2);                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.class.getTypeParameters()[0]));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(String.class, typeVarAssigns.get(AAClass.BBClass.class.getTypeParameters()[0]));               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        typeVarAssigns = TypeUtils.getTypeArguments(Other.class, This.class);\n        try{ Assert.assertEquals(2, typeVarAssigns.size());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(String.class, typeVarAssigns.get(This.class.getTypeParameters()[0]));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertEquals(Other.class.getTypeParameters()[0], typeVarAssigns.get(This.class.getTypeParameters()[1]));         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.apache.commons.lang3.reflect.TypeUtilsTest::testIsAssignable": {
        "begin_line_no": 106,
        "end_line_no": 442,
        "file_path": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
        "to": [
            "    @SuppressWarnings(\"boxing\") // deliberately used here\n    @Test\n    public void testIsAssignable$catena_101() throws SecurityException, NoSuchMethodException,\n            NoSuchFieldException {\n        List list0 = null;\n        List<Object> list1 = null;\n        List<?> list2 = null;\n        List<? super Object> list3 = null;\n        List<String> list4 = null;\n        List<? extends String> list5 = null;\n        List<? super String> list6 = null;\n        List[] list7 = null;\n        List<Object>[] list8 = null;\n        List<?>[] list9 = null;\n        List<? super Object>[] list10 = null;\n        List<String>[] list11 = null;\n        List<? extends String>[] list12 = null;\n        List<? super String>[] list13;\n        Class<?> clazz = getClass();\n        Method method = clazz.getMethod(\"dummyMethod\", List.class, List.class, List.class,\n                List.class, List.class, List.class, List.class, List[].class, List[].class,\n                List[].class, List[].class, List[].class, List[].class, List[].class);\n        Type[] types = method.getGenericParameterTypes();\n//        list0 = list0;\n        try{ delegateBooleanAssertion(types, 0, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list1 = list0;\n        try{ delegateBooleanAssertion(types, 0, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list0 = list1;\n        try{ delegateBooleanAssertion(types, 1, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list2 = list0;\n        try{ delegateBooleanAssertion(types, 0, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list0 = list2;\n        try{ delegateBooleanAssertion(types, 2, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list3 = list0;\n        try{ delegateBooleanAssertion(types, 0, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list0 = list3;\n        try{ delegateBooleanAssertion(types, 3, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list4 = list0;\n        try{ delegateBooleanAssertion(types, 0, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list0 = list4;\n        try{ delegateBooleanAssertion(types, 4, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list5 = list0;\n        try{ delegateBooleanAssertion(types, 0, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list0 = list5;\n        try{ delegateBooleanAssertion(types, 5, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list6 = list0;\n        try{ delegateBooleanAssertion(types, 0, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list0 = list6;\n        try{ delegateBooleanAssertion(types, 6, 0, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n//        list1 = list1;\n        try{ delegateBooleanAssertion(types, 1, 1, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list2 = list1;\n        try{ delegateBooleanAssertion(types, 1, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list1 = (List<Object>) list2;\n        try{ delegateBooleanAssertion(types, 2, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        list3 = list1;\n        try{ delegateBooleanAssertion(types, 1, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list1 = (List<Object>) list3;\n        try{ delegateBooleanAssertion(types, 3, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        // list4 = list1;\n        try{ delegateBooleanAssertion(types, 1, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        // list1 = list4;\n        try{ delegateBooleanAssertion(types, 4, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        // list5 = list1;\n        try{ delegateBooleanAssertion(types, 1, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        // list1 = list5;\n        try{ delegateBooleanAssertion(types, 5, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        list6 = list1;\n        try{ delegateBooleanAssertion(types, 1, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list1 = (List<Object>) list6;\n        try{ delegateBooleanAssertion(types, 6, 1, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n//        list2 = list2;\n        try{ delegateBooleanAssertion(types, 2, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list2 = list3;\n        try{ delegateBooleanAssertion(types, 2, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        list2 = list4;\n        try{ delegateBooleanAssertion(types, 3, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list3 = (List<? super Object>) list2;\n        try{ delegateBooleanAssertion(types, 2, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        list2 = list5;\n        try{ delegateBooleanAssertion(types, 4, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list4 = (List<String>) list2;\n        try{ delegateBooleanAssertion(types, 2, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        list2 = list6;\n        try{ delegateBooleanAssertion(types, 5, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list5 = (List<? extends String>) list2;\n        try{ delegateBooleanAssertion(types, 2, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n//        list3 = list3;\n        try{ delegateBooleanAssertion(types, 6, 2, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list6 = (List<? super String>) list2;\n        try{ delegateBooleanAssertion(types, 3, 3, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        // list4 = list3;\n        try{ delegateBooleanAssertion(types, 3, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        // list3 = list4;\n        try{ delegateBooleanAssertion(types, 4, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        // list5 = list3;\n        try{ delegateBooleanAssertion(types, 3, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        // list3 = list5;\n        try{ delegateBooleanAssertion(types, 5, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        list6 = list3;\n        try{ delegateBooleanAssertion(types, 3, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list3 = (List<? super Object>) list6;\n        try{ delegateBooleanAssertion(types, 6, 3, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n//        list4 = list4;\n        try{ delegateBooleanAssertion(types, 4, 4, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list5 = list4;\n        try{ delegateBooleanAssertion(types, 4, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list4 = (List<String>) list5;\n        try{ delegateBooleanAssertion(types, 5, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        list6 = list4;\n        try{ delegateBooleanAssertion(types, 4, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list4 = (List<String>) list6;\n        try{ delegateBooleanAssertion(types, 6, 4, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n//        list5 = list5;\n        try{ delegateBooleanAssertion(types, 5, 5, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list6 = (List<? super String>) list5;\n        try{ delegateBooleanAssertion(types, 5, 6, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        list5 = (List<? extends String>) list6;\n        try{ delegateBooleanAssertion(types, 6, 5, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n//        list6 = list6;\n        try{ delegateBooleanAssertion(types, 6, 6, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n//        list7 = list7;\n        try{ delegateBooleanAssertion(types, 7, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list8 = list7;\n        try{ delegateBooleanAssertion(types, 7, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list7 = list8;\n        try{ delegateBooleanAssertion(types, 8, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list9 = list7;\n        try{ delegateBooleanAssertion(types, 7, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list7 = list9;\n        try{ delegateBooleanAssertion(types, 9, 7, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list10 = list7;\n        try{ delegateBooleanAssertion(types, 7, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        list7 = list10;\n        try{ delegateBooleanAssertion(types, 10, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        list11 = list7;\n        try{ delegateBooleanAssertion(types, 7, 11, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        list7 = list11;\n        try{ delegateBooleanAssertion(types, 11, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        list12 = list7;\n        try{ delegateBooleanAssertion(types, 7, 12, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        list7 = list12;\n        try{ delegateBooleanAssertion(types, 12, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        list13 = list7;\n        try{ delegateBooleanAssertion(types, 7, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        list7 = list13;\n        try{ delegateBooleanAssertion(types, 13, 7, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n//        list8 = list8;\n        try{ delegateBooleanAssertion(types, 8, 8, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list9 = list8;\n        try{ delegateBooleanAssertion(types, 8, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list8 = (List<Object>[]) list9;\n        try{ delegateBooleanAssertion(types, 9, 8, false);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        list10 = list8;\n        try{ delegateBooleanAssertion(types, 8, 10, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        list8 = (List<Object>[]) list10; // NOTE cast is required by Sun Java, but not by Eclipse\n        try{ delegateBooleanAssertion(types, 10, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // list11 = list8;\n        try{ delegateBooleanAssertion(types, 8, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // list8 = list11;\n        try{ delegateBooleanAssertion(types, 11, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // list12 = list8;\n        try{ delegateBooleanAssertion(types, 8, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // list8 = list12;\n        try{ delegateBooleanAssertion(types, 12, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        list13 = list8;\n        try{ delegateBooleanAssertion(types, 8, 13, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        list8 = (List<Object>[]) list13;\n        try{ delegateBooleanAssertion(types, 13, 8, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n//        list9 = list9;\n        try{ delegateBooleanAssertion(types, 9, 9, true);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        list10 = (List<? super Object>[]) list9;\n        try{ delegateBooleanAssertion(types, 9, 10, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        list9 = list10;\n        try{ delegateBooleanAssertion(types, 10, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        list11 = (List<String>[]) list9;\n        try{ delegateBooleanAssertion(types, 9, 11, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        list9 = list11;\n        try{ delegateBooleanAssertion(types, 11, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        list12 = (List<? extends String>[]) list9;\n        try{ delegateBooleanAssertion(types, 9, 12, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        list9 = list12;\n        try{ delegateBooleanAssertion(types, 12, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        list13 = (List<? super String>[]) list9;\n        try{ delegateBooleanAssertion(types, 9, 13, false);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        list9 = list13;\n        try{ delegateBooleanAssertion(types, 13, 9, true);                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n//        list10 = list10;\n        try{ delegateBooleanAssertion(types, 10, 10, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // list11 = list10;\n        try{ delegateBooleanAssertion(types, 10, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        // list10 = list11;\n        try{ delegateBooleanAssertion(types, 11, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        // list12 = list10;\n        try{ delegateBooleanAssertion(types, 10, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        // list10 = list12;\n        try{ delegateBooleanAssertion(types, 12, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        list13 = list10;\n        try{ delegateBooleanAssertion(types, 10, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        list10 = (List<? super Object>[]) list13;\n        try{ delegateBooleanAssertion(types, 13, 10, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n//        list11 = list11;\n        try{ delegateBooleanAssertion(types, 11, 11, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        list12 = list11;\n        try{ delegateBooleanAssertion(types, 11, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        list11 = (List<String>[]) list12;\n        try{ delegateBooleanAssertion(types, 12, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        list13 = list11;\n        try{ delegateBooleanAssertion(types, 11, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        list11 = (List<String>[]) list13;\n        try{ delegateBooleanAssertion(types, 13, 11, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n//        list12 = list12;\n        try{ delegateBooleanAssertion(types, 12, 12, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        list13 = (List<? super String>[]) list12;\n        try{ delegateBooleanAssertion(types, 12, 13, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        list12 = (List<? extends String>[]) list13;\n        try{ delegateBooleanAssertion(types, 13, 12, false);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n//        list13 = list13;\n        try{ delegateBooleanAssertion(types, 13, 13, true);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        Type disType = getClass().getField(\"dis\").getGenericType();\n        // Reporter.log( ( ( ParameterizedType ) disType\n        // ).getOwnerType().getClass().toString() );\n        Type datType = getClass().getField(\"dat\").getGenericType();\n        Type daType = getClass().getField(\"da\").getGenericType();\n        Type uhderType = getClass().getField(\"uhder\").getGenericType();\n        Type dingType = getClass().getField(\"ding\").getGenericType();\n        Type testerType = getClass().getField(\"tester\").getGenericType();\n        Type tester2Type = getClass().getField(\"tester2\").getGenericType();\n        Type dat2Type = getClass().getField(\"dat2\").getGenericType();\n        Type dat3Type = getClass().getField(\"dat3\").getGenericType();\n        dis = dat;\n        try{ Assert.assertTrue(TypeUtils.isAssignable(datType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        // dis = da;\n        try{ Assert.assertFalse(TypeUtils.isAssignable(daType, disType));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        dis = uhder;\n        try{ Assert.assertTrue(TypeUtils.isAssignable(uhderType, disType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        dis = ding;\n        Assert.assertFalse(String.format(\"type %s not assignable to %s!\", dingType, disType),\n                TypeUtils.isAssignable(dingType, disType));                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        dis = tester;\n        try{ Assert.assertTrue(TypeUtils.isAssignable(testerType, disType));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        // dis = tester2;\n        try{ Assert.assertFalse(TypeUtils.isAssignable(tester2Type, disType));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        // dat = dat2;\n        try{ Assert.assertFalse(TypeUtils.isAssignable(dat2Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // dat2 = dat;\n        try{ Assert.assertFalse(TypeUtils.isAssignable(datType, dat2Type));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // dat = dat3;\n        try{ Assert.assertFalse(TypeUtils.isAssignable(dat3Type, datType));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        char ch = 0;\n        boolean bo = false;\n        byte by = 0;\n        short sh = 0;\n        int in = 0;\n        long lo = 0;\n        float fl = 0;\n        double du = 0;\n        du = ch;\n        try{ Assert.assertTrue(TypeUtils.isAssignable(char.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        du = by;\n        try{ Assert.assertTrue(TypeUtils.isAssignable(byte.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        du = sh;\n        try{ Assert.assertTrue(TypeUtils.isAssignable(short.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        du = in;\n        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        du = lo;\n        try{ Assert.assertTrue(TypeUtils.isAssignable(long.class, double.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        du = fl;\n        try{ Assert.assertTrue(TypeUtils.isAssignable(float.class, double.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        lo = in;\n        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, long.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        lo = Integer.valueOf(0);\n        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, long.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Long lngW = 1;\n        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, Long.class));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // lngW = Integer.valueOf( 0 );\n        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, Long.class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        in = Integer.valueOf(0);\n        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer.class, int.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        Integer inte = in;\n        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Integer.class));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Number.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Object.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        Type intComparableType = getClass().getField(\"intComparable\").getGenericType();\n        intComparable = 1;\n        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, intComparableType));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Comparable.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        Serializable ser = 1;\n        try{ Assert.assertTrue(TypeUtils.isAssignable(int.class, Serializable.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        Type longComparableType = getClass().getField(\"longComparable\").getGenericType();\n        // longComparable = 1;\n        try{ Assert.assertFalse(TypeUtils.isAssignable(int.class, longComparableType));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        // longComparable = Integer.valueOf( 0 );\n        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer.class, longComparableType));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // int[] ia;\n        // long[] la = ia;\n        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, long[].class));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        Integer[] ia = null;\n        Type caType = getClass().getField(\"intWildcardComparable\").getGenericType();\n        intWildcardComparable = ia;\n        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, caType));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // int[] ina = ia;\n        try{ Assert.assertFalse(TypeUtils.isAssignable(Integer[].class, int[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        int[] ina = null;\n        Object[] oa;\n        // oa = ina;\n        try{ Assert.assertFalse(TypeUtils.isAssignable(int[].class, Object[].class));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        oa = new Integer[0];\n        try{ Assert.assertTrue(TypeUtils.isAssignable(Integer[].class, Object[].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        Type bClassType = AClass.class.getField(\"bClass\").getGenericType();\n        Type cClassType = AClass.class.getField(\"cClass\").getGenericType();\n        Type dClassType = AClass.class.getField(\"dClass\").getGenericType();\n        Type eClassType = AClass.class.getField(\"eClass\").getGenericType();\n        Type fClassType = AClass.class.getField(\"fClass\").getGenericType();\n        AClass aClass = new AClass(new AAClass<String>());\n        aClass.bClass = aClass.cClass;\n        try{ Assert.assertTrue(TypeUtils.isAssignable(cClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        aClass.bClass = aClass.dClass;\n        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        aClass.bClass = aClass.eClass;\n        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        aClass.bClass = aClass.fClass;\n        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, bClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        aClass.cClass = aClass.dClass;\n        try{ Assert.assertTrue(TypeUtils.isAssignable(dClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        aClass.cClass = aClass.eClass;\n        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        aClass.cClass = aClass.fClass;\n        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, cClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        aClass.dClass = aClass.eClass;\n        try{ Assert.assertTrue(TypeUtils.isAssignable(eClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        aClass.dClass = aClass.fClass;\n        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, dClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        aClass.eClass = aClass.fClass;\n        try{ Assert.assertTrue(TypeUtils.isAssignable(fClassType, eClassType));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}