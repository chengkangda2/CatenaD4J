{
    "org.apache.commons.lang3.math.NumberUtilsTest::testIsNumber": {
        "begin_line_no": 1002,
        "end_line_no": 1139,
        "file_path": "src/test/org/apache/commons/lang3/math/NumberUtilsTest.java",
        "to": [
            "    public void testIsNumber$catena_88() {\n        String val = \"12345\";\n        try{ assertTrue(\"isNumber(String) 1 failed\", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 1 failed\", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"1234.5\";\n        try{ assertTrue(\"isNumber(String) 2 failed\", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 2 failed\", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \".12345\";\n        try{ assertTrue(\"isNumber(String) 3 failed\", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 3 failed\", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"1234E5\";\n        try{ assertTrue(\"isNumber(String) 4 failed\", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 4 failed\", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"1234E+5\";\n        try{ assertTrue(\"isNumber(String) 5 failed\", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 5 failed\", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"1234E-5\";\n        try{ assertTrue(\"isNumber(String) 6 failed\", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 6 failed\", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"123.4E5\";\n        try{ assertTrue(\"isNumber(String) 7 failed\", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 7 failed\", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"-1234\";\n        try{ assertTrue(\"isNumber(String) 8 failed\", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 8 failed\", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"-1234.5\";\n        try{ assertTrue(\"isNumber(String) 9 failed\", NumberUtils.isNumber(val));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 9 failed\", checkCreateNumber(val));           }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"-.12345\";\n        try{ assertTrue(\"isNumber(String) 10 failed\", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 10 failed\", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"-1234E5\";\n        try{ assertTrue(\"isNumber(String) 11 failed\", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 11 failed\", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"0\";\n        try{ assertTrue(\"isNumber(String) 12 failed\", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 12 failed\", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"-0\";\n        try{ assertTrue(\"isNumber(String) 13 failed\", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 13 failed\", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"01234\";\n        try{ assertTrue(\"isNumber(String) 14 failed\", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 14 failed\", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"-01234\";\n        try{ assertTrue(\"isNumber(String) 15 failed\", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 15 failed\", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"0xABC123\";\n        try{ assertTrue(\"isNumber(String) 16 failed\", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 16 failed\", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"0x0\";\n        try{ assertTrue(\"isNumber(String) 17 failed\", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 17 failed\", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"123.4E21D\";\n        try{ assertTrue(\"isNumber(String) 19 failed\", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 19 failed\", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"-221.23F\";\n        try{ assertTrue(\"isNumber(String) 20 failed\", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 20 failed\", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"22338L\";\n        try{ assertTrue(\"isNumber(String) 21 failed\", NumberUtils.isNumber(val));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 21 failed\", checkCreateNumber(val));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = null;\n        try{ assertTrue(\"isNumber(String) 1 Neg failed\", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 1 Neg failed\", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"\";\n        try{ assertTrue(\"isNumber(String) 2 Neg failed\", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 2 Neg failed\", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"--2.3\";\n        try{ assertTrue(\"isNumber(String) 3 Neg failed\", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 3 Neg failed\", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \".12.3\";\n        try{ assertTrue(\"isNumber(String) 4 Neg failed\", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 4 Neg failed\", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"-123E\";\n        try{ assertTrue(\"isNumber(String) 5 Neg failed\", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 5 Neg failed\", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"-123E+-212\";\n        try{ assertTrue(\"isNumber(String) 6 Neg failed\", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 6 Neg failed\", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"-123E2.12\";\n        try{ assertTrue(\"isNumber(String) 7 Neg failed\", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 7 Neg failed\", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"0xGF\";\n        try{ assertTrue(\"isNumber(String) 8 Neg failed\", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 8 Neg failed\", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"0xFAE-1\";\n        try{ assertTrue(\"isNumber(String) 9 Neg failed\", !NumberUtils.isNumber(val));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 9 Neg failed\", !checkCreateNumber(val));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \".\";\n        try{ assertTrue(\"isNumber(String) 10 Neg failed\", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 10 Neg failed\", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"-0ABC123\";\n        try{ assertTrue(\"isNumber(String) 11 Neg failed\", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 11 Neg failed\", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"123.4E-D\";\n        try{ assertTrue(\"isNumber(String) 12 Neg failed\", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 12 Neg failed\", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"123.4ED\";\n        try{ assertTrue(\"isNumber(String) 13 Neg failed\", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 13 Neg failed\", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"1234E5l\";\n        try{ assertTrue(\"isNumber(String) 14 Neg failed\", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 14 Neg failed\", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"11a\";\n        try{ assertTrue(\"isNumber(String) 15 Neg failed\", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 15 Neg failed\", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} \n        val = \"1a\";\n        try{ assertTrue(\"isNumber(String) 16 Neg failed\", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 16 Neg failed\", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} \n        val = \"a\";\n        try{ assertTrue(\"isNumber(String) 17 Neg failed\", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 17 Neg failed\", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} \n        val = \"11g\";\n        try{ assertTrue(\"isNumber(String) 18 Neg failed\", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 18 Neg failed\", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} \n        val = \"11z\";\n        try{ assertTrue(\"isNumber(String) 19 Neg failed\", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 19 Neg failed\", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} \n        val = \"11def\";\n        try{ assertTrue(\"isNumber(String) 20 Neg failed\", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 20 Neg failed\", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} \n        val = \"11d11\";\n        try{ assertTrue(\"isNumber(String) 21 Neg failed\", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 21 Neg failed\", !checkCreateNumber(val));    }catch(Throwable __SHOULD_BE_IGNORED){} \n        val = \"11 11\";\n        try{ assertTrue(\"isNumber(String) 22 Neg failed\", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 22 Neg failed\", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \" 1111\";\n        try{ assertTrue(\"isNumber(String) 23 Neg failed\", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 23 Neg failed\", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        val = \"1111 \";\n        try{ assertTrue(\"isNumber(String) 24 Neg failed\", !NumberUtils.isNumber(val));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"isNumber(String)/createNumber(String) 24 Neg failed\", !checkCreateNumber(val));     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        val = \"2.\";\n        assertTrue(\"isNumber(String) LANG-521 failed\", NumberUtils.isNumber(val));                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}