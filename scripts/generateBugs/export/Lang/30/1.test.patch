{
    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringWithBadSupplementaryChars": {
        "begin_line_no": 182,
        "end_line_no": 190,
        "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "to": [
            "    public void testContainsAny_StringWithBadSupplementaryChars$catena_2() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsAny_StringWithBadSupplementaryChars$catena_0() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsAny_StringWithBadSupplementaryChars$catena_1() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsAny_StringWithBadSupplementaryChars$catena_3() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsAny_StringWithBadSupplementaryChars$catena_4() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsAny_StringWithBadSupplementaryChars$catena_5() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));                          /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringCharArrayWithBadSupplementaryChars": {
        "begin_line_no": 133,
        "end_line_no": 142,
        "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "to": [
            "    public void testContainsAny_StringCharArrayWithBadSupplementaryChars$catena_3() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsAny_StringCharArrayWithBadSupplementaryChars$catena_0() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsAny_StringCharArrayWithBadSupplementaryChars$catena_1() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsAny_StringCharArrayWithBadSupplementaryChars$catena_2() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsAny_StringCharArrayWithBadSupplementaryChars$catena_4() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsAny_StringCharArrayWithBadSupplementaryChars$catena_5() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsAny_StringCharArrayWithBadSupplementaryChars$catena_6() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_CharArrayWithSupplementaryChars": {
        "begin_line_no": 318,
        "end_line_no": 329,
        "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "to": [
            "    public void testContainsNone_CharArrayWithSupplementaryChars$catena_0() {\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsNone_CharArrayWithSupplementaryChars$catena_1() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsNone_CharArrayWithSupplementaryChars$catena_2() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));                      /***** ORIGINAL ASSERTION IS HERE *****/\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsNone_CharArrayWithSupplementaryChars$catena_3() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        assertEquals(-1, CharU20000.indexOf(CharU20001));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsNone_CharArrayWithSupplementaryChars$catena_4() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsNone_CharArrayWithSupplementaryChars$catena_5() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_StringWithSupplementaryChars": {
        "begin_line_no": 372,
        "end_line_no": 383,
        "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "to": [
            "    public void testContainsNone_StringWithSupplementaryChars$catena_0() {\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsNone_StringWithSupplementaryChars$catena_1() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsNone_StringWithSupplementaryChars$catena_2() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));                              /***** ORIGINAL ASSERTION IS HERE *****/\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsNone_StringWithSupplementaryChars$catena_3() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        assertEquals(-1, CharU20000.indexOf(CharU20001));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsNone_StringWithSupplementaryChars$catena_4() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsNone_StringWithSupplementaryChars$catena_5() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringStringWithSupplementaryChars": {
        "begin_line_no": 615,
        "end_line_no": 620,
        "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "to": [
            "    public void testIndexOfAnyBut_StringStringWithSupplementaryChars$catena_2() {\n        try{ assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }"
        ]
    },
    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringCharArrayWithSupplementaryChars": {
        "begin_line_no": 526,
        "end_line_no": 531,
        "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "to": [
            "    public void testIndexOfAny_StringCharArrayWithSupplementaryChars$catena_0() {\n        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));            }catch(Throwable __SHOULD_BE_IGNORED){}    \n    }",
            "    public void testIndexOfAny_StringCharArrayWithSupplementaryChars$catena_2() {\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));            }catch(Throwable __SHOULD_BE_IGNORED){}    \n    }"
        ]
    },
    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringCharArrayWithSupplementaryChars": {
        "begin_line_no": 592,
        "end_line_no": 597,
        "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "to": [
            "    public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars$catena_2() {\n        try{ assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray()));                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));         }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }"
        ]
    },
    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_StringWithBadSupplementaryChars": {
        "begin_line_no": 358,
        "end_line_no": 367,
        "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "to": [
            "    public void testContainsNone_StringWithBadSupplementaryChars$catena_0() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));           }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
            "    public void testContainsNone_StringWithBadSupplementaryChars$catena_1() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));           }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
            "    public void testContainsNone_StringWithBadSupplementaryChars$catena_3() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));           }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
            "    public void testContainsNone_StringWithBadSupplementaryChars$catena_4() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));           }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
            "    public void testContainsNone_StringWithBadSupplementaryChars$catena_5() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));           }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
            "    public void testContainsNone_StringWithBadSupplementaryChars$catena_6() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));                /***** ORIGINAL ASSERTION IS HERE *****/        \n    }"
        ]
    },
    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringStringWithSupplementaryChars": {
        "begin_line_no": 569,
        "end_line_no": 574,
        "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "to": [
            "    public void testIndexOfAny_StringStringWithSupplementaryChars$catena_0() {\n        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}    \n    }",
            "    public void testIndexOfAny_StringStringWithSupplementaryChars$catena_2() {\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}    \n    }"
        ]
    },
    "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_CharArrayWithBadSupplementaryChars": {
        "begin_line_no": 304,
        "end_line_no": 313,
        "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
        "to": [
            "    public void testContainsNone_CharArrayWithBadSupplementaryChars$catena_0() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsNone_CharArrayWithBadSupplementaryChars$catena_1() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsNone_CharArrayWithBadSupplementaryChars$catena_3() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsNone_CharArrayWithBadSupplementaryChars$catena_4() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsNone_CharArrayWithBadSupplementaryChars$catena_5() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testContainsNone_CharArrayWithBadSupplementaryChars$catena_6() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));          /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}