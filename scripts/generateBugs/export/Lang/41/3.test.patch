{
    "org.apache.commons.lang.ClassUtilsTest::test_getShortClassName_Class": {
        "begin_line_no": 91,
        "end_line_no": 124,
        "file_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "to": [
            "    public void test_getShortClassName_Class$catena_13() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void test_getShortClassName_Class$catena_19() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void test_getShortClassName_Class$catena_18() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void test_getShortClassName_Class$catena_17() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void test_getShortClassName_Class$catena_16() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void test_getShortClassName_Class$catena_15() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void test_getShortClassName_Class$catena_20() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void test_getShortClassName_Class$catena_14() {\n        try{ assertEquals(\"ClassUtils\", ClassUtils.getShortClassName(ClassUtils.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry\", ClassUtils.getShortClassName(Map.Entry.class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", ClassUtils.getShortClassName((Class) null));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-535\n        try{ assertEquals(\"String[]\", ClassUtils.getShortClassName(String[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Map.Entry[]\", ClassUtils.getShortClassName(Map.Entry[].class));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitives\n        try{ assertEquals(\"boolean\", ClassUtils.getShortClassName(boolean.class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"byte\", ClassUtils.getShortClassName(byte.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"char\", ClassUtils.getShortClassName(char.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short\", ClassUtils.getShortClassName(short.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int\", ClassUtils.getShortClassName(int.class));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long\", ClassUtils.getShortClassName(long.class));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float\", ClassUtils.getShortClassName(float.class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double\", ClassUtils.getShortClassName(double.class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Primitive Arrays\n        try{ assertEquals(\"boolean[]\", ClassUtils.getShortClassName(boolean[].class));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"byte[]\", ClassUtils.getShortClassName(byte[].class));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"char[]\", ClassUtils.getShortClassName(char[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"short[]\", ClassUtils.getShortClassName(short[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"int[]\", ClassUtils.getShortClassName(int[].class));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"long[]\", ClassUtils.getShortClassName(long[].class));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"float[]\", ClassUtils.getShortClassName(float[].class));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"double[]\", ClassUtils.getShortClassName(double[].class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Arrays of arrays of ...\n        try{ assertEquals(\"String[][]\", ClassUtils.getShortClassName(String[][].class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][]\", ClassUtils.getShortClassName(String[][][].class));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"String[][][][]\", ClassUtils.getShortClassName(String[][][][].class));            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang.ClassUtilsTest::test_getPackageName_Class": {
        "begin_line_no": 140,
        "end_line_no": 162,
        "file_path": "src/test/org/apache/commons/lang/ClassUtilsTest.java",
        "to": [
            ""
        ]
    }
}