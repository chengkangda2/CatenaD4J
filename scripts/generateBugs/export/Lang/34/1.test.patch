{
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionByteArrayArray": {
        "begin_line_no": 264,
        "end_line_no": 271,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testReflectionByteArrayArray$catena_2() {\n        byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReflectionByteArrayArray$catena_0() {\n        byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));          /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionByteArrayArray$catena_1() {\n        byte[][] array = new byte[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectArray": {
        "begin_line_no": 144,
        "end_line_no": 151,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testReflectionObjectArray$catena_2() {\n        Object[] array = new Object[] { null, base, new int[] { 3, 6 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", ToStringBuilder.reflectionToString(array));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReflectionObjectArray$catena_0() {\n        Object[] array = new Object[] { null, base, new int[] { 3, 6 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", ToStringBuilder.reflectionToString(array));            /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionObjectArray$catena_1() {\n        Object[] array = new Object[] { null, base, new int[] { 3, 6 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{<null>,5,{3,6}}]\", ToStringBuilder.reflectionToString(array));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArray": {
        "begin_line_no": 189,
        "end_line_no": 196,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testReflectionCharArray$catena_2() {\n        char[] array = new char[] { 'A', '2', '_', 'D' };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{A,2,_,D}]\", ToStringBuilder.reflectionToString(array));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReflectionCharArray$catena_0() {\n        char[] array = new char[] { 'A', '2', '_', 'D' };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{A,2,_,D}]\", ToStringBuilder.reflectionToString(array));                   /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionCharArray$catena_1() {\n        char[] array = new char[] { 'A', '2', '_', 'D' };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{A,2,_,D}]\", ToStringBuilder.reflectionToString(array));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionHierarchy": {
        "begin_line_no": 313,
        "end_line_no": 336,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testReflectionHierarchy$catena_16() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReflectionHierarchy$catena_0() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionHierarchy$catena_1() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionHierarchy$catena_2() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionHierarchy$catena_3() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionHierarchy$catena_4() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionHierarchy$catena_5() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionHierarchy$catena_6() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionHierarchy$catena_7() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionHierarchy$catena_8() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionHierarchy$catena_9() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionHierarchy$catena_10() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionHierarchy$catena_11() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionHierarchy$catena_12() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionHierarchy$catena_13() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionHierarchy$catena_14() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionHierarchy$catena_15() {\n        ReflectionTestFixtureA baseA = new ReflectionTestFixtureA();\n        String baseStr = this.toBaseString(baseA);\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseA, null, true));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, null));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, Object.class));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[a=a]\", ToStringBuilder.reflectionToString(baseA, null, false, ReflectionTestFixtureA.class));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        ReflectionTestFixtureB baseB = new ReflectionTestFixtureB();\n        baseStr = this.toBaseString(baseB);\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,transientB=t,a=a,transientA=t]\", ToStringBuilder.reflectionToString(baseB, null, true));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, null));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, Object.class));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[b=b,a=a]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureA.class));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[b=b]\", ToStringBuilder.reflectionToString(baseB, null, false, ReflectionTestFixtureB.class));             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceTwoVarsReflectionObjectCycle": {
        "begin_line_no": 530,
        "end_line_no": 534,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testSelfInstanceTwoVarsReflectionObjectCycle$catena_1() throws Exception {\n        SelfInstanceTwoVarsReflectionTestFixture test = new SelfInstanceTwoVarsReflectionTestFixture();\n        try{ assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \",otherType=\" + test.getOtherType().toString() + \"]\", test.toString());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testSelfInstanceTwoVarsReflectionObjectCycle$catena_0() throws Exception {\n        SelfInstanceTwoVarsReflectionTestFixture test = new SelfInstanceTwoVarsReflectionTestFixture();\n        assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \",otherType=\" + test.getOtherType().toString() + \"]\", test.toString());         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionShortArray": {
        "begin_line_no": 171,
        "end_line_no": 178,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testReflectionShortArray$catena_2() {\n        short[] array = new short[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReflectionShortArray$catena_0() {\n        short[] array = new short[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));                  /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionShortArray$catena_1() {\n        short[] array = new short[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionyteArray": {
        "begin_line_no": 180,
        "end_line_no": 187,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testReflectionyteArray$catena_2() {\n        byte[] array = new byte[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReflectionyteArray$catena_0() {\n        byte[] array = new byte[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));                  /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionyteArray$catena_1() {\n        byte[] array = new byte[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArray": {
        "begin_line_no": 162,
        "end_line_no": 169,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testReflectionIntArray$catena_2() {\n        int[] array = new int[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReflectionIntArray$catena_0() {\n        int[] array = new int[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));                  /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionIntArray$catena_1() {\n        int[] array = new int[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArrayArray": {
        "begin_line_no": 282,
        "end_line_no": 289,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testReflectionDoubleArrayArray_catena_2() {\n        double[][] array = new double[][] { { 1.0, 2.29686 }, null, { Double.NaN } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReflectionDoubleArrayArray$catena_0() {\n        double[][] array = new double[][] { { 1.0, 2.29686 }, null, { Double.NaN } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));         /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionDoubleArrayArray$catena_1() {\n        double[][] array = new double[][] { { 1.0, 2.29686 }, null, { Double.NaN } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionhortArrayArray": {
        "begin_line_no": 255,
        "end_line_no": 262,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testReflectionhortArrayArray$catena_2() {\n        short[][] array = new short[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReflectionhortArrayArray$catena_0() {\n        short[][] array = new short[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));          /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionhortArrayArray$catena_1() {\n        short[][] array = new short[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArrayArray": {
        "begin_line_no": 291,
        "end_line_no": 299,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testReflectionBooleanArrayArray$catena_3() {\n        boolean[][] array = new boolean[][] { { true, false }, null, { false } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReflectionBooleanArrayArray$catena_0() {\n        boolean[][] array = new boolean[][] { { true, false }, null, { false } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionBooleanArrayArray$catena_1() {\n        boolean[][] array = new boolean[][] { { true, false }, null, { false } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));         /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionBooleanArrayArray$catena_2() {\n        boolean[][] array = new boolean[][] { { true, false }, null, { false } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(baseStr + \"[{{true,false},<null>,{false}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArrayArray": {
        "begin_line_no": 227,
        "end_line_no": 234,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testReflectionFloatArrayArray$catena_2() {\n        float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReflectionFloatArrayArray$catena_0() {\n        float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));         /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionFloatArrayArray$catena_1() {\n        float[][] array = new float[][] { { 1.0f, 2.29686f }, null, { Float.NaN } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1.0,2.29686},<null>,{NaN}}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionCharArrayArray": {
        "begin_line_no": 273,
        "end_line_no": 280,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testReflectionCharArrayArray$catena_2() {\n        char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReflectionCharArrayArray$catena_0() {\n        char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", ToStringBuilder.reflectionToString(array));          /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionCharArrayArray$catena_1() {\n        char[][] array = new char[][] { { 'A', 'B' }, null, { 'p' } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{A,B},<null>,{p}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testSimpleReflectionObjectCycle": {
        "begin_line_no": 506,
        "end_line_no": 511,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testSimpleReflectionObjectCycle_catena_1() throws Exception {\n        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture();\n        simple.o = simple;\n        try{ assertEquals(this.toBaseString(simple) + \"[o=\" + this.toBaseString(simple) + \"]\", simple.toString());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testSimpleReflectionObjectCycle$catena_0() throws Exception {\n        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture();\n        simple.o = simple;\n        assertEquals(this.toBaseString(simple) + \"[o=\" + this.toBaseString(simple) + \"]\", simple.toString());         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionDoubleArray": {
        "begin_line_no": 198,
        "end_line_no": 205,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testReflectionDoubleArray$catena_2() {\n        double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReflectionDoubleArray$catena_0() {\n        double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));         /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionDoubleArray$catena_1() {\n        double[] array = new double[] { 1.0, 2.9876, -3.00001, 4.3 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayAndObjectCycle": {
        "begin_line_no": 559,
        "end_line_no": 579,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testReflectionArrayAndObjectCycle$catena_2() throws Exception {\n        Object[] objects = new Object[1];\n        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);\n        objects[0] = simple;\n        try{ assertEquals(\n            this.toBaseString(objects)\n                + \"[{\"\n                + this.toBaseString(simple)\n                + \"[o=\"\n                + this.toBaseString(objects)\n                + \"]\"\n                + \"}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\n            this.toBaseString(simple)\n                + \"[o={\"\n                + this.toBaseString(simple)\n                + \"}]\",\n            ToStringBuilder.reflectionToString(simple));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReflectionArrayAndObjectCycle$catena_0() throws Exception {\n        Object[] objects = new Object[1];\n        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);\n        objects[0] = simple;\n        assertEquals(\n            this.toBaseString(objects)\n                + \"[{\"\n                + this.toBaseString(simple)\n                + \"[o=\"\n                + this.toBaseString(objects)\n                + \"]\"\n                + \"}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\n            this.toBaseString(simple)\n                + \"[o={\"\n                + this.toBaseString(simple)\n                + \"}]\",\n            ToStringBuilder.reflectionToString(simple));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionArrayAndObjectCycle$catena_1() throws Exception {\n        Object[] objects = new Object[1];\n        SimpleReflectionTestFixture simple = new SimpleReflectionTestFixture(objects);\n        objects[0] = simple;\n        try{ assertEquals(\n            this.toBaseString(objects)\n                + \"[{\"\n                + this.toBaseString(simple)\n                + \"[o=\"\n                + this.toBaseString(objects)\n                + \"]\"\n                + \"}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\n            this.toBaseString(simple)\n                + \"[o={\"\n                + this.toBaseString(simple)\n                + \"}]\",\n            ToStringBuilder.reflectionToString(simple));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testObjectCycle": {
        "begin_line_no": 829,
        "end_line_no": 838,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testObjectCycle$catena_1() {\n        ObjectCycle a = new ObjectCycle();\n        ObjectCycle b = new ObjectCycle();\n        a.obj = b;\n        b.obj = a;\n\n        String expected = toBaseString(a) + \"[\" + toBaseString(b) + \"[\" + toBaseString(a) + \"]]\";\n        try{ assertEquals(expected, a.toString());                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        validateNullToStringStyleRegistry();                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testObjectCycle$catena_0() {\n        ObjectCycle a = new ObjectCycle();\n        ObjectCycle b = new ObjectCycle();\n        a.obj = b;\n        b.obj = a;\n\n        String expected = toBaseString(a) + \"[\" + toBaseString(b) + \"[\" + toBaseString(a) + \"]]\";\n        assertEquals(expected, a.toString());                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ validateNullToStringStyleRegistry();                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionFloatArray": {
        "begin_line_no": 207,
        "end_line_no": 214,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testReflectionFloatArray$catena_2() {\n        float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReflectionFloatArray$catena_0() {\n        float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));         /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionFloatArray$catena_1() {\n        float[] array = new float[] { 1.0f, 2.9876f, -3.00001f, 4.3f };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1.0,2.9876,-3.00001,4.3}]\", ToStringBuilder.reflectionToString(array));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testSelfInstanceVarReflectionObjectCycle": {
        "begin_line_no": 518,
        "end_line_no": 522,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testSelfInstanceVarReflectionObjectCycle$catena_1() throws Exception {\n        SelfInstanceVarReflectionTestFixture test = new SelfInstanceVarReflectionTestFixture();\n        try{ assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \"]\", test.toString());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testSelfInstanceVarReflectionObjectCycle$catena_0() throws Exception {\n        SelfInstanceVarReflectionTestFixture test = new SelfInstanceVarReflectionTestFixture();\n        assertEquals(this.toBaseString(test) + \"[typeIsSelf=\" + this.toBaseString(test) + \"]\", test.toString());         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArray": {
        "begin_line_no": 153,
        "end_line_no": 160,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testReflectionLongArray$catena_2() {\n        long[] array = new long[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReflectionLongArray$catena_0() {\n        long[] array = new long[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));                  /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionLongArray$catena_1() {\n        long[] array = new long[] { 1, 2, -3, 4 };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{1,2,-3,4}]\", ToStringBuilder.reflectionToString(array));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionIntArrayArray": {
        "begin_line_no": 246,
        "end_line_no": 253,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testReflectionIntArrayArray$catena_2() {\n        int[][] array = new int[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReflectionIntArrayArray$catena_0() {\n        int[][] array = new int[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));          /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionIntArrayArray$catena_1() {\n        int[][] array = new int[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayArrayCycle": {
        "begin_line_no": 402,
        "end_line_no": 422,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testReflectionArrayArrayCycle_catena_1() throws Exception {\n        Object[][] objects = new Object[2][2];\n        objects[0][0] = objects;\n        objects[0][1] = objects;\n        objects[1][0] = objects;\n        objects[1][1] = objects;\n        String basicToString = this.toBaseString(objects);\n        try{ assertEquals(\n            basicToString\n                + \"[{{\"\n                + basicToString\n                + \",\"\n                + basicToString\n                + \"},{\"\n                + basicToString\n                + \",\"\n                + basicToString\n                + \"}}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReflectionArrayArrayCycle$catena_0() throws Exception {\n        Object[][] objects = new Object[2][2];\n        objects[0][0] = objects;\n        objects[0][1] = objects;\n        objects[1][0] = objects;\n        objects[1][1] = objects;\n        String basicToString = this.toBaseString(objects);\n        assertEquals(\n            basicToString\n                + \"[{{\"\n                + basicToString\n                + \",\"\n                + basicToString\n                + \"},{\"\n                + basicToString\n                + \",\"\n                + basicToString\n                + \"}}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionObjectCycle": {
        "begin_line_no": 542,
        "end_line_no": 551,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testReflectionObjectCycle$catena_1() throws Exception {\n        ReflectionTestCycleA a = new ReflectionTestCycleA();\n        ReflectionTestCycleB b = new ReflectionTestCycleB();\n        a.b = b;\n        b.a = a;\n        try{ assertEquals(\n            this.toBaseString(a) + \"[b=\" + this.toBaseString(b) + \"[a=\" + this.toBaseString(a) + \"]]\",\n            a.toString());                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReflectionObjectCycle$catena_0() throws Exception {\n        ReflectionTestCycleA a = new ReflectionTestCycleA();\n        ReflectionTestCycleB b = new ReflectionTestCycleB();\n        a.b = b;\n        b.a = a;\n        assertEquals(\n            this.toBaseString(a) + \"[b=\" + this.toBaseString(b) + \"[a=\" + this.toBaseString(a) + \"]]\",\n            a.toString());                                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycle": {
        "begin_line_no": 376,
        "end_line_no": 383,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testReflectionArrayCycle$catena_1() throws Exception {\n        Object[] objects = new Object[1];\n        objects[0] = objects;\n        try{ assertEquals(\n            this.toBaseString(objects) + \"[{\" + this.toBaseString(objects) + \"}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReflectionArrayCycle$catena_0() throws Exception {\n        Object[] objects = new Object[1];\n        objects[0] = objects;\n        assertEquals(\n            this.toBaseString(objects) + \"[{\" + this.toBaseString(objects) + \"}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionBooleanArray": {
        "begin_line_no": 216,
        "end_line_no": 223,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testReflectionBooleanArray$catena_2() {\n        boolean[] array = new boolean[] { true, false, false };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{true,false,false}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReflectionBooleanArray$catena_0() {\n        boolean[] array = new boolean[] { true, false, false };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{true,false,false}]\", ToStringBuilder.reflectionToString(array));          /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionBooleanArray$catena_1() {\n        boolean[] array = new boolean[] { true, false, false };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{true,false,false}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionLongArrayArray": {
        "begin_line_no": 237,
        "end_line_no": 244,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testReflectionLongArrayArray$catena_2() {\n        long[][] array = new long[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReflectionLongArrayArray$catena_0() {\n        long[][] array = new long[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));          /***** ORIGINAL ASSERTION IS HERE *****/\n        array = null;\n        try{ assertReflectionArray(\"<null>\", array);                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionLongArrayArray$catena_1() {\n        long[][] array = new long[][] { { 1, 2 }, null, { 5 } };\n        String baseStr = this.toBaseString(array);\n        try{ assertEquals(baseStr + \"[{{1,2},<null>,{5}}]\", ToStringBuilder.reflectionToString(array));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        array = null;\n        assertReflectionArray(\"<null>\", array);                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.lang3.builder.ToStringBuilderTest::testReflectionArrayCycleLevel2": {
        "begin_line_no": 388,
        "end_line_no": 400,
        "file_path": "src/test/java/org/apache/commons/lang3/builder/ToStringBuilderTest.java",
        "to": [
            "    public void testReflectionArrayCycleLevel2$catena_2() throws Exception {\n        Object[] objects = new Object[1];\n        Object[] objectsLevel2 = new Object[1];\n        objects[0] = objectsLevel2;\n        objectsLevel2[0] = objects;\n        try{ assertEquals(\n            this.toBaseString(objects) + \"[{{\" + this.toBaseString(objects) + \"}}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\n            this.toBaseString(objectsLevel2) + \"[{{\" + this.toBaseString(objectsLevel2) + \"}}]\",\n            ToStringBuilder.reflectionToString(objectsLevel2));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        this.validateNullToStringStyleRegistry();                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testReflectionArrayCycleLevel2$catena_0() throws Exception {\n        Object[] objects = new Object[1];\n        Object[] objectsLevel2 = new Object[1];\n        objects[0] = objectsLevel2;\n        objectsLevel2[0] = objects;\n        assertEquals(\n            this.toBaseString(objects) + \"[{{\" + this.toBaseString(objects) + \"}}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\n            this.toBaseString(objectsLevel2) + \"[{{\" + this.toBaseString(objectsLevel2) + \"}}]\",\n            ToStringBuilder.reflectionToString(objectsLevel2));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    public void testReflectionArrayCycleLevel2$catena_1() throws Exception {\n        Object[] objects = new Object[1];\n        Object[] objectsLevel2 = new Object[1];\n        objects[0] = objectsLevel2;\n        objectsLevel2[0] = objects;\n        try{ assertEquals(\n            this.toBaseString(objects) + \"[{{\" + this.toBaseString(objects) + \"}}]\",\n            ToStringBuilder.reflectionToString(objects));                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\n            this.toBaseString(objectsLevel2) + \"[{{\" + this.toBaseString(objectsLevel2) + \"}}]\",\n            ToStringBuilder.reflectionToString(objectsLevel2));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ this.validateNullToStringStyleRegistry();                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}