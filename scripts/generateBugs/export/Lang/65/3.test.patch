{
    "org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59": {
        "begin_line_no": 896,
        "end_line_no": 964,
        "file_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
        "to": [
            "    public void testTruncateLang59$catena_16() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
            "    public void testTruncateLang59$catena_10() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
            "    public void testTruncateLang59$catena_15() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
            "    public void testTruncateLang59$catena_9() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }"
        ]
    }
}