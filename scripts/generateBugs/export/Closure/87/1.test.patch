{
    "com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntaxTest::testIssue291": {
        "begin_line_no": 566,
        "end_line_no": 572,
        "file_path": "test/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntaxTest.java",
        "to": [
            "  public void testIssue291$catena_2() {\n    try{ fold(\"if (true) { f.onchange(); }\", \"if (1) f.onchange();\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"if (f) { f.onchange(); }\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    foldSame(\"if (f) { f.bar(); } else { f.onchange(); }\");                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"if (f) { f.bonchange(); }\", \"f && f.bonchange();\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"if (f) { f['x'](); }\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testIssue291$catena_1() {\n    try{ fold(\"if (true) { f.onchange(); }\", \"if (1) f.onchange();\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    foldSame(\"if (f) { f.onchange(); }\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ foldSame(\"if (f) { f.bar(); } else { f.onchange(); }\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"if (f) { f.bonchange(); }\", \"f && f.bonchange();\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"if (f) { f['x'](); }\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testIssue291$catena_4() {\n    try{ fold(\"if (true) { f.onchange(); }\", \"if (1) f.onchange();\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"if (f) { f.onchange(); }\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"if (f) { f.bar(); } else { f.onchange(); }\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"if (f) { f.bonchange(); }\", \"f && f.bonchange();\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    foldSame(\"if (f) { f['x'](); }\");                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n  }",
            "  public void testIssue291$catena_0() {\n    fold(\"if (true) { f.onchange(); }\", \"if (1) f.onchange();\");                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ foldSame(\"if (f) { f.onchange(); }\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"if (f) { f.bar(); } else { f.onchange(); }\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"if (f) { f.bonchange(); }\", \"f && f.bonchange();\");                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"if (f) { f['x'](); }\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testIssue291$catena_3() {\n    try{ fold(\"if (true) { f.onchange(); }\", \"if (1) f.onchange();\");                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"if (f) { f.onchange(); }\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"if (f) { f.bar(); } else { f.onchange(); }\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"if (f) { f.bonchange(); }\", \"f && f.bonchange();\");                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ foldSame(\"if (f) { f['x'](); }\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n  }"
        ]
    }
}