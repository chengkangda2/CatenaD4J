{
    "com.google.javascript.jscomp.NormalizeTest::testRemoveDuplicateVarDeclarations3": {
        "begin_line_no": 254,
        "end_line_no": 276,
        "file_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "to": [
            "  public void testRemoveDuplicateVarDeclarations3$catena_1() {\n    try{ test(\"var f = 1; function f(){}\",\n         \"f = 1; function f(){}\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    test(\"var f; function f(){}\",\n         \"function f(){}\");                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"if (a) { var f = 1; } else { function f(){} }\",\n         \"if (a) { var f = 1; } else { f = function (){} }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"function f(){} var f = 1;\",\n         \"function f(){} f = 1;\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(){} var f;\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { var f = 1; }\",\n         \"if (a) { var f = function (){} } else { f = 1; }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Do we need to handle this differently for \"third_party\"\n    // mode? Remove the previous function definitions?\n    try{ test(\"function f(){} function f(){}\",\n         \"function f(){} function f(){}\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { function f(){} }\",\n         \"if (a) { var f = function (){} } else { f = function (){} }\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  public void testRemoveDuplicateVarDeclarations3$catena_0() {\n    test(\"var f = 1; function f(){}\",\n         \"f = 1; function f(){}\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ test(\"var f; function f(){}\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { var f = 1; } else { function f(){} }\",\n         \"if (a) { var f = 1; } else { f = function (){} }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ test(\"function f(){} var f = 1;\",\n         \"function f(){} f = 1;\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"function f(){} var f;\",\n         \"function f(){}\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { var f = 1; }\",\n         \"if (a) { var f = function (){} } else { f = 1; }\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(johnlenz): Do we need to handle this differently for \"third_party\"\n    // mode? Remove the previous function definitions?\n    try{ test(\"function f(){} function f(){}\",\n         \"function f(){} function f(){}\",\n         SyntacticScopeCreator.VAR_MULTIPLY_DECLARED_ERROR);                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ test(\"if (a) { function f(){} } else { function f(){} }\",\n         \"if (a) { var f = function (){} } else { f = function (){} }\");                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n  }"
        ]
    },
    "com.google.javascript.jscomp.NormalizeTest::testNormalizeFunctionDeclarations": {
        "begin_line_no": 161,
        "end_line_no": 190,
        "file_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "to": [
            ""
        ]
    },
    "com.google.javascript.jscomp.NormalizeTest::testMoveFunctions2": {
        "begin_line_no": 139,
        "end_line_no": 147,
        "file_path": "test/com/google/javascript/jscomp/NormalizeTest.java",
        "to": [
            ""
        ]
    }
}