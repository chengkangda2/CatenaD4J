{
    "com.google.javascript.jscomp.ExpresssionDecomposerTest::testCanExposeExpression2": {
        "begin_line_no": 63,
        "end_line_no": 87,
        "file_path": "test/com/google/javascript/jscomp/ExpresssionDecomposerTest.java",
        "to": [
            "  public void testCanExposeExpression2$catena_10() {\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"foo()\", \"foo\");                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo()\", \"foo\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"var x = foo()\", \"foo\");                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"if(foo()){}\", \"foo\");                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"switch(foo()){}\", \"foo\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"function (){ return foo();}\", \"foo\");                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() && 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() || 1\", \"foo\");                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"x = foo() ? 0 : 1\", \"foo\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    helperCanExposeExpression(\n        DecompositionType.MOVABLE, \"(function(a){b = a})(foo())\", \"foo\");                                   /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
        ]
    }
}