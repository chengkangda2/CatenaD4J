{
    "com.google.javascript.jscomp.TypeCheckTest::testIssue783": {
        "begin_line_no": 5996,
        "end_line_no": 6008,
        "file_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
        "to": [
            ""
        ]
    },
    "com.google.javascript.rhino.jstype.JSTypeTest::testRestrictedTypeGivenToBoolean": {
        "begin_line_no": 5215,
        "end_line_no": 5282,
        "file_path": "test/com/google/javascript/rhino/jstype/JSTypeTest.java",
        "to": [
            "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_0() {\n    // simple cases\n    assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_1() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_2() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_3() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_4() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_5() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_6() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_7() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_8() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_9() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_10() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_11() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_12() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_13() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_14() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_15() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_16() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_17() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_19() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_20() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_21() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_22() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @SuppressWarnings(\"checked\")\n      public void testRestrictedTypeGivenToBoolean$catena_23() {\n    // simple cases\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(BOOLEAN_TYPE,\n        BOOLEAN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NULL_TYPE,\n        NULL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NUMBER_TYPE,\n        NUMBER_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(STRING_TYPE,\n        STRING_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        STRING_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(VOID_TYPE,\n        VOID_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_OBJECT_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_OBJECT_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(NO_TYPE,\n        NO_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(ALL_TYPE,\n        ALL_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTypeEquals(CHECKED_UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(true));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(UNKNOWN_TYPE,\n        UNKNOWN_TYPE.getRestrictedTypeGivenToBooleanOutcome(false));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // unions\n    UnionType nullableStringValue =\n        (UnionType) createNullableType(STRING_TYPE);\n    try{ assertTypeEquals(STRING_TYPE,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(true));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTypeEquals(nullableStringValue,\n        nullableStringValue.getRestrictedTypeGivenToBooleanOutcome(false));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    UnionType nullableStringObject =\n        (UnionType) createNullableType(STRING_OBJECT_TYPE);\n    try{ assertTypeEquals(STRING_OBJECT_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(true));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTypeEquals(NULL_TYPE,\n        nullableStringObject.getRestrictedTypeGivenToBooleanOutcome(false));                                /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
        ]
    }
}