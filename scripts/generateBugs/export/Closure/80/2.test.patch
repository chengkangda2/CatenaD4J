{
    "com.google.javascript.jscomp.NodeUtilTest::testIsBooleanResult": {
        "begin_line_no": 1467,
        "end_line_no": 1517,
        "file_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "to": [
            "  public void testIsBooleanResult$catena_33() {\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"1\")));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(NodeUtil.isBooleanResult(getNode(\"true\")));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"+true\")));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"+1\")));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"-1\")));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"-Infinity\")));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"Infinity\")));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"NaN\")));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"undefined\")));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"void 0\")));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"a << b\")));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"a >> b\")));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"a >>> b\")));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertTrue(NodeUtil.isBooleanResult(getNode(\"a == b\")));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(NodeUtil.isBooleanResult(getNode(\"a != b\")));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(NodeUtil.isBooleanResult(getNode(\"a === b\")));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(NodeUtil.isBooleanResult(getNode(\"a !== b\")));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(NodeUtil.isBooleanResult(getNode(\"a < b\")));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(NodeUtil.isBooleanResult(getNode(\"a > b\")));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(NodeUtil.isBooleanResult(getNode(\"a <= b\")));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(NodeUtil.isBooleanResult(getNode(\"a >= b\")));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(NodeUtil.isBooleanResult(getNode(\"a in b\")));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(NodeUtil.isBooleanResult(getNode(\"a instanceof b\")));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"'a'\")));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"'a'+b\")));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"a+'b'\")));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"a+b\")));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"a()\")));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"''.a\")));                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"a.b\")));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"a.b()\")));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"a().b()\")));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"new a()\")));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(NodeUtil.isBooleanResult(getNode(\"delete a\")));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // Definitely not boolean\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"([true,false])\")));                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"({a:true})\")));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // These are boolean but aren't handled yet, \"false\" here means \"unknown\".\n    try{ assertTrue(NodeUtil.isBooleanResult(getNode(\"true && false\")));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(NodeUtil.isBooleanResult(getNode(\"true || false\")));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(NodeUtil.isBooleanResult(getNode(\"a ? true : false\")));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(NodeUtil.isBooleanResult(getNode(\"a,true\")));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(NodeUtil.isBooleanResult(getNode(\"a=true\")));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(NodeUtil.isBooleanResult(getNode(\"a=1\")));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }"
        ]
    },
    "com.google.javascript.jscomp.NodeUtilTest::testLocalValue1": {
        "begin_line_no": 1073,
        "end_line_no": 1170,
        "file_path": "test/com/google/javascript/jscomp/NodeUtilTest.java",
        "to": [
            ""
        ]
    }
}