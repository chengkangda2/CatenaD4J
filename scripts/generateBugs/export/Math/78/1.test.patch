{
    "org.apache.commons.math.ode.events.EventStateTest::closeEvents": {
        "begin_line_no": 31,
        "end_line_no": 69,
        "file_path": "src/test/java/org/apache/commons/math/ode/events/EventStateTest.java",
        "to": [
            "    @Test\n    public void closeEvents$catena_3()\n        throws EventException, ConvergenceException, DerivativeException {\n\n        final double r1  = 90.0;\n        final double r2  = 135.0;\n        final double gap = r2 - r1;\n        EventHandler closeEventsGenerator = new EventHandler() {\n            public void resetState(double t, double[] y) {\n            }\n            public double g(double t, double[] y) {\n                return (t - r1) * (r2 - t);\n            }\n            public int eventOccurred(double t, double[] y, boolean increasing) {\n                return CONTINUE;\n            }\n        };\n\n        final double tolerance = 0.1;\n        EventState es = new EventState(closeEventsGenerator, 1.5 * gap, tolerance, 10);\n\n        double t0 = r1 - 0.5 * gap;\n        es.reinitializeBegin(t0, new double[0]);\n        AbstractStepInterpolator interpolator =\n            new DummyStepInterpolator(new double[0], true);\n        interpolator.storeTime(t0);\n\n        interpolator.shift();\n        interpolator.storeTime(0.5 * (r1 + r2));\n        try{ Assert.assertTrue(es.evaluateStep(interpolator));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(r1, es.getEventTime(), tolerance);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        es.stepAccepted(es.getEventTime(), new double[0]);\n\n        interpolator.shift();\n        interpolator.storeTime(r2 + 0.4 * gap);\n        try{ Assert.assertTrue(es.evaluateStep(interpolator));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertEquals(r2, es.getEventTime(), tolerance);                                              /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }",
            "    @Test\n    public void closeEvents$catena_2()\n        throws EventException, ConvergenceException, DerivativeException {\n\n        final double r1  = 90.0;\n        final double r2  = 135.0;\n        final double gap = r2 - r1;\n        EventHandler closeEventsGenerator = new EventHandler() {\n            public void resetState(double t, double[] y) {\n            }\n            public double g(double t, double[] y) {\n                return (t - r1) * (r2 - t);\n            }\n            public int eventOccurred(double t, double[] y, boolean increasing) {\n                return CONTINUE;\n            }\n        };\n\n        final double tolerance = 0.1;\n        EventState es = new EventState(closeEventsGenerator, 1.5 * gap, tolerance, 10);\n\n        double t0 = r1 - 0.5 * gap;\n        es.reinitializeBegin(t0, new double[0]);\n        AbstractStepInterpolator interpolator =\n            new DummyStepInterpolator(new double[0], true);\n        interpolator.storeTime(t0);\n\n        interpolator.shift();\n        interpolator.storeTime(0.5 * (r1 + r2));\n        try{ Assert.assertTrue(es.evaluateStep(interpolator));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(r1, es.getEventTime(), tolerance);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        es.stepAccepted(es.getEventTime(), new double[0]);\n\n        interpolator.shift();\n        interpolator.storeTime(r2 + 0.4 * gap);\n        Assert.assertTrue(es.evaluateStep(interpolator));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertEquals(r2, es.getEventTime(), tolerance);                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }"
        ]
    }
}