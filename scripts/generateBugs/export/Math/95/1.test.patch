{
    "org.apache.commons.math.distribution.FDistributionTest::testSmallDegreesOfFreedom": {
        "begin_line_no": 109,
        "end_line_no": 121,
        "file_path": "src/test/org/apache/commons/math/distribution/FDistributionTest.java",
        "to": [
            "    public void testSmallDegreesOfFreedom$catena_1() throws Exception {\n        org.apache.commons.math.distribution.FDistributionImpl fd =\n            new org.apache.commons.math.distribution.FDistributionImpl(\n                1.0, 1.0);\n        double p = fd.cumulativeProbability(0.975);\n        double x = fd.inverseCumulativeProbability(p);\n        try{ assertEquals(0.975, x, 1.0e-5);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        fd.setDenominatorDegreesOfFreedom(2.0);\n        p = fd.cumulativeProbability(0.975);\n        x = fd.inverseCumulativeProbability(p);\n        assertEquals(0.975, x, 1.0e-5);                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    public void testSmallDegreesOfFreedom$catena_0() throws Exception {\n        org.apache.commons.math.distribution.FDistributionImpl fd =\n            new org.apache.commons.math.distribution.FDistributionImpl(\n                1.0, 1.0);\n        double p = fd.cumulativeProbability(0.975);\n        double x = fd.inverseCumulativeProbability(p);\n        assertEquals(0.975, x, 1.0e-5);                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n        fd.setDenominatorDegreesOfFreedom(2.0);\n        p = fd.cumulativeProbability(0.975);\n        x = fd.inverseCumulativeProbability(p);\n        try{ assertEquals(0.975, x, 1.0e-5);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}