{
    "org.apache.commons.math.linear.ArrayRealVectorTest::testBasicFunctions": {
        "begin_line_no": 1080,
        "end_line_no": 1232,
        "file_path": "src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java",
        "to": [
            "    public void testBasicFunctions$catena_2() {\n        ArrayRealVector v1 = new ArrayRealVector(vec1);\n        ArrayRealVector v2 = new ArrayRealVector(vec2);\n        ArrayRealVector v5 = new ArrayRealVector(vec5);\n        ArrayRealVector v_null = new ArrayRealVector(vec_null);\n\n        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307\n        double d_getNorm = v5.getNorm();\n        try{ assertEquals(\"compare values  \", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17\n        double d_getL1Norm = v5.getL1Norm();\n        try{ assertEquals(\"compare values  \", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6\n        double d_getLInfNorm = v5.getLInfNorm();\n        assertEquals(\"compare values  \", 6.0, d_getLInfNorm);                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist = v1.getDistance(v2);\n        try{ assertEquals(\"compare values  \",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_2 = v1.getDistance(v2_t);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  sqrt(sumsq(v1-v2))\n        double dist_3 = v1.getDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getL1Distance = v1. getL1Distance(v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_2 = v1. getL1Distance(v2_t);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  ???\n        double d_getLInfDistance = v1. getLInfDistance(v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);\n        try{ assertEquals(\"compare values  \",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 + v2\n        ArrayRealVector v_add = v1.add(v2);\n        double[] result_add = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);\n        RealVector v_add_i = v1.add(vt2);\n        double[] result_add_i = {5d, 7d, 9d};\n        try{ assertClose(\"compare vect\" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        //octave =  v1 - v2\n        ArrayRealVector v_subtract = v1.subtract(v2);\n        double[] result_subtract = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_subtract_i = v1.subtract(vt2);\n        double[] result_subtract_i = {-3d, -3d, -3d};\n        try{ assertClose(\"compare vect\" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 .* v2\n        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);\n        double[] result_ebeMultiply = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);\n        double[] result_ebeMultiply_2 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);\n        double[] result_ebeMultiply_3 = {4d, 10d, 18d};\n        try{ assertClose(\"compare vect\" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave v1 ./ v2\n        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);\n        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);\n        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);\n        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};\n        try{ assertClose(\"compare vect\" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2)\n        double dot =  v1.dotProduct(v2);\n        try{ assertEquals(\"compare val \",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // octave  dot(v1,v2_t)\n        double dot_2 =  v1.dotProduct(v2_t);\n        try{ assertEquals(\"compare val \",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct = v1.outerProduct(v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);\n        try{ assertEquals(\"compare val \",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_unitVector = v1.unitVector();\n        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());\n        try{ assertClose(\"compare vect\" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try {\n            v_null.unitVector();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();\n        v_unitize.unitize();\n        try{ assertClose(\"compare vect\" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try {\n            v_null.unitize();\n            try{ fail(\"Expecting ArithmeticException\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ArithmeticException ex) {\n            // expected behavior\n        } catch (Exception e) {\n            try{ fail(\"wrong exception caught\");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n\n        ArrayRealVector v_projection = v1.projection(v2);\n        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_2 = v1.projection(v2_t);\n        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        RealVector v_projection_3 = v1.projection(v2.getData());\n        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};\n        try{ assertClose(\"compare vect\", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }"
        ]
    },
    "org.apache.commons.math.linear.SparseRealVectorTest::testBasicFunctions": {
        "begin_line_no": 950,
        "end_line_no": 1076,
        "file_path": "src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java",
        "to": [
            ""
        ]
    }
}