{
    "org.apache.commons.math.estimation.GaussNewtonEstimatorTest::testBoundParameters": {
        "begin_line_no": 451,
        "end_line_no": 487,
        "file_path": "src/test/org/apache/commons/math/estimation/GaussNewtonEstimatorTest.java",
        "to": [
            "  public void testBoundParameters$catena_6() throws EstimationException {\n      EstimatedParameter[] p = {\n        new EstimatedParameter(\"unbound0\", 2, false),\n        new EstimatedParameter(\"unbound1\", 2, false),\n        new EstimatedParameter(\"bound\",    2, true)\n      };\n      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              3.0),\n        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              1.0),\n        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              7.0)\n      });\n\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n      estimator.estimate(problem);\n      try{ assertTrue(estimator.getRMS(problem) < 1.0e-10);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n      double[][] covariances = estimator.getCovariances(problem);\n      int i0 = 0, i1 = 1;\n      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n          i0 = 1;\n          i1 = 0;\n      }\n      try{ assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n      double[] errors = estimator.guessParametersErrors(problem);\n      try{ assertEquals(0, errors[i0], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n      assertEquals(0, errors[i1], 1.0e-10);                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n\n  }",
            "  public void testBoundParameters$catena_4() throws EstimationException {\n      EstimatedParameter[] p = {\n        new EstimatedParameter(\"unbound0\", 2, false),\n        new EstimatedParameter(\"unbound1\", 2, false),\n        new EstimatedParameter(\"bound\",    2, true)\n      };\n      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              3.0),\n        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              1.0),\n        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              7.0)\n      });\n\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n      estimator.estimate(problem);\n      try{ assertTrue(estimator.getRMS(problem) < 1.0e-10);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n      double[][] covariances = estimator.getCovariances(problem);\n      int i0 = 0, i1 = 1;\n      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n          i0 = 1;\n          i1 = 0;\n      }\n      try{ assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n      double[] errors = estimator.guessParametersErrors(problem);\n      try{ assertEquals(0, errors[i0], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(0, errors[i1], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
            "  public void testBoundParameters$catena_0() throws EstimationException {\n      EstimatedParameter[] p = {\n        new EstimatedParameter(\"unbound0\", 2, false),\n        new EstimatedParameter(\"unbound1\", 2, false),\n        new EstimatedParameter(\"bound\",    2, true)\n      };\n      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              3.0),\n        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              1.0),\n        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              7.0)\n      });\n\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n      estimator.estimate(problem);\n      assertTrue(estimator.getRMS(problem) < 1.0e-10);                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n      double[][] covariances = estimator.getCovariances(problem);\n      int i0 = 0, i1 = 1;\n      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n          i0 = 1;\n          i1 = 0;\n      }\n      try{ assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n      double[] errors = estimator.guessParametersErrors(problem);\n      try{ assertEquals(0, errors[i0], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(0, errors[i1], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
            "  public void testBoundParameters$catena_1() throws EstimationException {\n      EstimatedParameter[] p = {\n        new EstimatedParameter(\"unbound0\", 2, false),\n        new EstimatedParameter(\"unbound1\", 2, false),\n        new EstimatedParameter(\"bound\",    2, true)\n      };\n      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              3.0),\n        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              1.0),\n        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              7.0)\n      });\n\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n      estimator.estimate(problem);\n      try{ assertTrue(estimator.getRMS(problem) < 1.0e-10);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n      double[][] covariances = estimator.getCovariances(problem);\n      int i0 = 0, i1 = 1;\n      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n          i0 = 1;\n          i1 = 0;\n      }\n      assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n      double[] errors = estimator.guessParametersErrors(problem);\n      try{ assertEquals(0, errors[i0], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(0, errors[i1], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
            "  public void testBoundParameters$catena_3() throws EstimationException {\n      EstimatedParameter[] p = {\n        new EstimatedParameter(\"unbound0\", 2, false),\n        new EstimatedParameter(\"unbound1\", 2, false),\n        new EstimatedParameter(\"bound\",    2, true)\n      };\n      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              3.0),\n        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              1.0),\n        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              7.0)\n      });\n\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n      estimator.estimate(problem);\n      try{ assertTrue(estimator.getRMS(problem) < 1.0e-10);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n      double[][] covariances = estimator.getCovariances(problem);\n      int i0 = 0, i1 = 1;\n      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n          i0 = 1;\n          i1 = 0;\n      }\n      try{ assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n      double[] errors = estimator.guessParametersErrors(problem);\n      try{ assertEquals(0, errors[i0], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(0, errors[i1], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
            "  public void testBoundParameters$catena_2() throws EstimationException {\n      EstimatedParameter[] p = {\n        new EstimatedParameter(\"unbound0\", 2, false),\n        new EstimatedParameter(\"unbound1\", 2, false),\n        new EstimatedParameter(\"bound\",    2, true)\n      };\n      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              3.0),\n        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              1.0),\n        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              7.0)\n      });\n\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n      estimator.estimate(problem);\n      try{ assertTrue(estimator.getRMS(problem) < 1.0e-10);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n      double[][] covariances = estimator.getCovariances(problem);\n      int i0 = 0, i1 = 1;\n      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n          i0 = 1;\n          i1 = 0;\n      }\n      try{ assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n      double[] errors = estimator.guessParametersErrors(problem);\n      try{ assertEquals(0, errors[i0], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(0, errors[i1], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }",
            "  public void testBoundParameters$catena_5() throws EstimationException {\n      EstimatedParameter[] p = {\n        new EstimatedParameter(\"unbound0\", 2, false),\n        new EstimatedParameter(\"unbound1\", 2, false),\n        new EstimatedParameter(\"bound\",    2, true)\n      };\n      LinearProblem problem = new LinearProblem(new LinearMeasurement[] {\n        new LinearMeasurement(new double[] { 1.0, 1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              3.0),\n        new LinearMeasurement(new double[] { 1.0, -1.0, 1.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              1.0),\n        new LinearMeasurement(new double[] { 1.0, 3.0, 2.0 },\n                              new EstimatedParameter[] { p[0], p[1], p[2] },\n                              7.0)\n      });\n\n      GaussNewtonEstimator estimator = new GaussNewtonEstimator(100, 1.0e-6, 1.0e-6);\n      estimator.estimate(problem);\n      try{ assertTrue(estimator.getRMS(problem) < 1.0e-10);                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n      double[][] covariances = estimator.getCovariances(problem);\n      int i0 = 0, i1 = 1;\n      if (problem.getUnboundParameters()[0].getName().endsWith(\"1\")) {\n          i0 = 1;\n          i1 = 0;\n      }\n      try{ assertEquals(11.0 / 24, covariances[i0][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i0][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals(-3.0 / 24, covariances[i1][i0], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ assertEquals( 3.0 / 24, covariances[i1][i1], 1.0e-10);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n      double[] errors = estimator.guessParametersErrors(problem);\n      assertEquals(0, errors[i0], 1.0e-10);                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ assertEquals(0, errors[i1], 1.0e-10);                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n  }"
        ]
    }
}