{
    "org.apache.commons.math3.optimization.direct.CMAESOptimizerTest::testFitAccuracyDependsOnBoundary": {
        "begin_line_no": 438,
        "end_line_no": 478,
        "file_path": "src/test/java/org/apache/commons/math3/optimization/direct/CMAESOptimizerTest.java",
        "to": [
            "    @Test\n    public void testFitAccuracyDependsOnBoundary$catena_1() {\n        final CMAESOptimizer optimizer = new CMAESOptimizer();\n        final MultivariateFunction fitnessFunction = new MultivariateFunction() {\n                public double value(double[] parameters) {\n                    final double target = 11.1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n            };\n\n        final double[] start = { 1 };\n \n        // No bounds.\n        PointValuePair result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                                   start);\n        final double resNoBound = result.getPoint()[0];\n\n        // Optimum is near the lower bound.\n        final double[] lower = { -20 };\n        final double[] upper = { 5e16 };\n        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                    start, lower, upper);\n        final double resNearLo = result.getPoint()[0];\n\n        // Optimum is near the upper bound.\n        lower[0] = -5e16;\n        upper[0] = 20;\n        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                    start, lower, upper);\n        final double resNearHi = result.getPoint()[0];\n\n        // System.out.println(\"resNoBound=\" + resNoBound +\n        //                    \" resNearLo=\" + resNearLo +\n        //                    \" resNearHi=\" + resNearHi);\n\n        // The two values currently differ by a substantial amount, indicating that\n        // the bounds definition can prevent reaching the optimum.\n        try{ Assert.assertEquals(resNoBound, resNearLo, 1e-3);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertEquals(resNoBound, resNearHi, 1e-3);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @Test\n    public void testFitAccuracyDependsOnBoundary$catena_0() {\n        final CMAESOptimizer optimizer = new CMAESOptimizer();\n        final MultivariateFunction fitnessFunction = new MultivariateFunction() {\n                public double value(double[] parameters) {\n                    final double target = 11.1;\n                    final double error = target - parameters[0];\n                    return error * error;\n                }\n            };\n\n        final double[] start = { 1 };\n \n        // No bounds.\n        PointValuePair result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                                   start);\n        final double resNoBound = result.getPoint()[0];\n\n        // Optimum is near the lower bound.\n        final double[] lower = { -20 };\n        final double[] upper = { 5e16 };\n        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                    start, lower, upper);\n        final double resNearLo = result.getPoint()[0];\n\n        // Optimum is near the upper bound.\n        lower[0] = -5e16;\n        upper[0] = 20;\n        result = optimizer.optimize(100000, fitnessFunction, GoalType.MINIMIZE,\n                                    start, lower, upper);\n        final double resNearHi = result.getPoint()[0];\n\n        // System.out.println(\"resNoBound=\" + resNoBound +\n        //                    \" resNearLo=\" + resNearLo +\n        //                    \" resNearHi=\" + resNearHi);\n\n        // The two values currently differ by a substantial amount, indicating that\n        // the bounds definition can prevent reaching the optimum.\n        Assert.assertEquals(resNoBound, resNearLo, 1e-3);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertEquals(resNoBound, resNearHi, 1e-3);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}