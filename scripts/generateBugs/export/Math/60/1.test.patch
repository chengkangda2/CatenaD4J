{
    "org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues": {
        "begin_line_no": 157,
        "end_line_no": 179,
        "file_path": "src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java",
        "to": [
            "    public void testExtremeValues$catena_7() throws Exception {\n        NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 9) { // make sure not top-coded \n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        \n        try{ assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);                   /***** ORIGINAL ASSERTION IS HERE *****/\n        \n   }",
            "    public void testExtremeValues$catena_5() throws Exception {\n        NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 9) { // make sure not top-coded \n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        \n        try{ assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n   }",
            "    public void testExtremeValues$catena_4() throws Exception {\n        NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 9) { // make sure not top-coded \n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        \n        assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n   }",
            "    public void testExtremeValues$catena_6() throws Exception {\n        NormalDistribution distribution = new NormalDistributionImpl(0, 1);\n        for (int i = 0; i < 100; i++) { // make sure no convergence exception\n            double lowerTail = distribution.cumulativeProbability(-i);\n            double upperTail = distribution.cumulativeProbability(i);\n            if (i < 9) { // make sure not top-coded \n                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned\n                // TODO: once MATH-364 is resolved, replace 9 with 30\n                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n            else { // make sure top coding not reversed\n                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n            }\n        }\n        \n        try{ assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n   }"
        ]
    }
}