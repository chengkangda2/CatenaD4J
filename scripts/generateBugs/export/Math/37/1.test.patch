{
    "org.apache.commons.math.complex.ComplexTest::testTanhInf": {
        "begin_line_no": 1050,
        "end_line_no": 1060,
        "file_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "to": [
            "    @Test\n    public void testTanhInf$catena_2() {\n        try{ TestUtils.assertSame(Complex.NaN, oneInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testTanhInf$catena_3() {\n        try{ TestUtils.assertSame(Complex.NaN, oneInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testTanhInf$catena_0() {\n        TestUtils.assertSame(Complex.NaN, oneInf.tanh());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testTanhInf$catena_1() {\n        try{ TestUtils.assertSame(Complex.NaN, oneInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testTanhInf$catena_4() {\n        try{ TestUtils.assertSame(Complex.NaN, oneInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, infInf.tanh());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testTanhInf$catena_5() {\n        try{ TestUtils.assertSame(Complex.NaN, oneInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, infNegInf.tanh());                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testTanhInf$catena_6() {\n        try{ TestUtils.assertSame(Complex.NaN, oneInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, negInfInf.tanh());                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testTanhInf$catena_7() {\n        try{ TestUtils.assertSame(Complex.NaN, oneInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, oneNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(1.0, 0.0), infOne.tanh());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(-1.0, 0.0), negInfOne.tanh());                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tanh());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tanh());                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.tanh());                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.apache.commons.math.complex.ComplexTest::testTanh": {
        "begin_line_no": 1031,
        "end_line_no": 1043,
        "file_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "to": [
            "    @Test\n    public void testTanh$catena_1() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.00071, 0.00490826);\n        try{ TestUtils.assertEquals(expected, z.tanh(), 1.0e-5);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        /* Check that no overflow occurs (MATH-722) */\n        Complex actual = new Complex(1E10, 3.0).tanh();\n        expected = new Complex(1, 0);\n        TestUtils.assertEquals(expected, actual, 1.0e-5);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        actual = new Complex(-1E10, 3.0).tanh();\n        expected = new Complex(-1, 0);\n        try{ TestUtils.assertEquals(expected, actual, 1.0e-5);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testTanh$catena_2() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.00071, 0.00490826);\n        try{ TestUtils.assertEquals(expected, z.tanh(), 1.0e-5);                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        /* Check that no overflow occurs (MATH-722) */\n        Complex actual = new Complex(1E10, 3.0).tanh();\n        expected = new Complex(1, 0);\n        try{ TestUtils.assertEquals(expected, actual, 1.0e-5);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        actual = new Complex(-1E10, 3.0).tanh();\n        expected = new Complex(-1, 0);\n        TestUtils.assertEquals(expected, actual, 1.0e-5);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @Test\n    public void testTanh$catena_0() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(1.00071, 0.00490826);\n        TestUtils.assertEquals(expected, z.tanh(), 1.0e-5);                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        /* Check that no overflow occurs (MATH-722) */\n        Complex actual = new Complex(1E10, 3.0).tanh();\n        expected = new Complex(1, 0);\n        try{ TestUtils.assertEquals(expected, actual, 1.0e-5);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        actual = new Complex(-1E10, 3.0).tanh();\n        expected = new Complex(-1, 0);\n        try{ TestUtils.assertEquals(expected, actual, 1.0e-5);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.math.complex.ComplexTest::testTan": {
        "begin_line_no": 994,
        "end_line_no": 1006,
        "file_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "to": [
            "    @Test\n    public void testTan$catena_0() {\n        Complex z = new Complex(3, 4);\n        Complex expected = new Complex(-0.000187346, 0.999356);\n        TestUtils.assertEquals(expected, z.tan(), 1.0e-5);                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        /* Check that no overflow occurs (MATH-722) */\n        Complex actual = new Complex(3.0, 1E10).tan();\n        expected = new Complex(0, 1);\n        try{ TestUtils.assertEquals(expected, actual, 1.0e-5);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        actual = new Complex(3.0, -1E10).tan();\n        expected = new Complex(0, -1);\n        try{ TestUtils.assertEquals(expected, actual, 1.0e-5);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.apache.commons.math.complex.ComplexTest::testTanInf": {
        "begin_line_no": 1013,
        "end_line_no": 1023,
        "file_path": "src/test/java/org/apache/commons/math/complex/ComplexTest.java",
        "to": [
            "    @Test\n    public void testTanInf$catena_2() {\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, infOne.tan());                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, negInfOne.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testTanInf$catena_3() {\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infOne.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, negInfOne.tan());                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testTanInf$catena_4() {\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infOne.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfOne.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, infInf.tan());                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testTanInf$catena_5() {\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infOne.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfOne.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, infNegInf.tan());                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testTanInf$catena_6() {\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infOne.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfOne.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, negInfInf.tan());                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void testTanInf$catena_7() {\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, 1.0), oneInf.tan());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.valueOf(0.0, -1.0), oneNegInf.tan());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infOne.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfOne.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infInf.tan());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, infNegInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ TestUtils.assertSame(Complex.NaN, negInfInf.tan());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        TestUtils.assertSame(Complex.NaN, negInfNegInf.tan());                                              /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    }
}