{
    "org.apache.commons.math.geometry.euclidean.threed.RotationTest::testIssue639": {
        "begin_line_no": 479,
        "end_line_no": 492,
        "file_path": "src/test/java/org/apache/commons/math/geometry/euclidean/threed/RotationTest.java",
        "to": [
            "  @Test\n  public void testIssue639$catena_2(){\n      Vector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,\n                                 -5774608829631843.0 /  268435456.0,\n                                 -3822921525525679.0 / 4294967296.0);\n      Vector3D u2 =new Vector3D( -5712344449280879.0 /    2097152.0,\n                                 -2275058564560979.0 /    1048576.0,\n                                  4423475992255071.0 /      65536.0);\n      Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I,Vector3D.PLUS_K);\n      try{ Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15);                              /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @Test\n  public void testIssue639$catena_1(){\n      Vector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,\n                                 -5774608829631843.0 /  268435456.0,\n                                 -3822921525525679.0 / 4294967296.0);\n      Vector3D u2 =new Vector3D( -5712344449280879.0 /    2097152.0,\n                                 -2275058564560979.0 /    1048576.0,\n                                  4423475992255071.0 /      65536.0);\n      Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I,Vector3D.PLUS_K);\n      try{ Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);                              /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @Test\n  public void testIssue639$catena_0(){\n      Vector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,\n                                 -5774608829631843.0 /  268435456.0,\n                                 -3822921525525679.0 / 4294967296.0);\n      Vector3D u2 =new Vector3D( -5712344449280879.0 /    2097152.0,\n                                 -2275058564560979.0 /    1048576.0,\n                                  4423475992255071.0 /      65536.0);\n      Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I,Vector3D.PLUS_K);\n      Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);                              /***** ORIGINAL ASSERTION IS HERE *****/\n      try{ Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
            "  @Test\n  public void testIssue639$catena_3(){\n      Vector3D u1 = new Vector3D(-1321008684645961.0 /  268435456.0,\n                                 -5774608829631843.0 /  268435456.0,\n                                 -3822921525525679.0 / 4294967296.0);\n      Vector3D u2 =new Vector3D( -5712344449280879.0 /    2097152.0,\n                                 -2275058564560979.0 /    1048576.0,\n                                  4423475992255071.0 /      65536.0);\n      Rotation rot = new Rotation(u1, u2, Vector3D.PLUS_I,Vector3D.PLUS_K);\n      try{ Assert.assertEquals( 0.6228370359608200639829222, rot.getQ0(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ Assert.assertEquals( 0.0257707621456498790029987, rot.getQ1(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      try{ Assert.assertEquals(-0.0000000002503012255839931, rot.getQ2(), 1.0e-15);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n      Assert.assertEquals(-0.7819270390861109450724902, rot.getQ3(), 1.0e-15);                              /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
        ]
    }
}