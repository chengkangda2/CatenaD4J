{
    "org.mockito.internal.util.TimerTest::should_throw_friendly_reminder_exception_when_duration_is_negative": {
        "begin_line_no": 44,
        "end_line_no": 52,
        "file_path": "test/org/mockito/internal/util/TimerTest.java",
        "to": [
            "    @Test\n    public void should_throw_friendly_reminder_exception_when_duration_is_negative$catena_0() {\n        try {\n            new Timer(-1);\n            Assert.fail(\"It is forbidden to create timer with negative value of timer's duration.\");         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (FriendlyReminderException e) {\n            try{ Assert.assertTrue(true);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    @Test\n    public void should_throw_friendly_reminder_exception_when_duration_is_negative$catena_1() {\n        try {\n            new Timer(-1);\n            try{ Assert.fail(\"It is forbidden to create timer with negative value of timer's duration.\");    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (FriendlyReminderException e) {\n            Assert.assertTrue(true);                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }"
        ]
    },
    "org.mockito.verification.NegativeDurationTest::should_throw_exception_when_duration_is_negative_for_timeout_method": {
        "begin_line_no": 10,
        "end_line_no": 18,
        "file_path": "test/org/mockito/verification/NegativeDurationTest.java",
        "to": [
            "    @Test\n    public void should_throw_exception_when_duration_is_negative_for_timeout_method$catena_0() {\n        try {\n            Mockito.timeout(-1);\n            Assert.fail(\"It is forbidden to invoke Mockito.timeout() with negative value.\");                /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (FriendlyReminderException e) {\n            try{ Assert.assertTrue(true);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    @Test\n    public void should_throw_exception_when_duration_is_negative_for_timeout_method$catena_1() {\n        try {\n            Mockito.timeout(-1);\n            try{ Assert.fail(\"It is forbidden to invoke Mockito.timeout() with negative value.\");           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (FriendlyReminderException e) {\n            Assert.assertTrue(true);                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }"
        ]
    },
    "org.mockito.verification.NegativeDurationTest::should_throw_exception_when_duration_is_negative_for_after_method": {
        "begin_line_no": 20,
        "end_line_no": 28,
        "file_path": "test/org/mockito/verification/NegativeDurationTest.java",
        "to": [
            "    @Test\n    public void should_throw_exception_when_duration_is_negative_for_after_method$catena_0() {\n        try {\n            Mockito.after(-1);\n            Assert.fail(\"It is forbidden to invoke Mockito.after() with negative value.\");                  /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (FriendlyReminderException e) {\n            try{ Assert.assertTrue(true);                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
            "    @Test\n    public void should_throw_exception_when_duration_is_negative_for_after_method$catena_1() {\n        try {\n            Mockito.after(-1);\n            try{ Assert.fail(\"It is forbidden to invoke Mockito.after() with negative value.\");             }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (FriendlyReminderException e) {\n            Assert.assertTrue(true);                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }"
        ]
    }
}