{
    "org.mockitousage.matchers.CapturingArgumentsTest::should_capture_all_vararg": {
        "begin_line_no": 266,
        "end_line_no": 279,
        "file_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "to": [
            "    @Test\n    public void should_capture_all_vararg$catena_1() throws Exception {\n        // given\n        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n\n        // when\n        mock.mixedVarargs(42, \"a\", \"b\", \"c\");\n        mock.mixedVarargs(42, \"again ?!\");\n\n        // then\n        try{ verify(mock, times(2)).mixedVarargs(any(), argumentCaptor.capture());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly(\"a\", \"b\", \"c\", \"again ?!\");         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.mockitousage.matchers.CapturingArgumentsTest::should_capture_vararg": {
        "begin_line_no": 253,
        "end_line_no": 264,
        "file_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "to": [
            "    @Test\n    public void should_capture_vararg$catena_1() throws Exception {\n        // given\n        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n\n        // when\n        mock.mixedVarargs(42, \"a\", \"b\", \"c\");\n\n        // then\n        try{ verify(mock).mixedVarargs(any(), argumentCaptor.capture());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly(\"a\", \"b\", \"c\");                /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest::shouldMatchAnyVararg": {
        "begin_line_no": 24,
        "end_line_no": 35,
        "file_path": "test/org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyObjectTest.java",
        "to": [
            "    @Test\n    public void shouldMatchAnyVararg$catena_0() {\n        mock.run(\"a\", \"b\");\n\n        verify(mock).run(anyString(), anyString());                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ verify(mock).run((String) anyObject(), (String) anyObject());                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ verify(mock).run((String[]) anyVararg());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ verify(mock, never()).run();                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ verify(mock, never()).run(anyString(), eq(\"f\"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void shouldMatchAnyVararg$catena_1() {\n        mock.run(\"a\", \"b\");\n\n        try{ verify(mock).run(anyString(), anyString());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        verify(mock).run((String) anyObject(), (String) anyObject());                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ verify(mock).run((String[]) anyVararg());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ verify(mock, never()).run();                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ verify(mock, never()).run(anyString(), eq(\"f\"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive": {
        "begin_line_no": 225,
        "end_line_no": 237,
        "file_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "to": [
            "    @Test\n    public void should_capture_byte_vararg_by_creating_captor_with_primitive$catena_1() throws Exception {\n        // given\n        ArgumentCaptor<Byte> argumentCaptor = ArgumentCaptor.forClass(byte.class);\n\n        // when\n        mock.varargsbyte((byte) 1, (byte) 2);\n\n        // then\n        try{ verify(mock).varargsbyte(argumentCaptor.capture());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals((byte) 2, (byte) argumentCaptor.getValue());                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly((byte) 1, (byte) 2);      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void should_capture_byte_vararg_by_creating_captor_with_primitive$catena_2() throws Exception {\n        // given\n        ArgumentCaptor<Byte> argumentCaptor = ArgumentCaptor.forClass(byte.class);\n\n        // when\n        mock.varargsbyte((byte) 1, (byte) 2);\n\n        // then\n        try{ verify(mock).varargsbyte(argumentCaptor.capture());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((byte) 2, (byte) argumentCaptor.getValue());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly((byte) 1, (byte) 2);           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_on_pure_vararg_method": {
        "begin_line_no": 308,
        "end_line_no": 319,
        "file_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "to": [
            "    @Test\n    public void captures_correctly_when_captor_used_on_pure_vararg_method$catena_1() throws Exception {\n        // given\n        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n\n        // when\n        mock.varargs(42, \"capturedValue\");\n\n        // then\n        try{ verify(mock).varargs(eq(42), argumentCaptor.capture());                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assertions.assertThat(argumentCaptor.getValue()).contains(\"capturedValue\");                         /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @Test\n    public void captures_correctly_when_captor_used_on_pure_vararg_method$catena_0() throws Exception {\n        // given\n        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n\n        // when\n        mock.varargs(42, \"capturedValue\");\n\n        // then\n        verify(mock).varargs(eq(42), argumentCaptor.capture());                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assertions.assertThat(argumentCaptor.getValue()).contains(\"capturedValue\");                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.mockitousage.matchers.CapturingArgumentsTest::should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper": {
        "begin_line_no": 239,
        "end_line_no": 251,
        "file_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "to": [
            "    @Test\n    public void should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper$catena_2() throws Exception {\n        // given\n        ArgumentCaptor<Byte> argumentCaptor = ArgumentCaptor.forClass(Byte.class);\n\n        // when\n        mock.varargsbyte((byte) 1, (byte) 2);\n\n        // then\n        try{ verify(mock).varargsbyte(argumentCaptor.capture());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals((byte) 2, (byte) argumentCaptor.getValue());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly((byte) 1, (byte) 2);           /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @Test\n    public void should_capture_byte_vararg_by_creating_captor_with_primitive_wrapper$catena_1() throws Exception {\n        // given\n        ArgumentCaptor<Byte> argumentCaptor = ArgumentCaptor.forClass(Byte.class);\n\n        // when\n        mock.varargsbyte((byte) 1, (byte) 2);\n\n        // then\n        try{ verify(mock).varargsbyte(argumentCaptor.capture());                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals((byte) 2, (byte) argumentCaptor.getValue());                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly((byte) 1, (byte) 2);      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.mockitousage.matchers.CapturingArgumentsTest::captures_correctly_when_captor_used_multiple_times": {
        "begin_line_no": 294,
        "end_line_no": 306,
        "file_path": "test/org/mockitousage/matchers/CapturingArgumentsTest.java",
        "to": [
            "    @Test\n    public void captures_correctly_when_captor_used_multiple_times$catena_1() throws Exception {\n        // given\n        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n\n        // when\n        mock.mixedVarargs(42, \"a\", \"b\", \"c\");\n\n        // then\n        // this is only for backwards compatibility. It does not make sense in real to do so.\n        try{ verify(mock).mixedVarargs(any(), argumentCaptor.capture(), argumentCaptor.capture(), argumentCaptor.capture());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly(\"a\", \"b\", \"c\");                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @Test\n    public void captures_correctly_when_captor_used_multiple_times$catena_0() throws Exception {\n        // given\n        ArgumentCaptor<String> argumentCaptor = ArgumentCaptor.forClass(String.class);\n\n        // when\n        mock.mixedVarargs(42, \"a\", \"b\", \"c\");\n\n        // then\n        // this is only for backwards compatibility. It does not make sense in real to do so.\n        verify(mock).mixedVarargs(any(), argumentCaptor.capture(), argumentCaptor.capture(), argumentCaptor.capture());         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assertions.assertThat(argumentCaptor.getAllValues()).containsExactly(\"a\", \"b\", \"c\");                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.mockitousage.bugs.varargs.VarargsAndAnyObjectPicksUpExtraInvocationsTest::shouldVerifyCorrectlyNumberOfInvocationsWithVarargs": {
        "begin_line_no": 43,
        "end_line_no": 52,
        "file_path": "test/org/mockitousage/bugs/varargs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java",
        "to": [
            "    @Test\n    public void shouldVerifyCorrectlyNumberOfInvocationsWithVarargs$catena_0() {\n        //when\n        table.newRow(\"qux\", \"foo\", \"bar\", \"baz\");\n        table.newRow(\"abc\", \"def\");\n        \n        //then\n        verify(table).newRow(anyString(), eq(\"foo\"), anyString(), anyString());                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ verify(table).newRow(anyString(), anyString());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    }
}