{
    "org.mockitousage.annotation.CaptorAnnotationTest::shouldLookForAnnotatedCaptorsInSuperClasses": {
        "begin_line_no": 112,
        "end_line_no": 120,
        "file_path": "test/org/mockitousage/annotation/CaptorAnnotationTest.java",
        "to": [
            "    @Test\n    public void shouldLookForAnnotatedCaptorsInSuperClasses$catena_0() throws Exception {\n        Sub sub = new Sub();\n        MockitoAnnotations.initMocks(sub);\n\n        assertNotNull(sub.getCaptor());                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNotNull(sub.getBaseCaptor());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(sub.getSuperBaseCaptor());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void shouldLookForAnnotatedCaptorsInSuperClasses$catena_2() throws Exception {\n        Sub sub = new Sub();\n        MockitoAnnotations.initMocks(sub);\n\n        try{ assertNotNull(sub.getCaptor());                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(sub.getBaseCaptor());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNotNull(sub.getSuperBaseCaptor());                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @Test\n    public void shouldLookForAnnotatedCaptorsInSuperClasses$catena_1() throws Exception {\n        Sub sub = new Sub();\n        MockitoAnnotations.initMocks(sub);\n\n        try{ assertNotNull(sub.getCaptor());                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNotNull(sub.getBaseCaptor());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNotNull(sub.getSuperBaseCaptor());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldUseCaptorInOrdinaryWay": {
        "begin_line_no": 50,
        "end_line_no": 60,
        "file_path": "test/org/mockitousage/annotation/CaptorAnnotationBasicTest.java",
        "to": [
            "    @Test\n    public void shouldUseCaptorInOrdinaryWay$catena_1() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        ArgumentCaptor<Person> captor = ArgumentCaptor.forClass(Person.class);\n        try{ verify(peopleRepository).save(captor.capture());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Wes\", captor.getValue().getName());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Williams\", captor.getValue().getSurname());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void shouldUseCaptorInOrdinaryWay$catena_2() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        ArgumentCaptor<Person> captor = ArgumentCaptor.forClass(Person.class);\n        try{ verify(peopleRepository).save(captor.capture());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Wes\", captor.getValue().getName());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Williams\", captor.getValue().getSurname());                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }",
            "    @Test\n    public void shouldUseCaptorInOrdinaryWay$catena_0() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        ArgumentCaptor<Person> captor = ArgumentCaptor.forClass(Person.class);\n        verify(peopleRepository).save(captor.capture());                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Wes\", captor.getValue().getName());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Williams\", captor.getValue().getSurname());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }"
        ]
    },
    "org.mockito.internal.util.reflection.GenericMasterTest::shouldDealWithNestedGenerics": {
        "begin_line_no": 36,
        "end_line_no": 40,
        "file_path": "test/org/mockito/internal/util/reflection/GenericMasterTest.java",
        "to": [
            "    @Test\n    public void shouldDealWithNestedGenerics$catena_0() throws Exception {\n        assertEquals(Set.class, m.getGenericType(field(\"nested\")));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Set.class, m.getGenericType(field(\"multiNested\")));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void shouldDealWithNestedGenerics$catena_1() throws Exception {\n        try{ assertEquals(Set.class, m.getGenericType(field(\"nested\")));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Set.class, m.getGenericType(field(\"multiNested\")));                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldUseAnnotatedCaptor": {
        "begin_line_no": 64,
        "end_line_no": 73,
        "file_path": "test/org/mockitousage/annotation/CaptorAnnotationBasicTest.java",
        "to": [
            "    @Test\n    public void shouldUseAnnotatedCaptor$catena_0() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        verify(peopleRepository).save(captor.capture());                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Wes\", captor.getValue().getName());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Williams\", captor.getValue().getSurname());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void shouldUseAnnotatedCaptor$catena_1() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        try{ verify(peopleRepository).save(captor.capture());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Wes\", captor.getValue().getName());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Williams\", captor.getValue().getSurname());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
            "    @Test\n    public void shouldUseAnnotatedCaptor$catena_2() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        try{ verify(peopleRepository).save(captor.capture());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Wes\", captor.getValue().getName());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Williams\", captor.getValue().getSurname());                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
        ]
    },
    "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldUseGenericlessAnnotatedCaptor": {
        "begin_line_no": 77,
        "end_line_no": 86,
        "file_path": "test/org/mockitousage/annotation/CaptorAnnotationBasicTest.java",
        "to": [
            "    @Test\n    public void shouldUseGenericlessAnnotatedCaptor$catena_1() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        try{ verify(peopleRepository).save((Person) genericLessCaptor.capture());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Wes\", ((Person) genericLessCaptor.getValue()).getName());                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Williams\", ((Person) genericLessCaptor.getValue()).getSurname());                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }  ",
            "    @Test\n    public void shouldUseGenericlessAnnotatedCaptor$catena_0() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        verify(peopleRepository).save((Person) genericLessCaptor.capture());                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Wes\", ((Person) genericLessCaptor.getValue()).getName());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Williams\", ((Person) genericLessCaptor.getValue()).getSurname());                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }  ",
            "    @Test\n    public void shouldUseGenericlessAnnotatedCaptor$catena_2() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        try{ verify(peopleRepository).save((Person) genericLessCaptor.capture());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Wes\", ((Person) genericLessCaptor.getValue()).getName());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Williams\", ((Person) genericLessCaptor.getValue()).getSurname());                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }  "
        ]
    },
    "org.mockitousage.annotation.CaptorAnnotationTest::testNormalUsage": {
        "begin_line_no": 49,
        "end_line_no": 71,
        "file_path": "test/org/mockitousage/annotation/CaptorAnnotationTest.java",
        "to": [
            "    @Test\n    public void testNormalUsage$catena_7() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        try{ assertNotNull(finalCaptor);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(genericsCaptor);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(nonGenericCaptorIsAllowed);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(notAMock);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        try{ mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(argForFinalCaptor, finalCaptor.getValue());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(argForGenericsCaptor, genericsCaptor.getValue());                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }",
            "    @Test\n    public void testNormalUsage$catena_1() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        try{ assertNotNull(finalCaptor);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNotNull(genericsCaptor);                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNotNull(nonGenericCaptorIsAllowed);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(notAMock);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        try{ mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(argForFinalCaptor, finalCaptor.getValue());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(argForGenericsCaptor, genericsCaptor.getValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
            "    @Test\n    public void testNormalUsage$catena_4() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        try{ assertNotNull(finalCaptor);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(genericsCaptor);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(nonGenericCaptorIsAllowed);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(notAMock);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(argForFinalCaptor, finalCaptor.getValue());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(argForGenericsCaptor, genericsCaptor.getValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
            "    @Test\n    public void testNormalUsage$catena_3() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        try{ assertNotNull(finalCaptor);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(genericsCaptor);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(nonGenericCaptorIsAllowed);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNull(notAMock);                                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        try{ mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(argForFinalCaptor, finalCaptor.getValue());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(argForGenericsCaptor, genericsCaptor.getValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
            "    @Test\n    public void testNormalUsage$catena_2() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        try{ assertNotNull(finalCaptor);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(genericsCaptor);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNotNull(nonGenericCaptorIsAllowed);                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNull(notAMock);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        try{ mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(argForFinalCaptor, finalCaptor.getValue());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(argForGenericsCaptor, genericsCaptor.getValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
            "    @Test\n    public void testNormalUsage$catena_5() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        try{ assertNotNull(finalCaptor);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(genericsCaptor);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(nonGenericCaptorIsAllowed);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(notAMock);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        try{ mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(argForFinalCaptor, finalCaptor.getValue());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(argForGenericsCaptor, genericsCaptor.getValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
            "    @Test\n    public void testNormalUsage$catena_6() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        try{ assertNotNull(finalCaptor);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(genericsCaptor);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(nonGenericCaptorIsAllowed);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(notAMock);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        try{ mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(argForFinalCaptor, finalCaptor.getValue());                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(argForGenericsCaptor, genericsCaptor.getValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
            "    @Test\n    public void testNormalUsage$catena_0() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        assertNotNull(finalCaptor);                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNotNull(genericsCaptor);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(nonGenericCaptorIsAllowed);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(notAMock);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        try{ mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(argForFinalCaptor, finalCaptor.getValue());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(argForGenericsCaptor, genericsCaptor.getValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }"
        ]
    },
    "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldCaptureGenericList": {
        "begin_line_no": 91,
        "end_line_no": 102,
        "file_path": "test/org/mockitousage/annotation/CaptorAnnotationBasicTest.java",
        "to": [
            "    @Test\n    public void shouldCaptureGenericList$catena_0() {\n        //given\n        List<String> list = new LinkedList<String>();\n        mock.listArgMethod(list);\n                \n        //when\n        verify(mock).listArgMethod(genericListCaptor.capture());                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        //then\n        try{ assertSame(list, genericListCaptor.getValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    } ",
            "    @Test\n    public void shouldCaptureGenericList$catena_1() {\n        //given\n        List<String> list = new LinkedList<String>();\n        mock.listArgMethod(list);\n                \n        //when\n        try{ verify(mock).listArgMethod(genericListCaptor.capture());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        //then\n        assertSame(list, genericListCaptor.getValue());                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    } "
        ]
    },
    "org.mockitousage.annotation.CaptorAnnotationTest::shouldScreamWhenMoreThanOneMockitoAnnotaton": {
        "begin_line_no": 92,
        "end_line_no": 101,
        "file_path": "test/org/mockitousage/annotation/CaptorAnnotationTest.java",
        "to": [
            "    @Test\n    public void shouldScreamWhenMoreThanOneMockitoAnnotaton$catena_0() {\n        try {\n            MockitoAnnotations.initMocks(new ToManyAnnotations());\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (MockitoException e) {\n            try{ assertContains(\"missingGenericsField\", e.getMessage());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertContains(\"multiple Mockito annotations\", e.getMessage());                }catch(Throwable __SHOULD_BE_IGNORED){}            \n        }\n    }",
            "    @Test\n    public void shouldScreamWhenMoreThanOneMockitoAnnotaton$catena_2() {\n        try {\n            MockitoAnnotations.initMocks(new ToManyAnnotations());\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (MockitoException e) {\n            try{ assertContains(\"missingGenericsField\", e.getMessage());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertContains(\"multiple Mockito annotations\", e.getMessage());                     /***** ORIGINAL ASSERTION IS HERE *****/            \n        }\n    }",
            "    @Test\n    public void shouldScreamWhenMoreThanOneMockitoAnnotaton$catena_1() {\n        try {\n            MockitoAnnotations.initMocks(new ToManyAnnotations());\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (MockitoException e) {\n            assertContains(\"missingGenericsField\", e.getMessage());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertContains(\"multiple Mockito annotations\", e.getMessage());                }catch(Throwable __SHOULD_BE_IGNORED){}            \n        }\n    }"
        ]
    }
}