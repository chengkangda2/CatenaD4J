{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "source/org/jfree/chart/plot/XYPlot.java",
            "replaced_with": "                if (r != null) {\n",
            "patch_type": "insert",
            "next_line_no": 4493
        },
        "1": {
            "file_name": "source/org/jfree/chart/plot/XYPlot.java",
            "replaced_with": "                }\n",
            "patch_type": "insert",
            "next_line_no": 4501
        }
    },
    "method": {
        "failing_tests": [
            "org.jfree.chart.axis.junit.LogAxisTests::testXYAutoRange1",
            "org.jfree.chart.axis.junit.LogAxisTests::testXYAutoRange2",
            "org.jfree.chart.axis.junit.NumberAxisTests::testXYAutoRange1",
            "org.jfree.chart.axis.junit.NumberAxisTests::testXYAutoRange2",
            "org.jfree.chart.axis.junit.ValueAxisTests::testAxisMargins",
            "org.jfree.chart.junit.JFreeChartTests::testSerialization4",
            "org.jfree.chart.junit.ScatterPlotTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.ScatterPlotTests::testSetSeriesToolTipGenerator",
            "org.jfree.chart.junit.ScatterPlotTests::testReplaceDataset",
            "org.jfree.chart.junit.TimeSeriesChartTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.TimeSeriesChartTests::testSetSeriesToolTipGenerator",
            "org.jfree.chart.junit.TimeSeriesChartTests::testReplaceDataset",
            "org.jfree.chart.junit.XYAreaChartTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.XYAreaChartTests::testSetSeriesToolTipGenerator",
            "org.jfree.chart.junit.XYAreaChartTests::testReplaceDataset",
            "org.jfree.chart.junit.XYStepAreaChartTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.XYStepAreaChartTests::testSetSeriesToolTipGenerator",
            "org.jfree.chart.junit.XYStepAreaChartTests::testReplaceDataset",
            "org.jfree.chart.junit.XYStepChartTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.XYStepChartTests::testSetSeriesToolTipGenerator",
            "org.jfree.chart.junit.XYStepChartTests::testReplaceDataset",
            "org.jfree.chart.plot.junit.XYPlotTests::testDrawRangeGridlines"
        ],
        "org.jfree.chart.axis.junit.LogAxisTests::testXYAutoRange1": {
            "file_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
            "Instance": "Begin: Pos(253, 12)\nEnd: Pos(275, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/axis/junit/LogAxisTests.java\nName: testXYAutoRange1\nChilds: [StatementAssertion<Begin: Pos(273, 9), End: Pos(273, 72)>,\nStatementAssertion<Begin: Pos(274, 9), End: Pos(274, 72)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/axis/junit/LogAxisTests.java",
            "name": "testXYAutoRange1",
            "begin": "Pos(253, 12)",
            "end": "Pos(275, 5)",
            "begin_line_no": 253,
            "end_line_no": 275,
            "child": [
                "Begin: Pos(273, 9)\nEnd: Pos(273, 72)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(274, 9)\nEnd: Pos(274, 72)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testXYAutoRange1$catena_0() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        LogAxis axis = new LogAxis(\"Log(Y)\");\n        plot.setRangeAxis(axis);\n        assertEquals(0.9465508226401592, axis.getLowerBound(), EPSILON);                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3.1694019256486126, axis.getUpperBound(), EPSILON);                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testXYAutoRange1$catena_1() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        LogAxis axis = new LogAxis(\"Log(Y)\");\n        plot.setRangeAxis(axis);\n        try{ assertEquals(0.9465508226401592, axis.getLowerBound(), EPSILON);                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3.1694019256486126, axis.getUpperBound(), EPSILON);                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testXYAutoRange1$catena_0() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        LogAxis axis = new LogAxis(\"Log(Y)\");\n        plot.setRangeAxis(axis);\n        assertEquals(0.9465508226401592, axis.getLowerBound(), EPSILON);                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3.1694019256486126, axis.getUpperBound(), EPSILON);                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testXYAutoRange1$catena_1() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        LogAxis axis = new LogAxis(\"Log(Y)\");\n        plot.setRangeAxis(axis);\n        try{ assertEquals(0.9465508226401592, axis.getLowerBound(), EPSILON);                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3.1694019256486126, axis.getUpperBound(), EPSILON);                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.jfree.chart.axis.junit.LogAxisTests::testXYAutoRange2": {
            "file_path": "tests/org/jfree/chart/axis/junit/LogAxisTests.java",
            "Instance": "Begin: Pos(281, 12)\nEnd: Pos(303, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/axis/junit/LogAxisTests.java\nName: testXYAutoRange2\nChilds: [StatementAssertion<Begin: Pos(301, 9), End: Pos(301, 72)>,\nStatementAssertion<Begin: Pos(302, 9), End: Pos(302, 72)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/axis/junit/LogAxisTests.java",
            "name": "testXYAutoRange2",
            "begin": "Pos(281, 12)",
            "end": "Pos(303, 5)",
            "begin_line_no": 281,
            "end_line_no": 303,
            "child": [
                "Begin: Pos(301, 9)\nEnd: Pos(301, 72)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(302, 9)\nEnd: Pos(302, 72)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testXYAutoRange2$catena_0() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        LogAxis axis = new LogAxis(\"Log(Y)\");\n        plot.setRangeAxis(axis);\n        assertEquals(0.9465508226401592, axis.getLowerBound(), EPSILON);                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3.1694019256486126, axis.getUpperBound(), EPSILON);                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testXYAutoRange2$catena_1() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        LogAxis axis = new LogAxis(\"Log(Y)\");\n        plot.setRangeAxis(axis);\n        try{ assertEquals(0.9465508226401592, axis.getLowerBound(), EPSILON);                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3.1694019256486126, axis.getUpperBound(), EPSILON);                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testXYAutoRange2$catena_0() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        LogAxis axis = new LogAxis(\"Log(Y)\");\n        plot.setRangeAxis(axis);\n        assertEquals(0.9465508226401592, axis.getLowerBound(), EPSILON);                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3.1694019256486126, axis.getUpperBound(), EPSILON);                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testXYAutoRange2$catena_1() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        LogAxis axis = new LogAxis(\"Log(Y)\");\n        plot.setRangeAxis(axis);\n        try{ assertEquals(0.9465508226401592, axis.getLowerBound(), EPSILON);                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3.1694019256486126, axis.getUpperBound(), EPSILON);                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.jfree.chart.axis.junit.NumberAxisTests::testXYAutoRange1": {
            "file_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
            "Instance": "Begin: Pos(347, 12)\nEnd: Pos(369, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/axis/junit/NumberAxisTests.java\nName: testXYAutoRange1\nChilds: [StatementAssertion<Begin: Pos(367, 9), End: Pos(367, 57)>,\nStatementAssertion<Begin: Pos(368, 9), End: Pos(368, 57)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/axis/junit/NumberAxisTests.java",
            "name": "testXYAutoRange1",
            "begin": "Pos(347, 12)",
            "end": "Pos(369, 5)",
            "begin_line_no": 347,
            "end_line_no": 369,
            "child": [
                "Begin: Pos(367, 9)\nEnd: Pos(367, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(368, 9)\nEnd: Pos(368, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testXYAutoRange1$catena_0() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        NumberAxis axis = (NumberAxis) plot.getDomainAxis();\n        axis.setAutoRangeIncludesZero(false);\n        assertEquals(0.9, axis.getLowerBound(), EPSILON);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3.1, axis.getUpperBound(), EPSILON);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testXYAutoRange1$catena_1() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        NumberAxis axis = (NumberAxis) plot.getDomainAxis();\n        axis.setAutoRangeIncludesZero(false);\n        try{ assertEquals(0.9, axis.getLowerBound(), EPSILON);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3.1, axis.getUpperBound(), EPSILON);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testXYAutoRange1$catena_0() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        NumberAxis axis = (NumberAxis) plot.getDomainAxis();\n        axis.setAutoRangeIncludesZero(false);\n        assertEquals(0.9, axis.getLowerBound(), EPSILON);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3.1, axis.getUpperBound(), EPSILON);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testXYAutoRange1$catena_1() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        NumberAxis axis = (NumberAxis) plot.getDomainAxis();\n        axis.setAutoRangeIncludesZero(false);\n        try{ assertEquals(0.9, axis.getLowerBound(), EPSILON);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3.1, axis.getUpperBound(), EPSILON);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.jfree.chart.axis.junit.NumberAxisTests::testXYAutoRange2": {
            "file_path": "tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
            "Instance": "Begin: Pos(375, 12)\nEnd: Pos(397, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/axis/junit/NumberAxisTests.java\nName: testXYAutoRange2\nChilds: [StatementAssertion<Begin: Pos(395, 9), End: Pos(395, 57)>,\nStatementAssertion<Begin: Pos(396, 9), End: Pos(396, 57)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/axis/junit/NumberAxisTests.java",
            "name": "testXYAutoRange2",
            "begin": "Pos(375, 12)",
            "end": "Pos(397, 5)",
            "begin_line_no": 375,
            "end_line_no": 397,
            "child": [
                "Begin: Pos(395, 9)\nEnd: Pos(395, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(396, 9)\nEnd: Pos(396, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testXYAutoRange2$catena_0() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        NumberAxis axis = (NumberAxis) plot.getRangeAxis();\n        axis.setAutoRangeIncludesZero(false);\n        assertEquals(0.9, axis.getLowerBound(), EPSILON);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3.1, axis.getUpperBound(), EPSILON);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testXYAutoRange2$catena_1() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        NumberAxis axis = (NumberAxis) plot.getRangeAxis();\n        axis.setAutoRangeIncludesZero(false);\n        try{ assertEquals(0.9, axis.getLowerBound(), EPSILON);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3.1, axis.getUpperBound(), EPSILON);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testXYAutoRange2$catena_0() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        NumberAxis axis = (NumberAxis) plot.getRangeAxis();\n        axis.setAutoRangeIncludesZero(false);\n        assertEquals(0.9, axis.getLowerBound(), EPSILON);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3.1, axis.getUpperBound(), EPSILON);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testXYAutoRange2$catena_1() {\n        XYSeries series = new XYSeries(\"Series 1\");\n        series.add(1.0, 1.0);\n        series.add(2.0, 2.0);\n        series.add(3.0, 3.0);\n        XYSeriesCollection dataset = new XYSeriesCollection();\n        dataset.addSeries(series);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Test\",\n            \"X\",\n            \"Y\",\n            dataset,\n            PlotOrientation.VERTICAL,\n            false,\n            false,\n            false\n        );\n        XYPlot plot = (XYPlot) chart.getPlot();\n        NumberAxis axis = (NumberAxis) plot.getRangeAxis();\n        axis.setAutoRangeIncludesZero(false);\n        try{ assertEquals(0.9, axis.getLowerBound(), EPSILON);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3.1, axis.getUpperBound(), EPSILON);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.jfree.chart.axis.junit.ValueAxisTests::testAxisMargins": {
            "file_path": "tests/org/jfree/chart/axis/junit/ValueAxisTests.java",
            "Instance": "Begin: Pos(228, 12)\nEnd: Pos(245, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/axis/junit/ValueAxisTests.java\nName: testAxisMargins\nChilds: [StatementAssertion<Begin: Pos(240, 9), End: Pos(240, 52)>,\nStatementAssertion<Begin: Pos(244, 9), End: Pos(244, 52)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/axis/junit/ValueAxisTests.java",
            "name": "testAxisMargins",
            "begin": "Pos(228, 12)",
            "end": "Pos(245, 5)",
            "begin_line_no": 228,
            "end_line_no": 245,
            "child": [
                "Begin: Pos(240, 9)\nEnd: Pos(240, 52)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(244, 9)\nEnd: Pos(244, 52)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testAxisMargins$catena_0() {\n        XYSeries series = new XYSeries(\"S1\");\n        series.add(100.0, 1.1);\n        series.add(200.0, 2.2);\n        XYSeriesCollection dataset = new XYSeriesCollection(series);\n        dataset.setIntervalWidth(0.0);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Title\", \"X\", \"Y\", dataset, PlotOrientation.VERTICAL,\n            false, false, false\n        );\n        ValueAxis domainAxis = ((XYPlot) chart.getPlot()).getDomainAxis();\n        Range r = domainAxis.getRange();\n        assertEquals(110.0, r.getLength(), EPSILON);                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        domainAxis.setLowerMargin(0.10);\n        domainAxis.setUpperMargin(0.10);\n        r = domainAxis.getRange();\n        try{ assertEquals(120.0, r.getLength(), EPSILON);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testAxisMargins$catena_1() {\n        XYSeries series = new XYSeries(\"S1\");\n        series.add(100.0, 1.1);\n        series.add(200.0, 2.2);\n        XYSeriesCollection dataset = new XYSeriesCollection(series);\n        dataset.setIntervalWidth(0.0);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Title\", \"X\", \"Y\", dataset, PlotOrientation.VERTICAL,\n            false, false, false\n        );\n        ValueAxis domainAxis = ((XYPlot) chart.getPlot()).getDomainAxis();\n        Range r = domainAxis.getRange();\n        try{ assertEquals(110.0, r.getLength(), EPSILON);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        domainAxis.setLowerMargin(0.10);\n        domainAxis.setUpperMargin(0.10);\n        r = domainAxis.getRange();\n        assertEquals(120.0, r.getLength(), EPSILON);                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testAxisMargins$catena_0() {\n        XYSeries series = new XYSeries(\"S1\");\n        series.add(100.0, 1.1);\n        series.add(200.0, 2.2);\n        XYSeriesCollection dataset = new XYSeriesCollection(series);\n        dataset.setIntervalWidth(0.0);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Title\", \"X\", \"Y\", dataset, PlotOrientation.VERTICAL,\n            false, false, false\n        );\n        ValueAxis domainAxis = ((XYPlot) chart.getPlot()).getDomainAxis();\n        Range r = domainAxis.getRange();\n        assertEquals(110.0, r.getLength(), EPSILON);                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        domainAxis.setLowerMargin(0.10);\n        domainAxis.setUpperMargin(0.10);\n        r = domainAxis.getRange();\n        try{ assertEquals(120.0, r.getLength(), EPSILON);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testAxisMargins$catena_1() {\n        XYSeries series = new XYSeries(\"S1\");\n        series.add(100.0, 1.1);\n        series.add(200.0, 2.2);\n        XYSeriesCollection dataset = new XYSeriesCollection(series);\n        dataset.setIntervalWidth(0.0);\n        JFreeChart chart = ChartFactory.createScatterPlot(\n            \"Title\", \"X\", \"Y\", dataset, PlotOrientation.VERTICAL,\n            false, false, false\n        );\n        ValueAxis domainAxis = ((XYPlot) chart.getPlot()).getDomainAxis();\n        Range r = domainAxis.getRange();\n        try{ assertEquals(110.0, r.getLength(), EPSILON);                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        domainAxis.setLowerMargin(0.10);\n        domainAxis.setUpperMargin(0.10);\n        r = domainAxis.getRange();\n        assertEquals(120.0, r.getLength(), EPSILON);                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.jfree.chart.junit.JFreeChartTests::testSerialization4": {
            "file_path": "tests/org/jfree/chart/junit/JFreeChartTests.java",
            "Instance": "Begin: Pos(438, 12)\nEnd: Pos(468, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/JFreeChartTests.java\nName: testSerialization4\nChilds: [StatementAssertion<Begin: Pos(466, 9), End: Pos(466, 29)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/JFreeChartTests.java",
            "name": "testSerialization4",
            "begin": "Pos(438, 12)",
            "end": "Pos(468, 5)",
            "begin_line_no": 438,
            "end_line_no": 468,
            "child": [
                "Begin: Pos(466, 9)\nEnd: Pos(466, 29)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.junit.ScatterPlotTests::testDrawWithNullInfo": {
            "file_path": "tests/org/jfree/chart/junit/ScatterPlotTests.java",
            "Instance": "Begin: Pos(105, 12)\nEnd: Pos(125, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/ScatterPlotTests.java\nName: testDrawWithNullInfo\nChilds: [StatementAssertion<Begin: Pos(123, 9), End: Pos(123, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/ScatterPlotTests.java",
            "name": "testDrawWithNullInfo",
            "begin": "Pos(105, 12)",
            "end": "Pos(125, 5)",
            "begin_line_no": 105,
            "end_line_no": 125,
            "child": [
                "Begin: Pos(123, 9)\nEnd: Pos(123, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.junit.ScatterPlotTests::testSetSeriesToolTipGenerator": {
            "file_path": "tests/org/jfree/chart/junit/ScatterPlotTests.java",
            "Instance": "Begin: Pos(157, 12)\nEnd: Pos(164, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/ScatterPlotTests.java\nName: testSetSeriesToolTipGenerator\nChilds: [StatementAssertion<Begin: Pos(163, 9), End: Pos(163, 30)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/ScatterPlotTests.java",
            "name": "testSetSeriesToolTipGenerator",
            "begin": "Pos(157, 12)",
            "end": "Pos(164, 5)",
            "begin_line_no": 157,
            "end_line_no": 164,
            "child": [
                "Begin: Pos(163, 9)\nEnd: Pos(163, 30)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.junit.ScatterPlotTests::testReplaceDataset": {
            "file_path": "tests/org/jfree/chart/junit/ScatterPlotTests.java",
            "Instance": "Begin: Pos(130, 12)\nEnd: Pos(151, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/ScatterPlotTests.java\nName: testReplaceDataset\nChilds: [StatementAssertion<Begin: Pos(143, 9), End: Pos(143, 35)>,\nStatementAssertion<Begin: Pos(146, 9), End: Pos(147, 73)>,\nStatementAssertion<Begin: Pos(148, 9), End: Pos(149, 73)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/ScatterPlotTests.java",
            "name": "testReplaceDataset",
            "begin": "Pos(130, 12)",
            "end": "Pos(151, 5)",
            "begin_line_no": 130,
            "end_line_no": 151,
            "child": [
                "Begin: Pos(143, 9)\nEnd: Pos(143, 35)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(146, 9)\nEnd: Pos(147, 73)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(148, 9)\nEnd: Pos(149, 73)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReplaceDataset$catena_0() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        try{ assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testReplaceDataset$catena_1() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        try{ assertEquals(true, l.flag);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testReplaceDataset$catena_2() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        try{ assertEquals(true, l.flag);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        try{ assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            ],
            "func": {
                "0": "    public void testReplaceDataset$catena_0() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        try{ assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "1": "    public void testReplaceDataset$catena_1() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        try{ assertEquals(true, l.flag);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "2": "    public void testReplaceDataset$catena_2() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        try{ assertEquals(true, l.flag);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        try{ assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            }
        },
        "org.jfree.chart.junit.TimeSeriesChartTests::testDrawWithNullInfo": {
            "file_path": "tests/org/jfree/chart/junit/TimeSeriesChartTests.java",
            "Instance": "Begin: Pos(102, 12)\nEnd: Pos(120, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/TimeSeriesChartTests.java\nName: testDrawWithNullInfo\nChilds: [StatementAssertion<Begin: Pos(118, 9), End: Pos(118, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/TimeSeriesChartTests.java",
            "name": "testDrawWithNullInfo",
            "begin": "Pos(102, 12)",
            "end": "Pos(120, 5)",
            "begin_line_no": 102,
            "end_line_no": 120,
            "child": [
                "Begin: Pos(118, 9)\nEnd: Pos(118, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.junit.TimeSeriesChartTests::testSetSeriesToolTipGenerator": {
            "file_path": "tests/org/jfree/chart/junit/TimeSeriesChartTests.java",
            "Instance": "Begin: Pos(152, 12)\nEnd: Pos(159, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/TimeSeriesChartTests.java\nName: testSetSeriesToolTipGenerator\nChilds: [StatementAssertion<Begin: Pos(158, 9), End: Pos(158, 30)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/TimeSeriesChartTests.java",
            "name": "testSetSeriesToolTipGenerator",
            "begin": "Pos(152, 12)",
            "end": "Pos(159, 5)",
            "begin_line_no": 152,
            "end_line_no": 159,
            "child": [
                "Begin: Pos(158, 9)\nEnd: Pos(158, 30)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.junit.TimeSeriesChartTests::testReplaceDataset": {
            "file_path": "tests/org/jfree/chart/junit/TimeSeriesChartTests.java",
            "Instance": "Begin: Pos(125, 12)\nEnd: Pos(146, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/TimeSeriesChartTests.java\nName: testReplaceDataset\nChilds: [StatementAssertion<Begin: Pos(138, 9), End: Pos(138, 35)>,\nStatementAssertion<Begin: Pos(141, 9), End: Pos(142, 73)>,\nStatementAssertion<Begin: Pos(143, 9), End: Pos(144, 73)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/TimeSeriesChartTests.java",
            "name": "testReplaceDataset",
            "begin": "Pos(125, 12)",
            "end": "Pos(146, 5)",
            "begin_line_no": 125,
            "end_line_no": 146,
            "child": [
                "Begin: Pos(138, 9)\nEnd: Pos(138, 35)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(141, 9)\nEnd: Pos(142, 73)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(143, 9)\nEnd: Pos(144, 73)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReplaceDataset$catena_0() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        try{ assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testReplaceDataset$catena_1() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        try{ assertEquals(true, l.flag);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testReplaceDataset$catena_2() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        try{ assertEquals(true, l.flag);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        try{ assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            ],
            "func": {
                "0": "    public void testReplaceDataset$catena_0() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        try{ assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "1": "    public void testReplaceDataset$catena_1() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        try{ assertEquals(true, l.flag);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "2": "    public void testReplaceDataset$catena_2() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        try{ assertEquals(true, l.flag);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        try{ assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            }
        },
        "org.jfree.chart.junit.XYAreaChartTests::testDrawWithNullInfo": {
            "file_path": "tests/org/jfree/chart/junit/XYAreaChartTests.java",
            "Instance": "Begin: Pos(103, 12)\nEnd: Pos(121, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYAreaChartTests.java\nName: testDrawWithNullInfo\nChilds: [StatementAssertion<Begin: Pos(119, 9), End: Pos(119, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYAreaChartTests.java",
            "name": "testDrawWithNullInfo",
            "begin": "Pos(103, 12)",
            "end": "Pos(121, 5)",
            "begin_line_no": 103,
            "end_line_no": 121,
            "child": [
                "Begin: Pos(119, 9)\nEnd: Pos(119, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.junit.XYAreaChartTests::testSetSeriesToolTipGenerator": {
            "file_path": "tests/org/jfree/chart/junit/XYAreaChartTests.java",
            "Instance": "Begin: Pos(153, 12)\nEnd: Pos(161, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYAreaChartTests.java\nName: testSetSeriesToolTipGenerator\nChilds: [StatementAssertion<Begin: Pos(160, 9), End: Pos(160, 30)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYAreaChartTests.java",
            "name": "testSetSeriesToolTipGenerator",
            "begin": "Pos(153, 12)",
            "end": "Pos(161, 5)",
            "begin_line_no": 153,
            "end_line_no": 161,
            "child": [
                "Begin: Pos(160, 9)\nEnd: Pos(160, 30)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.junit.XYAreaChartTests::testReplaceDataset": {
            "file_path": "tests/org/jfree/chart/junit/XYAreaChartTests.java",
            "Instance": "Begin: Pos(126, 12)\nEnd: Pos(147, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYAreaChartTests.java\nName: testReplaceDataset\nChilds: [StatementAssertion<Begin: Pos(139, 9), End: Pos(139, 35)>,\nStatementAssertion<Begin: Pos(142, 9), End: Pos(143, 73)>,\nStatementAssertion<Begin: Pos(144, 9), End: Pos(145, 73)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYAreaChartTests.java",
            "name": "testReplaceDataset",
            "begin": "Pos(126, 12)",
            "end": "Pos(147, 5)",
            "begin_line_no": 126,
            "end_line_no": 147,
            "child": [
                "Begin: Pos(139, 9)\nEnd: Pos(139, 35)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(142, 9)\nEnd: Pos(143, 73)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(144, 9)\nEnd: Pos(145, 73)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReplaceDataset$catena_0() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        try{ assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testReplaceDataset$catena_1() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        try{ assertEquals(true, l.flag);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testReplaceDataset$catena_2() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        try{ assertEquals(true, l.flag);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        try{ assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            ],
            "func": {
                "0": "    public void testReplaceDataset$catena_0() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        try{ assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "1": "    public void testReplaceDataset$catena_1() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        try{ assertEquals(true, l.flag);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "2": "    public void testReplaceDataset$catena_2() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        try{ assertEquals(true, l.flag);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        try{ assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            }
        },
        "org.jfree.chart.junit.XYStepAreaChartTests::testDrawWithNullInfo": {
            "file_path": "tests/org/jfree/chart/junit/XYStepAreaChartTests.java",
            "Instance": "Begin: Pos(103, 12)\nEnd: Pos(121, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYStepAreaChartTests.java\nName: testDrawWithNullInfo\nChilds: [StatementAssertion<Begin: Pos(119, 9), End: Pos(119, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYStepAreaChartTests.java",
            "name": "testDrawWithNullInfo",
            "begin": "Pos(103, 12)",
            "end": "Pos(121, 5)",
            "begin_line_no": 103,
            "end_line_no": 121,
            "child": [
                "Begin: Pos(119, 9)\nEnd: Pos(119, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.junit.XYStepAreaChartTests::testSetSeriesToolTipGenerator": {
            "file_path": "tests/org/jfree/chart/junit/XYStepAreaChartTests.java",
            "Instance": "Begin: Pos(153, 12)\nEnd: Pos(160, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYStepAreaChartTests.java\nName: testSetSeriesToolTipGenerator\nChilds: [StatementAssertion<Begin: Pos(159, 9), End: Pos(159, 30)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYStepAreaChartTests.java",
            "name": "testSetSeriesToolTipGenerator",
            "begin": "Pos(153, 12)",
            "end": "Pos(160, 5)",
            "begin_line_no": 153,
            "end_line_no": 160,
            "child": [
                "Begin: Pos(159, 9)\nEnd: Pos(159, 30)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.junit.XYStepAreaChartTests::testReplaceDataset": {
            "file_path": "tests/org/jfree/chart/junit/XYStepAreaChartTests.java",
            "Instance": "Begin: Pos(126, 12)\nEnd: Pos(147, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYStepAreaChartTests.java\nName: testReplaceDataset\nChilds: [StatementAssertion<Begin: Pos(139, 9), End: Pos(139, 35)>,\nStatementAssertion<Begin: Pos(142, 9), End: Pos(143, 73)>,\nStatementAssertion<Begin: Pos(144, 9), End: Pos(145, 73)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYStepAreaChartTests.java",
            "name": "testReplaceDataset",
            "begin": "Pos(126, 12)",
            "end": "Pos(147, 5)",
            "begin_line_no": 126,
            "end_line_no": 147,
            "child": [
                "Begin: Pos(139, 9)\nEnd: Pos(139, 35)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(142, 9)\nEnd: Pos(143, 73)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(144, 9)\nEnd: Pos(145, 73)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReplaceDataset$catena_0() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        try{ assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testReplaceDataset$catena_1() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        try{ assertEquals(true, l.flag);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testReplaceDataset$catena_2() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        try{ assertEquals(true, l.flag);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        try{ assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            ],
            "func": {
                "0": "    public void testReplaceDataset$catena_0() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        try{ assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "1": "    public void testReplaceDataset$catena_1() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        try{ assertEquals(true, l.flag);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "2": "    public void testReplaceDataset$catena_2() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        try{ assertEquals(true, l.flag);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        try{ assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            }
        },
        "org.jfree.chart.junit.XYStepChartTests::testDrawWithNullInfo": {
            "file_path": "tests/org/jfree/chart/junit/XYStepChartTests.java",
            "Instance": "Begin: Pos(103, 12)\nEnd: Pos(121, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYStepChartTests.java\nName: testDrawWithNullInfo\nChilds: [StatementAssertion<Begin: Pos(119, 9), End: Pos(119, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYStepChartTests.java",
            "name": "testDrawWithNullInfo",
            "begin": "Pos(103, 12)",
            "end": "Pos(121, 5)",
            "begin_line_no": 103,
            "end_line_no": 121,
            "child": [
                "Begin: Pos(119, 9)\nEnd: Pos(119, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.junit.XYStepChartTests::testSetSeriesToolTipGenerator": {
            "file_path": "tests/org/jfree/chart/junit/XYStepChartTests.java",
            "Instance": "Begin: Pos(153, 12)\nEnd: Pos(160, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYStepChartTests.java\nName: testSetSeriesToolTipGenerator\nChilds: [StatementAssertion<Begin: Pos(159, 9), End: Pos(159, 30)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYStepChartTests.java",
            "name": "testSetSeriesToolTipGenerator",
            "begin": "Pos(153, 12)",
            "end": "Pos(160, 5)",
            "begin_line_no": 153,
            "end_line_no": 160,
            "child": [
                "Begin: Pos(159, 9)\nEnd: Pos(159, 30)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.chart.junit.XYStepChartTests::testReplaceDataset": {
            "file_path": "tests/org/jfree/chart/junit/XYStepChartTests.java",
            "Instance": "Begin: Pos(126, 12)\nEnd: Pos(147, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYStepChartTests.java\nName: testReplaceDataset\nChilds: [StatementAssertion<Begin: Pos(139, 9), End: Pos(139, 35)>,\nStatementAssertion<Begin: Pos(142, 9), End: Pos(143, 73)>,\nStatementAssertion<Begin: Pos(144, 9), End: Pos(145, 73)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/junit/XYStepChartTests.java",
            "name": "testReplaceDataset",
            "begin": "Pos(126, 12)",
            "end": "Pos(147, 5)",
            "begin_line_no": 126,
            "end_line_no": 147,
            "child": [
                "Begin: Pos(139, 9)\nEnd: Pos(139, 35)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(142, 9)\nEnd: Pos(143, 73)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(144, 9)\nEnd: Pos(145, 73)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testReplaceDataset$catena_0() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        try{ assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testReplaceDataset$catena_1() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        try{ assertEquals(true, l.flag);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    public void testReplaceDataset$catena_2() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        try{ assertEquals(true, l.flag);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        try{ assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            ],
            "func": {
                "0": "    public void testReplaceDataset$catena_0() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        assertEquals(true, l.flag);                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        try{ assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "1": "    public void testReplaceDataset$catena_1() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        try{ assertEquals(true, l.flag);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "2": "    public void testReplaceDataset$catena_2() {\n\n        // create a dataset...\n        XYSeries series1 = new XYSeries(\"Series 1\");\n        series1.add(10.0, 10.0);\n        series1.add(20.0, 20.0);\n        series1.add(30.0, 30.0);\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n        LocalListener l = new LocalListener();\n        this.chart.addChangeListener(l);\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n        plot.setDataset(dataset);\n        try{ assertEquals(true, l.flag);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        ValueAxis axis = plot.getRangeAxis();\n        Range range = axis.getRange();\n        try{ assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n                   + range.getLowerBound(), range.getLowerBound() <= 10);                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n                   + range.getUpperBound(), range.getUpperBound() >= 30);                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            }
        },
        "org.jfree.chart.plot.junit.XYPlotTests::testDrawRangeGridlines": {
            "file_path": "tests/org/jfree/chart/plot/junit/XYPlotTests.java",
            "Instance": "Begin: Pos(1051, 12)\nEnd: Pos(1071, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/plot/junit/XYPlotTests.java\nName: testDrawRangeGridlines\nChilds: [StatementAssertion<Begin: Pos(1070, 9), End: Pos(1070, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_4/tests//org/jfree/chart/plot/junit/XYPlotTests.java",
            "name": "testDrawRangeGridlines",
            "begin": "Pos(1051, 12)",
            "end": "Pos(1071, 5)",
            "begin_line_no": 1051,
            "end_line_no": 1071,
            "child": [
                "Begin: Pos(1070, 9)\nEnd: Pos(1070, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        }
    },
    "11": {
        "failing_tests": [
            "org.jfree.chart.junit.TimeSeriesChartTests::testReplaceDataset$catena_0",
            "org.jfree.chart.junit.XYAreaChartTests::testSetSeriesToolTipGenerator",
            "org.jfree.chart.junit.XYStepAreaChartTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.XYStepChartTests::testSetSeriesToolTipGenerator",
            "org.jfree.chart.junit.TimeSeriesChartTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.XYAreaChartTests::testDrawWithNullInfo",
            "org.jfree.chart.junit.XYStepAreaChartTests::testReplaceDataset$catena_1",
            "org.jfree.chart.plot.junit.XYPlotTests::testDrawRangeGridlines",
            "org.jfree.chart.junit.XYAreaChartTests::testReplaceDataset$catena_2",
            "org.jfree.chart.junit.XYStepChartTests::testReplaceDataset$catena_2",
            "org.jfree.chart.axis.junit.NumberAxisTests::testXYAutoRange2$catena_0",
            "org.jfree.chart.junit.ScatterPlotTests::testReplaceDataset$catena_0",
            "org.jfree.chart.axis.junit.NumberAxisTests::testXYAutoRange2$catena_1",
            "org.jfree.chart.junit.XYStepAreaChartTests::testReplaceDataset$catena_0",
            "org.jfree.chart.junit.XYStepAreaChartTests::testSetSeriesToolTipGenerator",
            "org.jfree.chart.axis.junit.LogAxisTests::testXYAutoRange1$catena_0",
            "org.jfree.chart.axis.junit.ValueAxisTests::testAxisMargins$catena_0",
            "org.jfree.chart.junit.JFreeChartTests::testSerialization4",
            "org.jfree.chart.junit.XYStepChartTests::testReplaceDataset$catena_0",
            "org.jfree.chart.axis.junit.ValueAxisTests::testAxisMargins$catena_1",
            "org.jfree.chart.junit.TimeSeriesChartTests::testReplaceDataset$catena_2",
            "org.jfree.chart.axis.junit.NumberAxisTests::testXYAutoRange1$catena_0",
            "org.jfree.chart.junit.ScatterPlotTests::testDrawWithNullInfo",
            "org.jfree.chart.axis.junit.LogAxisTests::testXYAutoRange1$catena_1",
            "org.jfree.chart.junit.XYStepAreaChartTests::testReplaceDataset$catena_2",
            "org.jfree.chart.junit.XYAreaChartTests::testReplaceDataset$catena_1",
            "org.jfree.chart.junit.TimeSeriesChartTests::testSetSeriesToolTipGenerator",
            "org.jfree.chart.axis.junit.LogAxisTests::testXYAutoRange2$catena_1",
            "org.jfree.chart.junit.XYStepChartTests::testReplaceDataset$catena_1",
            "org.jfree.chart.junit.ScatterPlotTests::testReplaceDataset$catena_2",
            "org.jfree.chart.junit.XYStepChartTests::testDrawWithNullInfo",
            "org.jfree.chart.axis.junit.LogAxisTests::testXYAutoRange2$catena_0",
            "org.jfree.chart.junit.TimeSeriesChartTests::testReplaceDataset$catena_1",
            "org.jfree.chart.junit.ScatterPlotTests::testReplaceDataset$catena_1",
            "org.jfree.chart.junit.XYAreaChartTests::testReplaceDataset$catena_0",
            "org.jfree.chart.junit.ScatterPlotTests::testSetSeriesToolTipGenerator",
            "org.jfree.chart.axis.junit.NumberAxisTests::testXYAutoRange1$catena_1"
        ]
    }
}