---
Begin generate bug_id: Math_17
num_of_hunks: 2
use working dir: ./working/data/Math_17
Try to checkout Math_17
build dir: ['./working/data/Math_17/target/classes', './working/data/Math_17/target/test-classes']
init FileManager
trace file: src/main/java/org/apache/commons/math3/dfp/Dfp.java
trace file: src/main/java/org/apache/commons/math3/dfp/Dfp.java
trying to replace old failing tests
edit: replace from 755 range 166 at src/test/java/org/apache/commons/math3/dfp/DfpTest.java
to
    @Test
    public void testMultiply$catena_0()
    {
        test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_1()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_2()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_3()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_4()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_5()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_6()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_7()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_8()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_9()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_10()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_11()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_12()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_13()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_14()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_15()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_16()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_17()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_18()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_19()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_20()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_21()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_22()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_23()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_24()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_25()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_26()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_27()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_28()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_29()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_30()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_31()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_32()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_33()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_34()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_35()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_36()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_37()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_38()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        try{ test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    }     @Test
    public void testMultiply$catena_39()
    {
        try{ test(field.newDfp("1").multiply(field.newDfp("1")),      // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #1");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(1),             // Basic tests   1*1 = 1
             field.newDfp("1"),
             0, "Multiply #2");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(field.newDfp("1")),     // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #3");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-1").multiply(1),            // Basic tests   -1*1 = -1
             field.newDfp("-1"),
             0, "Multiply #4");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // basic tests with integers
        try{ test(field.newDfp("2").multiply(field.newDfp("3")),
             field.newDfp("6"),
             0, "Multiply #5");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(3),
             field.newDfp("6"),
             0, "Multiply #6");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("3")),
             field.newDfp("-6"),
             0, "Multiply #7");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(3),
             field.newDfp("-6"),
             0, "Multiply #8");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("-3")),
             field.newDfp("-6"),
             0, "Multiply #9");                                                                             }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(field.newDfp("-3")),
             field.newDfp("6"),
             0, "Multiply #10");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        //multiply by zero

        try{ test(field.newDfp("-2").multiply(field.newDfp("0")),
             field.newDfp("-0"),
             0, "Multiply #11");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(0),
             field.newDfp("-0"),
             0, "Multiply #12");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(field.newDfp("0")),
             field.newDfp("0"),
             0, "Multiply #13");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(0),
             field.newDfp("0"),
             0, "Multiply #14");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(pinf),
             pinf,
             0, "Multiply #15");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(ninf),
             ninf,
             0, "Multiply #16");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(pinf),
             ninf,
             0, "Multiply #17");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-2").multiply(ninf),
             pinf,
             0, "Multiply #18");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(field.newDfp("-2")),
             pinf,
             0, "Multiply #18.1");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(2),
             pinf,
             DfpField.FLAG_OVERFLOW, "Multiply #19");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("9.9999999999999950000e131071"),
             0, "Multiply #20");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(2),
             ninf,
             DfpField.FLAG_OVERFLOW, "Multiply #22");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("-5e131071").multiply(field.newDfp("1.999999999999999")),
             field.newDfp("-9.9999999999999950000e131071"),
             0, "Multiply #23");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1e-65539").multiply(field.newDfp("1e-65539")),
             field.newDfp("1e-131078"),
             DfpField.FLAG_UNDERFLOW, "Multiply #24");                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(nan),
             nan,
             0, "Multiply #25");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(field.newDfp("1")),
             nan,
             0, "Multiply #26");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(pinf),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(nan),
             nan,
             0, "Multiply #27");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(field.newDfp("0")),
             nan,
             DfpField.FLAG_INVALID, "Multiply #28");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("0").multiply(pinf),
             nan,
             DfpField.FLAG_INVALID, "Multiply #29");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(pinf),
             pinf,
             0, "Multiply #30");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(pinf),
             ninf,
             0, "Multiply #31");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(ninf),
             ninf,
             0, "Multiply #32");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(ninf.multiply(ninf),
             pinf,
             0, "Multiply #33");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(1),
             pinf,
             0, "Multiply #34");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(pinf.multiply(0),
             nan,
             DfpField.FLAG_INVALID, "Multiply #35");                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(nan.multiply(1),
             nan,
             0, "Multiply #36");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("1").multiply(10000),
             field.newDfp("10000"),
             0, "Multiply #37");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ test(field.newDfp("2").multiply(1000000),
             field.newDfp("2000000"),
             0, "Multiply #38");                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}

        test(field.newDfp("1").multiply(-1),
             field.newDfp("-1"),
             0, "Multiply #39");                                                                            /***** ORIGINAL ASSERTION IS HERE *****/
    }
trace file: src/test/java/org/apache/commons/math3/dfp/DfpTest.java
new test num: 40
ori test num: 0
pattern: 00
patches are written to file
running tests...
used time: Finished in 154.76 seconds
Failing tests: 3
	org.apache.commons.math3.dfp.DfpTest::testMultiply$catena_37
	org.apache.commons.math3.dfp.DfpTest::testMultiply$catena_38
	org.apache.commons.math3.dfp.DfpTest::testMultiply$catena_39
pattern: 01
try to fix hunk: 1
insert before 1604 with         } else {
            return multiply(newInstance(x));
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 10
try to fix hunk: 0
insert before 1603 with         if (x >= 0 && x < RADIX) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 11
try to fix hunk: 0
insert before 1603 with         if (x >= 0 && x < RADIX) {

try to fix hunk: 1
insert before 1604 with         } else {
            return multiply(newInstance(x));
        }

patches are written to file
running tests...
used time: Finished in 135.49 seconds
Failing tests: 0
Can independently fix ['org.apache.commons.math3.dfp.DfpTest::testMultiply$catena_39', 'org.apache.commons.math3.dfp.DfpTest::testMultiply$catena_37', 'org.apache.commons.math3.dfp.DfpTest::testMultiply$catena_38']
select new bug
Pattern: 11
failing tests: org.apache.commons.math3.dfp.DfpTest::testMultiply$catena_39@org.apache.commons.math3.dfp.DfpTest::testMultiply$catena_37@org.apache.commons.math3.dfp.DfpTest::testMultiply$catena_38
Find 1 new bugs
