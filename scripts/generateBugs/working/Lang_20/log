---
Begin generate bug_id: Lang_20
num_of_hunks: 2
use working dir: ./working/data/Lang_20
Try to checkout Lang_20
build dir: ['./working/data/Lang_20/target/classes', './working/data/Lang_20/target/tests']
init FileManager
trace file: src/main/java/org/apache/commons/lang3/StringUtils.java
trace file: src/main/java/org/apache/commons/lang3/StringUtils.java
trying to replace old failing tests
edit: replace from 200 range 14 at src/test/java/org/apache/commons/lang3/StringUtilsTest.java
to
    public void testJoin_ArrayChar$catena_0() {
        assertEquals(null, StringUtils.join((Object[]) null, ','));                                         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testJoin_ArrayChar$catena_1() {
        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testJoin_ArrayChar$catena_2() {
        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                               /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testJoin_ArrayChar$catena_3() {
        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                          /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testJoin_ArrayChar$catena_4() {
        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                           /***** ORIGINAL ASSERTION IS HERE *****/

        try{ assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testJoin_ArrayChar$catena_5() {
        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}

        assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));           /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testJoin_ArrayChar$catena_6() {
        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                                  /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testJoin_ArrayChar$catena_7() {
        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testJoin_ArrayChar$catena_8() {
        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                                /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testJoin_ArrayChar$catena_9() {
        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                                    /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testJoin_ArrayChar$catena_10() {
        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(";;foo", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo;2", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("/", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo/2", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("2", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                     /***** ORIGINAL ASSERTION IS HERE *****/
    }
edit: replace from 184 range 15 at src/test/java/org/apache/commons/lang3/StringUtilsTest.java
to
    public void testJoin_Objectarray$catena_0() {
//        assertEquals(null, StringUtils.join(null)); // generates warning
        assertEquals(null, StringUtils.join((Object[]) null));                  /***** ORIGINAL ASSERTION IS HERE *****/ // equivalent explicit cast
        // test additional varargs calls
        try{ assertEquals("", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array
        try{ assertEquals("", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}

        try{ assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("abc", StringUtils.join(new String[] {"a", "b", "c"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("a", StringUtils.join(new String[] {null, "a", ""}));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testJoin_Objectarray$catena_1() {
//        assertEquals(null, StringUtils.join(null)); // generates warning
        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast
        // test additional varargs calls
        assertEquals("", StringUtils.join());                                                /***** ORIGINAL ASSERTION IS HERE *****/ // empty array
        try{ assertEquals("", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}

        try{ assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("abc", StringUtils.join(new String[] {"a", "b", "c"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("a", StringUtils.join(new String[] {null, "a", ""}));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testJoin_Objectarray$catena_2() {
//        assertEquals(null, StringUtils.join(null)); // generates warning
        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast
        // test additional varargs calls
        try{ assertEquals("", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array
        assertEquals("", StringUtils.join((Object) null));                         /***** ORIGINAL ASSERTION IS HERE *****/ // => new Object[]{null}

        try{ assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("abc", StringUtils.join(new String[] {"a", "b", "c"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("a", StringUtils.join(new String[] {null, "a", ""}));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testJoin_Objectarray$catena_3() {
//        assertEquals(null, StringUtils.join(null)); // generates warning
        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast
        // test additional varargs calls
        try{ assertEquals("", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array
        try{ assertEquals("", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}

        assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST));                                               /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("abc", StringUtils.join(new String[] {"a", "b", "c"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("a", StringUtils.join(new String[] {null, "a", ""}));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testJoin_Objectarray$catena_4() {
//        assertEquals(null, StringUtils.join(null)); // generates warning
        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast
        // test additional varargs calls
        try{ assertEquals("", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array
        try{ assertEquals("", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}

        try{ assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("", StringUtils.join(NULL_ARRAY_LIST));                                                /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("abc", StringUtils.join(new String[] {"a", "b", "c"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("a", StringUtils.join(new String[] {null, "a", ""}));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testJoin_Objectarray$catena_5() {
//        assertEquals(null, StringUtils.join(null)); // generates warning
        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast
        // test additional varargs calls
        try{ assertEquals("", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array
        try{ assertEquals("", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}

        try{ assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST));                                        /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("abc", StringUtils.join(new String[] {"a", "b", "c"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("a", StringUtils.join(new String[] {null, "a", ""}));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testJoin_Objectarray$catena_6() {
//        assertEquals(null, StringUtils.join(null)); // generates warning
        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast
        // test additional varargs calls
        try{ assertEquals("", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array
        try{ assertEquals("", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}

        try{ assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("abc", StringUtils.join(new String[] {"a", "b", "c"}));                                /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("a", StringUtils.join(new String[] {null, "a", ""}));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testJoin_Objectarray$catena_7() {
//        assertEquals(null, StringUtils.join(null)); // generates warning
        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast
        // test additional varargs calls
        try{ assertEquals("", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array
        try{ assertEquals("", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}

        try{ assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("abc", StringUtils.join(new String[] {"a", "b", "c"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("a", StringUtils.join(new String[] {null, "a", ""}));                                  /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testJoin_Objectarray$catena_8() {
//        assertEquals(null, StringUtils.join(null)); // generates warning
        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast
        // test additional varargs calls
        try{ assertEquals("", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array
        try{ assertEquals("", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}

        try{ assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("abc", StringUtils.join(new String[] {"a", "b", "c"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("a", StringUtils.join(new String[] {null, "a", ""}));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST));                                            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testJoin_Objectarray$catena_9() {
//        assertEquals(null, StringUtils.join(null)); // generates warning
        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast
        // test additional varargs calls
        try{ assertEquals("", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array
        try{ assertEquals("", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}

        try{ assertEquals("", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("null", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("abc", StringUtils.join(new String[] {"a", "b", "c"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("a", StringUtils.join(new String[] {null, "a", ""}));                             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("foo", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("foo2", StringUtils.join(MIXED_TYPE_LIST));                                            /***** ORIGINAL ASSERTION IS HERE *****/
    }
trace file: src/test/java/org/apache/commons/lang3/StringUtilsTest.java
new test num: 21
ori test num: 0
pattern: 00
patches are written to file
running tests...
used time: Finished in 28.70 seconds
Failing tests: 2
	org.apache.commons.lang3.StringUtilsTest::testJoin_ArrayChar$catena_7
	org.apache.commons.lang3.StringUtilsTest::testJoin_Objectarray$catena_5
pattern: 01
try to fix hunk: 1
replace from 3383 with range 1 to
        StringBuilder buf = new StringBuilder(noOfItems * 16);

patches are written to file
running tests...
used time: Finished in 23.54 seconds
Failing tests: 1
	org.apache.commons.lang3.StringUtilsTest::testJoin_ArrayChar$catena_7
No new failing tests but only 1 hunk
pattern: 10
try to fix hunk: 0
replace from 3298 with range 1 to
        StringBuilder buf = new StringBuilder(noOfItems * 16);

patches are written to file
running tests...
used time: Finished in 22.67 seconds
Failing tests: 1
	org.apache.commons.lang3.StringUtilsTest::testJoin_Objectarray$catena_5
No new failing tests but only 1 hunk
pattern: 11
try to fix hunk: 0
replace from 3298 with range 1 to
        StringBuilder buf = new StringBuilder(noOfItems * 16);

try to fix hunk: 1
replace from 3383 with range 1 to
        StringBuilder buf = new StringBuilder(noOfItems * 16);

patches are written to file
running tests...
used time: Finished in 21.74 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
Find 0 new bugs
