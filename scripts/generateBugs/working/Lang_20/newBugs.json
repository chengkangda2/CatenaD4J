{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "from_line_no": 3298,
            "to_line_no": 3298,
            "replaced_with": "        StringBuilder buf = new StringBuilder(noOfItems * 16);\n",
            "replaced": "        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);\n",
            "patch_type": "replace",
            "next_line_no": 3299
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "from_line_no": 3383,
            "to_line_no": 3383,
            "replaced_with": "        StringBuilder buf = new StringBuilder(noOfItems * 16);\n",
            "replaced": "        StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + separator.length());\n",
            "patch_type": "replace",
            "next_line_no": 3384
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.lang3.StringUtilsTest::testJoin_ArrayChar",
            "org.apache.commons.lang3.StringUtilsTest::testJoin_Objectarray"
        ],
        "org.apache.commons.lang3.StringUtilsTest::testJoin_ArrayChar": {
            "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
            "Instance": "Begin: Pos(200, 12)\nEnd: Pos(213, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_20/src/test/java//org/apache/commons/lang3/StringUtilsTest.java\nName: testJoin_ArrayChar\nChilds: [StatementAssertion<Begin: Pos(201, 9), End: Pos(201, 67)>,\nStatementAssertion<Begin: Pos(202, 9), End: Pos(202, 83)>,\nStatementAssertion<Begin: Pos(203, 9), End: Pos(203, 77)>,\nStatementAssertion<Begin: Pos(204, 9), End: Pos(204, 82)>,\nStatementAssertion<Begin: Pos(205, 9), End: Pos(205, 81)>,\nStatementAssertion<Begin: Pos(207, 9), End: Pos(207, 97)>,\nStatementAssertion<Begin: Pos(208, 9), End: Pos(208, 74)>,\nStatementAssertion<Begin: Pos(209, 9), End: Pos(209, 78)>,\nStatementAssertion<Begin: Pos(210, 9), End: Pos(210, 76)>,\nStatementAssertion<Begin: Pos(211, 9), End: Pos(211, 72)>,\nStatementAssertion<Begin: Pos(212, 9), End: Pos(212, 71)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_20/src/test/java//org/apache/commons/lang3/StringUtilsTest.java",
            "name": "testJoin_ArrayChar",
            "begin": "Pos(200, 12)",
            "end": "Pos(213, 5)",
            "begin_line_no": 200,
            "end_line_no": 213,
            "child": [
                "Begin: Pos(201, 9)\nEnd: Pos(201, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(202, 9)\nEnd: Pos(202, 83)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(203, 9)\nEnd: Pos(203, 77)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(204, 9)\nEnd: Pos(204, 82)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(205, 9)\nEnd: Pos(205, 81)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(207, 9)\nEnd: Pos(207, 97)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(208, 9)\nEnd: Pos(208, 74)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(209, 9)\nEnd: Pos(209, 78)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(210, 9)\nEnd: Pos(210, 76)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(211, 9)\nEnd: Pos(211, 72)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(212, 9)\nEnd: Pos(212, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testJoin_ArrayChar$catena_0() {\n        assertEquals(null, StringUtils.join((Object[]) null, ','));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testJoin_ArrayChar$catena_1() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testJoin_ArrayChar$catena_2() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testJoin_ArrayChar$catena_3() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testJoin_ArrayChar$catena_4() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testJoin_ArrayChar$catena_5() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testJoin_ArrayChar$catena_6() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testJoin_ArrayChar$catena_7() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testJoin_ArrayChar$catena_8() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testJoin_ArrayChar$catena_9() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testJoin_ArrayChar$catena_10() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testJoin_ArrayChar$catena_0() {\n        assertEquals(null, StringUtils.join((Object[]) null, ','));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testJoin_ArrayChar$catena_1() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testJoin_ArrayChar$catena_2() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testJoin_ArrayChar$catena_3() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void testJoin_ArrayChar$catena_4() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                           /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void testJoin_ArrayChar$catena_5() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    public void testJoin_ArrayChar$catena_6() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "7": "    public void testJoin_ArrayChar$catena_7() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "8": "    public void testJoin_ArrayChar$catena_8() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "9": "    public void testJoin_ArrayChar$catena_9() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "10": "    public void testJoin_ArrayChar$catena_10() {\n        try{ assertEquals(null, StringUtils.join((Object[]) null, ','));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(TEXT_LIST_CHAR, StringUtils.join(ARRAY_LIST, SEPARATOR_CHAR));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST, SEPARATOR_CHAR));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\";;foo\", StringUtils.join(MIXED_ARRAY_LIST, SEPARATOR_CHAR));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo;2\", StringUtils.join(MIXED_TYPE_LIST, SEPARATOR_CHAR));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.StringUtilsTest::testJoin_Objectarray": {
            "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
            "Instance": "Begin: Pos(184, 12)\nEnd: Pos(198, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_20/src/test/java//org/apache/commons/lang3/StringUtilsTest.java\nName: testJoin_Objectarray\nChilds: [StatementAssertion<Begin: Pos(186, 9), End: Pos(186, 62)>,\nStatementAssertion<Begin: Pos(188, 9), End: Pos(188, 45)>,\nStatementAssertion<Begin: Pos(189, 9), End: Pos(189, 58)>,\nStatementAssertion<Begin: Pos(191, 9), End: Pos(191, 61)>,\nStatementAssertion<Begin: Pos(192, 9), End: Pos(192, 60)>,\nStatementAssertion<Begin: Pos(193, 9), End: Pos(193, 68)>,\nStatementAssertion<Begin: Pos(194, 9), End: Pos(194, 76)>,\nStatementAssertion<Begin: Pos(195, 9), End: Pos(195, 74)>,\nStatementAssertion<Begin: Pos(196, 9), End: Pos(196, 64)>,\nStatementAssertion<Begin: Pos(197, 9), End: Pos(197, 64)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_20/src/test/java//org/apache/commons/lang3/StringUtilsTest.java",
            "name": "testJoin_Objectarray",
            "begin": "Pos(184, 12)",
            "end": "Pos(198, 5)",
            "begin_line_no": 184,
            "end_line_no": 198,
            "child": [
                "Begin: Pos(186, 9)\nEnd: Pos(186, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(188, 9)\nEnd: Pos(188, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(189, 9)\nEnd: Pos(189, 58)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(191, 9)\nEnd: Pos(191, 61)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(192, 9)\nEnd: Pos(192, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(193, 9)\nEnd: Pos(193, 68)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(194, 9)\nEnd: Pos(194, 76)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(195, 9)\nEnd: Pos(195, 74)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(196, 9)\nEnd: Pos(196, 64)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(197, 9)\nEnd: Pos(197, 64)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testJoin_Objectarray$catena_0() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        assertEquals(null, StringUtils.join((Object[]) null));                  /***** ORIGINAL ASSERTION IS HERE *****/ // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testJoin_Objectarray$catena_1() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        assertEquals(\"\", StringUtils.join());                                                /***** ORIGINAL ASSERTION IS HERE *****/ // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testJoin_Objectarray$catena_2() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        assertEquals(\"\", StringUtils.join((Object) null));                         /***** ORIGINAL ASSERTION IS HERE *****/ // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testJoin_Objectarray$catena_3() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testJoin_Objectarray$catena_4() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testJoin_Objectarray$catena_5() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testJoin_Objectarray$catena_6() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testJoin_Objectarray$catena_7() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testJoin_Objectarray$catena_8() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testJoin_Objectarray$catena_9() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testJoin_Objectarray$catena_0() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        assertEquals(null, StringUtils.join((Object[]) null));                  /***** ORIGINAL ASSERTION IS HERE *****/ // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testJoin_Objectarray$catena_1() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        assertEquals(\"\", StringUtils.join());                                                /***** ORIGINAL ASSERTION IS HERE *****/ // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testJoin_Objectarray$catena_2() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        assertEquals(\"\", StringUtils.join((Object) null));                         /***** ORIGINAL ASSERTION IS HERE *****/ // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testJoin_Objectarray$catena_3() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void testJoin_Objectarray$catena_4() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void testJoin_Objectarray$catena_5() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    public void testJoin_Objectarray$catena_6() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "7": "    public void testJoin_Objectarray$catena_7() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "8": "    public void testJoin_Objectarray$catena_8() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "9": "    public void testJoin_Objectarray$catena_9() {\n//        assertEquals(null, StringUtils.join(null)); // generates warning\n        try{ assertEquals(null, StringUtils.join((Object[]) null));             }catch(Throwable __SHOULD_BE_IGNORED){} // equivalent explicit cast\n        // test additional varargs calls\n        try{ assertEquals(\"\", StringUtils.join());                                           }catch(Throwable __SHOULD_BE_IGNORED){} // empty array\n        try{ assertEquals(\"\", StringUtils.join((Object) null));                    }catch(Throwable __SHOULD_BE_IGNORED){} // => new Object[]{null}\n\n        try{ assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"foo2\", StringUtils.join(MIXED_TYPE_LIST));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    }
}