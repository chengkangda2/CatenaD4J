---
Begin generate bug_id: Math_93
num_of_hunks: 3
use working dir: ./working/data/Math_93
Try to checkout Math_93
build dir: ['./working/data/Math_93/target/classes', './working/data/Math_93/target/test-classes']
init FileManager
trace file: src/java/org/apache/commons/math/util/MathUtils.java
trace file: src/java/org/apache/commons/math/util/MathUtils.java
trace file: src/java/org/apache/commons/math/util/MathUtils.java
trying to replace old failing tests
edit: replace from 234 range 11 at src/test/org/apache/commons/math/util/MathUtilsTest.java
to
    public void testFactorial$catena_0() {
        for (int i = 1; i < 21; i++) {
            assertEquals(i + "! ", factorial(i), MathUtils.factorial(i));                                         /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals(i + "! ", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(i + "! ", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);       }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        
        try{ assertEquals("0", 1, MathUtils.factorial(0));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("0", 1.0d, MathUtils.factorialDouble(0), 1E-14);                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("0", 0.0d, MathUtils.factorialLog(0), 1E-14);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testFactorial$catena_1() {
        for (int i = 1; i < 21; i++) {
            try{ assertEquals(i + "! ", factorial(i), MathUtils.factorial(i));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals(i + "! ", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);         /***** ORIGINAL ASSERTION IS HERE *****/
            try{ assertEquals(i + "! ", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);       }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        
        try{ assertEquals("0", 1, MathUtils.factorial(0));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("0", 1.0d, MathUtils.factorialDouble(0), 1E-14);                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("0", 0.0d, MathUtils.factorialLog(0), 1E-14);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testFactorial$catena_2() {
        for (int i = 1; i < 21; i++) {
            try{ assertEquals(i + "! ", factorial(i), MathUtils.factorial(i));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(i + "! ", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}
            assertEquals(i + "! ", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);            /***** ORIGINAL ASSERTION IS HERE *****/
        }
        
        try{ assertEquals("0", 1, MathUtils.factorial(0));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("0", 1.0d, MathUtils.factorialDouble(0), 1E-14);                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("0", 0.0d, MathUtils.factorialLog(0), 1E-14);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testFactorial$catena_3() {
        for (int i = 1; i < 21; i++) {
            try{ assertEquals(i + "! ", factorial(i), MathUtils.factorial(i));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(i + "! ", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(i + "! ", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);       }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        
        assertEquals("0", 1, MathUtils.factorial(0));                                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("0", 1.0d, MathUtils.factorialDouble(0), 1E-14);                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("0", 0.0d, MathUtils.factorialLog(0), 1E-14);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testFactorial$catena_4() {
        for (int i = 1; i < 21; i++) {
            try{ assertEquals(i + "! ", factorial(i), MathUtils.factorial(i));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(i + "! ", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(i + "! ", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);       }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        
        try{ assertEquals("0", 1, MathUtils.factorial(0));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("0", 1.0d, MathUtils.factorialDouble(0), 1E-14);                                             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("0", 0.0d, MathUtils.factorialLog(0), 1E-14);                                           }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testFactorial$catena_5() {
        for (int i = 1; i < 21; i++) {
            try{ assertEquals(i + "! ", factorial(i), MathUtils.factorial(i));                                    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(i + "! ", (double)factorial(i), MathUtils.factorialDouble(i), Double.MIN_VALUE);    }catch(Throwable __SHOULD_BE_IGNORED){}
            try{ assertEquals(i + "! ", Math.log((double)factorial(i)), MathUtils.factorialLog(i), 10E-12);       }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        
        try{ assertEquals("0", 1, MathUtils.factorial(0));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("0", 1.0d, MathUtils.factorialDouble(0), 1E-14);                                        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("0", 0.0d, MathUtils.factorialLog(0), 1E-14);                                                /***** ORIGINAL ASSERTION IS HERE *****/
    }
trace file: src/test/org/apache/commons/math/util/MathUtilsTest.java
new test num: 6
ori test num: 0
pattern: 000
patches are written to file
running tests...
used time: Finished in 29.61 seconds
Failing tests: 1
	org.apache.commons.math.util.MathUtilsTest::testFactorial$catena_1
pattern: 001
try to fix hunk: 2
insert before 397 with         if (n < 21) {
            return Math.log(factorial(n));
        }

patches are written to file
running tests...
used time: Finished in 27.04 seconds
Failing tests: 7
	org.apache.commons.math.distribution.PoissonDistributionTest::testDensities
	org.apache.commons.math.util.MathUtilsTest::testFactorial$catena_0
	org.apache.commons.math.util.MathUtilsTest::testFactorial$catena_1
	org.apache.commons.math.util.MathUtilsTest::testFactorial$catena_2
	org.apache.commons.math.util.MathUtilsTest::testFactorial$catena_3
	org.apache.commons.math.util.MathUtilsTest::testFactorial$catena_4
	org.apache.commons.math.util.MathUtilsTest::testFactorial$catena_5
Includes new failing tests, set to unusable
pattern: 010
try to fix hunk: 1
insert before 377 with         if (n < 21) {
            return factorial(n);
        }

patches are written to file
running tests...
used time: Finished in 27.01 seconds
Failing tests: 5
	org.apache.commons.math.distribution.PoissonDistributionTest::testDensities
	org.apache.commons.math.util.MathUtilsTest::testFactorial$catena_0
	org.apache.commons.math.util.MathUtilsTest::testFactorial$catena_1
	org.apache.commons.math.util.MathUtilsTest::testFactorial$catena_3
	org.apache.commons.math.util.MathUtilsTest::testFactorial$catena_4
Includes new failing tests, set to unusable
pattern: 100
try to fix hunk: 0
replace from 345 with range 2 to
        if (n < 0) {
            throw new IllegalArgumentException("must have n >= 0 for n!");
        }
        if (n > 20) {

patches are written to file
running tests...
used time: Finished in 27.65 seconds
Failing tests: 1
	org.apache.commons.math.util.MathUtilsTest::testFactorial$catena_1
No new failing tests but only 1 hunk
pattern: 011
try to fix hunk: 1
insert before 377 with         if (n < 21) {
            return factorial(n);
        }

try to fix hunk: 2
insert before 397 with         if (n < 21) {
            return Math.log(factorial(n));
        }

patches are written to file
running tests...
used time: Finished in 24.57 seconds
Failing tests: 7
	org.apache.commons.math.distribution.PoissonDistributionTest::testDensities
	org.apache.commons.math.util.MathUtilsTest::testFactorial$catena_0
	org.apache.commons.math.util.MathUtilsTest::testFactorial$catena_1
	org.apache.commons.math.util.MathUtilsTest::testFactorial$catena_2
	org.apache.commons.math.util.MathUtilsTest::testFactorial$catena_3
	org.apache.commons.math.util.MathUtilsTest::testFactorial$catena_4
	org.apache.commons.math.util.MathUtilsTest::testFactorial$catena_5
Includes new failing tests, set to unusable
pattern: 101
try to fix hunk: 0
replace from 345 with range 2 to
        if (n < 0) {
            throw new IllegalArgumentException("must have n >= 0 for n!");
        }
        if (n > 20) {

try to fix hunk: 2
insert before 397 with         if (n < 21) {
            return Math.log(factorial(n));
        }

patches are written to file
running tests...
used time: Finished in 23.71 seconds
Failing tests: 1
	org.apache.commons.math.util.MathUtilsTest::testFactorial$catena_1
Can independently fix []
Could not fix independently
pattern: 110
try to fix hunk: 0
replace from 345 with range 2 to
        if (n < 0) {
            throw new IllegalArgumentException("must have n >= 0 for n!");
        }
        if (n > 20) {

try to fix hunk: 1
insert before 377 with         if (n < 21) {
            return factorial(n);
        }

patches are written to file
running tests...
used time: Finished in 25.83 seconds
Failing tests: 0
Can independently fix ['org.apache.commons.math.util.MathUtilsTest::testFactorial$catena_1']
select new bug
Pattern: 110
failing tests: org.apache.commons.math.util.MathUtilsTest::testFactorial$catena_1
pattern: 111
try to fix hunk: 0
replace from 345 with range 2 to
        if (n < 0) {
            throw new IllegalArgumentException("must have n >= 0 for n!");
        }
        if (n > 20) {

try to fix hunk: 1
insert before 377 with         if (n < 21) {
            return factorial(n);
        }

try to fix hunk: 2
insert before 397 with         if (n < 21) {
            return Math.log(factorial(n));
        }

patches are written to file
running tests...
used time: Finished in 23.45 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
Find 1 new bugs
