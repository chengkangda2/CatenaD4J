{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
            "replaced_with": "                if ((bits & 0x8000000000000000L) != 0) {\n                    sign = -1;\n                }\n",
            "patch_type": "insert",
            "next_line_no": 273
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/math/dfp/Dfp.java",
            "from_line_no": 2319,
            "to_line_no": 2319,
            "replaced_with": "        int cmp0 = compare(this, getZero());\n        if (cmp0 == 0) {\n            return sign < 0 ? -0.0 : +0.0;\n        } else if (cmp0 < 0) {\n",
            "replaced": "        if (lessThan(getZero())) {\n",
            "patch_type": "replace",
            "next_line_no": 2320
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.dfp.DfpTest::testIssue567"
        ],
        "org.apache.commons.math.dfp.DfpTest::testIssue567": {
            "file_path": "src/test/java/org/apache/commons/math/dfp/DfpTest.java",
            "Instance": "Begin: Pos(1509, 5)\nEnd: Pos(1516, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_54/src/test/java//org/apache/commons/math/dfp/DfpTest.java\nName: testIssue567\nChilds: [StatementAssertion<Begin: Pos(1512, 9), End: Pos(1512, 81)>,\nStatementAssertion<Begin: Pos(1513, 9), End: Pos(1513, 83)>,\nStatementAssertion<Begin: Pos(1514, 9), End: Pos(1514, 104)>,\nStatementAssertion<Begin: Pos(1515, 9), End: Pos(1515, 104)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_54/src/test/java//org/apache/commons/math/dfp/DfpTest.java",
            "name": "testIssue567",
            "begin": "Pos(1509, 5)",
            "end": "Pos(1516, 5)",
            "begin_line_no": 1509,
            "end_line_no": 1516,
            "child": [
                "Begin: Pos(1512, 9)\nEnd: Pos(1512, 81)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1513, 9)\nEnd: Pos(1513, 83)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1514, 9)\nEnd: Pos(1514, 104)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(1515, 9)\nEnd: Pos(1515, 104)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testIssue567$catena_0() {\n        DfpField field = new DfpField(100);\n        Assert.assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN);                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), MathUtils.SAFE_MIN);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), MathUtils.EPSILON);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), MathUtils.EPSILON);    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testIssue567$catena_1() {\n        DfpField field = new DfpField(100);\n        try{ Assert.assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), MathUtils.SAFE_MIN);                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), MathUtils.EPSILON);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), MathUtils.EPSILON);    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testIssue567$catena_2() {\n        DfpField field = new DfpField(100);\n        try{ Assert.assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), MathUtils.SAFE_MIN);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), MathUtils.EPSILON);         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), MathUtils.EPSILON);    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testIssue567$catena_3() {\n        DfpField field = new DfpField(100);\n        try{ Assert.assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), MathUtils.SAFE_MIN);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), MathUtils.EPSILON);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), MathUtils.EPSILON);         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testIssue567$catena_0() {\n        DfpField field = new DfpField(100);\n        Assert.assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN);                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), MathUtils.SAFE_MIN);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), MathUtils.EPSILON);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), MathUtils.EPSILON);    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void testIssue567$catena_1() {\n        DfpField field = new DfpField(100);\n        try{ Assert.assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), MathUtils.SAFE_MIN);                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), MathUtils.EPSILON);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), MathUtils.EPSILON);    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void testIssue567$catena_2() {\n        DfpField field = new DfpField(100);\n        try{ Assert.assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), MathUtils.SAFE_MIN);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), MathUtils.EPSILON);         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), MathUtils.EPSILON);    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    @Test\n    public void testIssue567$catena_3() {\n        DfpField field = new DfpField(100);\n        try{ Assert.assertEquals(0.0, field.getZero().toDouble(), MathUtils.SAFE_MIN);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(0.0, field.newDfp(0.0).toDouble(), MathUtils.SAFE_MIN);                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(-1, FastMath.copySign(1, field.newDfp(-0.0).toDouble()), MathUtils.EPSILON);    }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertEquals(+1, FastMath.copySign(1, field.newDfp(+0.0).toDouble()), MathUtils.EPSILON);         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "11": {
        "failing_tests": [
            "org.apache.commons.math.dfp.DfpTest::testIssue567$catena_1",
            "org.apache.commons.math.dfp.DfpTest::testIssue567$catena_0",
            "org.apache.commons.math.dfp.DfpTest::testIssue567$catena_3"
        ]
    }
}