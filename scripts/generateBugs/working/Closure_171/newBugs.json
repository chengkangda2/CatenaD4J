{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/com/google/javascript/jscomp/TypeInference.java",
            "from_line_no": 731,
            "to_line_no": 736,
            "replaced_with": "    if (objectType == null || n.getBooleanProp(Node.REFLECTED_OBJECT)) {\n",
            "replaced": "    if (objectType == null) {\n      return scope;\n    }\n    boolean hasLendsName = n.getJSDocInfo() != null &&\n        n.getJSDocInfo().getLendsName() != null;\n    if (objectType.hasReferenceName() && !hasLendsName) {\n",
            "patch_type": "replace",
            "next_line_no": 737
        },
        "1": {
            "file_name": "src/com/google/javascript/jscomp/TypedScopeCreator.java",
            "replaced_with": "      if (qName != null && qName.endsWith(\".prototype\")) {\n        return false;\n      }\n",
            "patch_type": "insert",
            "next_line_no": 1669
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.TypeCheckTest::testIssue1023",
            "com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction2",
            "com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface2"
        ],
        "com.google.javascript.jscomp.TypeCheckTest::testIssue1023": {
            "file_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
            "Instance": "Begin: Pos(6755, 10)\nEnd: Pos(6769, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_171/test//com/google/javascript/jscomp/TypeCheckTest.java\nName: testIssue1023\nChilds: [StatementAssertion<Begin: Pos(6756, 5), End: Pos(6768, 28)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_171/test//com/google/javascript/jscomp/TypeCheckTest.java",
            "name": "testIssue1023",
            "begin": "Pos(6755, 10)",
            "end": "Pos(6769, 3)",
            "begin_line_no": 6755,
            "end_line_no": 6769,
            "child": [
                "Begin: Pos(6756, 5)\nEnd: Pos(6768, 28)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction2": {
            "file_path": "test/com/google/javascript/jscomp/TypedScopeCreatorTest.java",
            "Instance": "Begin: Pos(437, 10)\nEnd: Pos(454, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_171/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java\nName: testMethodBeforeFunction2\nChilds: [StatementAssertion<Begin: Pos(438, 5), End: Pos(443, 27)>,\nStatementAssertion<Begin: Pos(445, 5), End: Pos(445, 41)>,\nStatementAssertion<Begin: Pos(446, 5), End: Pos(446, 65)>,\nStatementAssertion<Begin: Pos(447, 5), End: Pos(448, 47)>,\nStatementAssertion<Begin: Pos(449, 5), End: Pos(449, 51)>,\nStatementAssertion<Begin: Pos(452, 5), End: Pos(453, 47)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_171/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java",
            "name": "testMethodBeforeFunction2",
            "begin": "Pos(437, 10)",
            "end": "Pos(454, 3)",
            "begin_line_no": 437,
            "end_line_no": 454,
            "child": [
                "Begin: Pos(438, 5)\nEnd: Pos(443, 27)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(445, 5)\nEnd: Pos(445, 41)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(446, 5)\nEnd: Pos(446, 65)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(447, 5)\nEnd: Pos(448, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(449, 5)\nEnd: Pos(449, 51)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(452, 5)\nEnd: Pos(453, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testMethodBeforeFunction2$catena_0() throws Exception {\n    testSame(\n        \"var y = Window.prototype;\" +\n        \"Window.prototype = {alert: function(message) {}};\" +\n        \"/** @constructor */ function Window() {}\\n\" +\n        \"var window = new Window(); \\n\" +\n        \"var x = window;\");                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    try{ assertEquals(\"Window\", x.toString());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty(\"alert\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"function (this:Window, ?): undefined\",\n        x.getPropertyType(\"alert\").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(x.isPropertyTypeDeclared(\"alert\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    ObjectType y = (ObjectType) findNameType(\"y\", globalScope);\n    try{ assertEquals(\"function (this:Window, ?): undefined\",\n        y.getPropertyType(\"alert\").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testMethodBeforeFunction2$catena_1() throws Exception {\n    try{ testSame(\n        \"var y = Window.prototype;\" +\n        \"Window.prototype = {alert: function(message) {}};\" +\n        \"/** @constructor */ function Window() {}\\n\" +\n        \"var window = new Window(); \\n\" +\n        \"var x = window;\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    assertEquals(\"Window\", x.toString());                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty(\"alert\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"function (this:Window, ?): undefined\",\n        x.getPropertyType(\"alert\").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(x.isPropertyTypeDeclared(\"alert\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    ObjectType y = (ObjectType) findNameType(\"y\", globalScope);\n    try{ assertEquals(\"function (this:Window, ?): undefined\",\n        y.getPropertyType(\"alert\").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testMethodBeforeFunction2$catena_2() throws Exception {\n    try{ testSame(\n        \"var y = Window.prototype;\" +\n        \"Window.prototype = {alert: function(message) {}};\" +\n        \"/** @constructor */ function Window() {}\\n\" +\n        \"var window = new Window(); \\n\" +\n        \"var x = window;\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    try{ assertEquals(\"Window\", x.toString());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(x.getImplicitPrototype().hasOwnProperty(\"alert\"));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"function (this:Window, ?): undefined\",\n        x.getPropertyType(\"alert\").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(x.isPropertyTypeDeclared(\"alert\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    ObjectType y = (ObjectType) findNameType(\"y\", globalScope);\n    try{ assertEquals(\"function (this:Window, ?): undefined\",\n        y.getPropertyType(\"alert\").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testMethodBeforeFunction2$catena_3() throws Exception {\n    try{ testSame(\n        \"var y = Window.prototype;\" +\n        \"Window.prototype = {alert: function(message) {}};\" +\n        \"/** @constructor */ function Window() {}\\n\" +\n        \"var window = new Window(); \\n\" +\n        \"var x = window;\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    try{ assertEquals(\"Window\", x.toString());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty(\"alert\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"function (this:Window, ?): undefined\",\n        x.getPropertyType(\"alert\").toString());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertFalse(x.isPropertyTypeDeclared(\"alert\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    ObjectType y = (ObjectType) findNameType(\"y\", globalScope);\n    try{ assertEquals(\"function (this:Window, ?): undefined\",\n        y.getPropertyType(\"alert\").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testMethodBeforeFunction2$catena_4() throws Exception {\n    try{ testSame(\n        \"var y = Window.prototype;\" +\n        \"Window.prototype = {alert: function(message) {}};\" +\n        \"/** @constructor */ function Window() {}\\n\" +\n        \"var window = new Window(); \\n\" +\n        \"var x = window;\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    try{ assertEquals(\"Window\", x.toString());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty(\"alert\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"function (this:Window, ?): undefined\",\n        x.getPropertyType(\"alert\").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertFalse(x.isPropertyTypeDeclared(\"alert\"));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n    ObjectType y = (ObjectType) findNameType(\"y\", globalScope);\n    try{ assertEquals(\"function (this:Window, ?): undefined\",\n        y.getPropertyType(\"alert\").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testMethodBeforeFunction2$catena_5() throws Exception {\n    try{ testSame(\n        \"var y = Window.prototype;\" +\n        \"Window.prototype = {alert: function(message) {}};\" +\n        \"/** @constructor */ function Window() {}\\n\" +\n        \"var window = new Window(); \\n\" +\n        \"var x = window;\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    try{ assertEquals(\"Window\", x.toString());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty(\"alert\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"function (this:Window, ?): undefined\",\n        x.getPropertyType(\"alert\").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(x.isPropertyTypeDeclared(\"alert\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    ObjectType y = (ObjectType) findNameType(\"y\", globalScope);\n    assertEquals(\"function (this:Window, ?): undefined\",\n        y.getPropertyType(\"alert\").toString());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testMethodBeforeFunction2$catena_0() throws Exception {\n    testSame(\n        \"var y = Window.prototype;\" +\n        \"Window.prototype = {alert: function(message) {}};\" +\n        \"/** @constructor */ function Window() {}\\n\" +\n        \"var window = new Window(); \\n\" +\n        \"var x = window;\");                                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    try{ assertEquals(\"Window\", x.toString());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty(\"alert\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"function (this:Window, ?): undefined\",\n        x.getPropertyType(\"alert\").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(x.isPropertyTypeDeclared(\"alert\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    ObjectType y = (ObjectType) findNameType(\"y\", globalScope);\n    try{ assertEquals(\"function (this:Window, ?): undefined\",\n        y.getPropertyType(\"alert\").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testMethodBeforeFunction2$catena_1() throws Exception {\n    try{ testSame(\n        \"var y = Window.prototype;\" +\n        \"Window.prototype = {alert: function(message) {}};\" +\n        \"/** @constructor */ function Window() {}\\n\" +\n        \"var window = new Window(); \\n\" +\n        \"var x = window;\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    assertEquals(\"Window\", x.toString());                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty(\"alert\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"function (this:Window, ?): undefined\",\n        x.getPropertyType(\"alert\").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(x.isPropertyTypeDeclared(\"alert\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    ObjectType y = (ObjectType) findNameType(\"y\", globalScope);\n    try{ assertEquals(\"function (this:Window, ?): undefined\",\n        y.getPropertyType(\"alert\").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testMethodBeforeFunction2$catena_2() throws Exception {\n    try{ testSame(\n        \"var y = Window.prototype;\" +\n        \"Window.prototype = {alert: function(message) {}};\" +\n        \"/** @constructor */ function Window() {}\\n\" +\n        \"var window = new Window(); \\n\" +\n        \"var x = window;\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    try{ assertEquals(\"Window\", x.toString());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(x.getImplicitPrototype().hasOwnProperty(\"alert\"));                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertEquals(\"function (this:Window, ?): undefined\",\n        x.getPropertyType(\"alert\").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(x.isPropertyTypeDeclared(\"alert\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    ObjectType y = (ObjectType) findNameType(\"y\", globalScope);\n    try{ assertEquals(\"function (this:Window, ?): undefined\",\n        y.getPropertyType(\"alert\").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testMethodBeforeFunction2$catena_3() throws Exception {\n    try{ testSame(\n        \"var y = Window.prototype;\" +\n        \"Window.prototype = {alert: function(message) {}};\" +\n        \"/** @constructor */ function Window() {}\\n\" +\n        \"var window = new Window(); \\n\" +\n        \"var x = window;\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    try{ assertEquals(\"Window\", x.toString());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty(\"alert\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertEquals(\"function (this:Window, ?): undefined\",\n        x.getPropertyType(\"alert\").toString());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertFalse(x.isPropertyTypeDeclared(\"alert\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    ObjectType y = (ObjectType) findNameType(\"y\", globalScope);\n    try{ assertEquals(\"function (this:Window, ?): undefined\",\n        y.getPropertyType(\"alert\").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "4": "  public void testMethodBeforeFunction2$catena_4() throws Exception {\n    try{ testSame(\n        \"var y = Window.prototype;\" +\n        \"Window.prototype = {alert: function(message) {}};\" +\n        \"/** @constructor */ function Window() {}\\n\" +\n        \"var window = new Window(); \\n\" +\n        \"var x = window;\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    try{ assertEquals(\"Window\", x.toString());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty(\"alert\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"function (this:Window, ?): undefined\",\n        x.getPropertyType(\"alert\").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertFalse(x.isPropertyTypeDeclared(\"alert\"));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n    ObjectType y = (ObjectType) findNameType(\"y\", globalScope);\n    try{ assertEquals(\"function (this:Window, ?): undefined\",\n        y.getPropertyType(\"alert\").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "5": "  public void testMethodBeforeFunction2$catena_5() throws Exception {\n    try{ testSame(\n        \"var y = Window.prototype;\" +\n        \"Window.prototype = {alert: function(message) {}};\" +\n        \"/** @constructor */ function Window() {}\\n\" +\n        \"var window = new Window(); \\n\" +\n        \"var x = window;\");                                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    ObjectType x = (ObjectType) findNameType(\"x\", globalScope);\n    try{ assertEquals(\"Window\", x.toString());                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(x.getImplicitPrototype().hasOwnProperty(\"alert\"));                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertEquals(\"function (this:Window, ?): undefined\",\n        x.getPropertyType(\"alert\").toString());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertFalse(x.isPropertyTypeDeclared(\"alert\"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    ObjectType y = (ObjectType) findNameType(\"y\", globalScope);\n    assertEquals(\"function (this:Window, ?): undefined\",\n        y.getPropertyType(\"alert\").toString());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        },
        "com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface2": {
            "file_path": "test/com/google/javascript/jscomp/TypedScopeCreatorTest.java",
            "Instance": "Begin: Pos(532, 10)\nEnd: Pos(552, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_171/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java\nName: testPropertiesOnInterface2\nChilds: [StatementAssertion<Begin: Pos(533, 5), End: Pos(535, 50)>,\nStatementAssertion<Begin: Pos(538, 5), End: Pos(538, 65)>,\nStatementAssertion<Begin: Pos(539, 5), End: Pos(539, 42)>,\nStatementAssertion<Begin: Pos(543, 5), End: Pos(543, 55)>,\nStatementAssertion<Begin: Pos(544, 5), End: Pos(544, 53)>,\nStatementAssertion<Begin: Pos(546, 5), End: Pos(546, 73)>,\nStatementAssertion<Begin: Pos(548, 5), End: Pos(549, 54)>,\nStatementAssertion<Begin: Pos(551, 5), End: Pos(551, 74)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_171/test//com/google/javascript/jscomp/TypedScopeCreatorTest.java",
            "name": "testPropertiesOnInterface2",
            "begin": "Pos(532, 10)",
            "end": "Pos(552, 3)",
            "begin_line_no": 532,
            "end_line_no": 552,
            "child": [
                "Begin: Pos(533, 5)\nEnd: Pos(535, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(538, 5)\nEnd: Pos(538, 65)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(539, 5)\nEnd: Pos(539, 42)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(543, 5)\nEnd: Pos(543, 55)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(544, 5)\nEnd: Pos(544, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(546, 5)\nEnd: Pos(546, 73)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(548, 5)\nEnd: Pos(549, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(551, 5)\nEnd: Pos(551, 74)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testPropertiesOnInterface2$catena_0() throws Exception {\n    testSame(\"/** @interface */ var I = function() {};\" +\n        \"I.prototype = {baz: function(){}};\" +\n        \"/** @type {number} */ I.prototype.bar;\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n    Var i = globalScope.getVar(\"I\");\n    try{ assertEquals(\"function (this:I): ?\", i.getType().toString());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(i.getType().isInterface());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    ObjectType iPrototype = (ObjectType)\n        ((ObjectType) i.getType()).getPropertyType(\"prototype\");\n    try{ assertEquals(\"I.prototype\", iPrototype.toString());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(iPrototype.isFunctionPrototypeType());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(\"number\", iPrototype.getPropertyType(\"bar\").toString());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(\"function (this:I): undefined\",\n        iPrototype.getPropertyType(\"baz\").toString());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(iPrototype, globalScope.getVar(\"I.prototype\").getType());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testPropertiesOnInterface2$catena_1() throws Exception {\n    try{ testSame(\"/** @interface */ var I = function() {};\" +\n        \"I.prototype = {baz: function(){}};\" +\n        \"/** @type {number} */ I.prototype.bar;\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    Var i = globalScope.getVar(\"I\");\n    assertEquals(\"function (this:I): ?\", i.getType().toString());                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(i.getType().isInterface());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    ObjectType iPrototype = (ObjectType)\n        ((ObjectType) i.getType()).getPropertyType(\"prototype\");\n    try{ assertEquals(\"I.prototype\", iPrototype.toString());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(iPrototype.isFunctionPrototypeType());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(\"number\", iPrototype.getPropertyType(\"bar\").toString());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(\"function (this:I): undefined\",\n        iPrototype.getPropertyType(\"baz\").toString());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(iPrototype, globalScope.getVar(\"I.prototype\").getType());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testPropertiesOnInterface2$catena_2() throws Exception {\n    try{ testSame(\"/** @interface */ var I = function() {};\" +\n        \"I.prototype = {baz: function(){}};\" +\n        \"/** @type {number} */ I.prototype.bar;\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    Var i = globalScope.getVar(\"I\");\n    try{ assertEquals(\"function (this:I): ?\", i.getType().toString());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(i.getType().isInterface());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n    ObjectType iPrototype = (ObjectType)\n        ((ObjectType) i.getType()).getPropertyType(\"prototype\");\n    try{ assertEquals(\"I.prototype\", iPrototype.toString());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(iPrototype.isFunctionPrototypeType());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(\"number\", iPrototype.getPropertyType(\"bar\").toString());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(\"function (this:I): undefined\",\n        iPrototype.getPropertyType(\"baz\").toString());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(iPrototype, globalScope.getVar(\"I.prototype\").getType());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testPropertiesOnInterface2$catena_3() throws Exception {\n    try{ testSame(\"/** @interface */ var I = function() {};\" +\n        \"I.prototype = {baz: function(){}};\" +\n        \"/** @type {number} */ I.prototype.bar;\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    Var i = globalScope.getVar(\"I\");\n    try{ assertEquals(\"function (this:I): ?\", i.getType().toString());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(i.getType().isInterface());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    ObjectType iPrototype = (ObjectType)\n        ((ObjectType) i.getType()).getPropertyType(\"prototype\");\n    assertEquals(\"I.prototype\", iPrototype.toString());                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(iPrototype.isFunctionPrototypeType());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(\"number\", iPrototype.getPropertyType(\"bar\").toString());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(\"function (this:I): undefined\",\n        iPrototype.getPropertyType(\"baz\").toString());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(iPrototype, globalScope.getVar(\"I.prototype\").getType());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testPropertiesOnInterface2$catena_4() throws Exception {\n    try{ testSame(\"/** @interface */ var I = function() {};\" +\n        \"I.prototype = {baz: function(){}};\" +\n        \"/** @type {number} */ I.prototype.bar;\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    Var i = globalScope.getVar(\"I\");\n    try{ assertEquals(\"function (this:I): ?\", i.getType().toString());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(i.getType().isInterface());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    ObjectType iPrototype = (ObjectType)\n        ((ObjectType) i.getType()).getPropertyType(\"prototype\");\n    try{ assertEquals(\"I.prototype\", iPrototype.toString());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(iPrototype.isFunctionPrototypeType());                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertEquals(\"number\", iPrototype.getPropertyType(\"bar\").toString());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(\"function (this:I): undefined\",\n        iPrototype.getPropertyType(\"baz\").toString());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(iPrototype, globalScope.getVar(\"I.prototype\").getType());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testPropertiesOnInterface2$catena_5() throws Exception {\n    try{ testSame(\"/** @interface */ var I = function() {};\" +\n        \"I.prototype = {baz: function(){}};\" +\n        \"/** @type {number} */ I.prototype.bar;\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    Var i = globalScope.getVar(\"I\");\n    try{ assertEquals(\"function (this:I): ?\", i.getType().toString());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(i.getType().isInterface());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    ObjectType iPrototype = (ObjectType)\n        ((ObjectType) i.getType()).getPropertyType(\"prototype\");\n    try{ assertEquals(\"I.prototype\", iPrototype.toString());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(iPrototype.isFunctionPrototypeType());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertEquals(\"number\", iPrototype.getPropertyType(\"bar\").toString());                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertEquals(\"function (this:I): undefined\",\n        iPrototype.getPropertyType(\"baz\").toString());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(iPrototype, globalScope.getVar(\"I.prototype\").getType());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testPropertiesOnInterface2$catena_6() throws Exception {\n    try{ testSame(\"/** @interface */ var I = function() {};\" +\n        \"I.prototype = {baz: function(){}};\" +\n        \"/** @type {number} */ I.prototype.bar;\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    Var i = globalScope.getVar(\"I\");\n    try{ assertEquals(\"function (this:I): ?\", i.getType().toString());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(i.getType().isInterface());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    ObjectType iPrototype = (ObjectType)\n        ((ObjectType) i.getType()).getPropertyType(\"prototype\");\n    try{ assertEquals(\"I.prototype\", iPrototype.toString());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(iPrototype.isFunctionPrototypeType());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(\"number\", iPrototype.getPropertyType(\"bar\").toString());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertEquals(\"function (this:I): undefined\",\n        iPrototype.getPropertyType(\"baz\").toString());                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertEquals(iPrototype, globalScope.getVar(\"I.prototype\").getType());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testPropertiesOnInterface2$catena_7() throws Exception {\n    try{ testSame(\"/** @interface */ var I = function() {};\" +\n        \"I.prototype = {baz: function(){}};\" +\n        \"/** @type {number} */ I.prototype.bar;\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    Var i = globalScope.getVar(\"I\");\n    try{ assertEquals(\"function (this:I): ?\", i.getType().toString());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(i.getType().isInterface());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    ObjectType iPrototype = (ObjectType)\n        ((ObjectType) i.getType()).getPropertyType(\"prototype\");\n    try{ assertEquals(\"I.prototype\", iPrototype.toString());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(iPrototype.isFunctionPrototypeType());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(\"number\", iPrototype.getPropertyType(\"bar\").toString());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(\"function (this:I): undefined\",\n        iPrototype.getPropertyType(\"baz\").toString());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertEquals(iPrototype, globalScope.getVar(\"I.prototype\").getType());                                  /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testPropertiesOnInterface2$catena_0() throws Exception {\n    testSame(\"/** @interface */ var I = function() {};\" +\n        \"I.prototype = {baz: function(){}};\" +\n        \"/** @type {number} */ I.prototype.bar;\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n    Var i = globalScope.getVar(\"I\");\n    try{ assertEquals(\"function (this:I): ?\", i.getType().toString());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(i.getType().isInterface());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    ObjectType iPrototype = (ObjectType)\n        ((ObjectType) i.getType()).getPropertyType(\"prototype\");\n    try{ assertEquals(\"I.prototype\", iPrototype.toString());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(iPrototype.isFunctionPrototypeType());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(\"number\", iPrototype.getPropertyType(\"bar\").toString());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(\"function (this:I): undefined\",\n        iPrototype.getPropertyType(\"baz\").toString());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(iPrototype, globalScope.getVar(\"I.prototype\").getType());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testPropertiesOnInterface2$catena_1() throws Exception {\n    try{ testSame(\"/** @interface */ var I = function() {};\" +\n        \"I.prototype = {baz: function(){}};\" +\n        \"/** @type {number} */ I.prototype.bar;\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    Var i = globalScope.getVar(\"I\");\n    assertEquals(\"function (this:I): ?\", i.getType().toString());                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(i.getType().isInterface());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    ObjectType iPrototype = (ObjectType)\n        ((ObjectType) i.getType()).getPropertyType(\"prototype\");\n    try{ assertEquals(\"I.prototype\", iPrototype.toString());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(iPrototype.isFunctionPrototypeType());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(\"number\", iPrototype.getPropertyType(\"bar\").toString());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(\"function (this:I): undefined\",\n        iPrototype.getPropertyType(\"baz\").toString());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(iPrototype, globalScope.getVar(\"I.prototype\").getType());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "2": "  public void testPropertiesOnInterface2$catena_2() throws Exception {\n    try{ testSame(\"/** @interface */ var I = function() {};\" +\n        \"I.prototype = {baz: function(){}};\" +\n        \"/** @type {number} */ I.prototype.bar;\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    Var i = globalScope.getVar(\"I\");\n    try{ assertEquals(\"function (this:I): ?\", i.getType().toString());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(i.getType().isInterface());                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n    ObjectType iPrototype = (ObjectType)\n        ((ObjectType) i.getType()).getPropertyType(\"prototype\");\n    try{ assertEquals(\"I.prototype\", iPrototype.toString());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(iPrototype.isFunctionPrototypeType());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(\"number\", iPrototype.getPropertyType(\"bar\").toString());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(\"function (this:I): undefined\",\n        iPrototype.getPropertyType(\"baz\").toString());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(iPrototype, globalScope.getVar(\"I.prototype\").getType());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "3": "  public void testPropertiesOnInterface2$catena_3() throws Exception {\n    try{ testSame(\"/** @interface */ var I = function() {};\" +\n        \"I.prototype = {baz: function(){}};\" +\n        \"/** @type {number} */ I.prototype.bar;\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    Var i = globalScope.getVar(\"I\");\n    try{ assertEquals(\"function (this:I): ?\", i.getType().toString());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(i.getType().isInterface());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    ObjectType iPrototype = (ObjectType)\n        ((ObjectType) i.getType()).getPropertyType(\"prototype\");\n    assertEquals(\"I.prototype\", iPrototype.toString());                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertTrue(iPrototype.isFunctionPrototypeType());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(\"number\", iPrototype.getPropertyType(\"bar\").toString());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(\"function (this:I): undefined\",\n        iPrototype.getPropertyType(\"baz\").toString());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(iPrototype, globalScope.getVar(\"I.prototype\").getType());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "4": "  public void testPropertiesOnInterface2$catena_4() throws Exception {\n    try{ testSame(\"/** @interface */ var I = function() {};\" +\n        \"I.prototype = {baz: function(){}};\" +\n        \"/** @type {number} */ I.prototype.bar;\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    Var i = globalScope.getVar(\"I\");\n    try{ assertEquals(\"function (this:I): ?\", i.getType().toString());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(i.getType().isInterface());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    ObjectType iPrototype = (ObjectType)\n        ((ObjectType) i.getType()).getPropertyType(\"prototype\");\n    try{ assertEquals(\"I.prototype\", iPrototype.toString());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertTrue(iPrototype.isFunctionPrototypeType());                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertEquals(\"number\", iPrototype.getPropertyType(\"bar\").toString());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(\"function (this:I): undefined\",\n        iPrototype.getPropertyType(\"baz\").toString());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(iPrototype, globalScope.getVar(\"I.prototype\").getType());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "5": "  public void testPropertiesOnInterface2$catena_5() throws Exception {\n    try{ testSame(\"/** @interface */ var I = function() {};\" +\n        \"I.prototype = {baz: function(){}};\" +\n        \"/** @type {number} */ I.prototype.bar;\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    Var i = globalScope.getVar(\"I\");\n    try{ assertEquals(\"function (this:I): ?\", i.getType().toString());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(i.getType().isInterface());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    ObjectType iPrototype = (ObjectType)\n        ((ObjectType) i.getType()).getPropertyType(\"prototype\");\n    try{ assertEquals(\"I.prototype\", iPrototype.toString());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(iPrototype.isFunctionPrototypeType());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertEquals(\"number\", iPrototype.getPropertyType(\"bar\").toString());                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertEquals(\"function (this:I): undefined\",\n        iPrototype.getPropertyType(\"baz\").toString());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(iPrototype, globalScope.getVar(\"I.prototype\").getType());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "6": "  public void testPropertiesOnInterface2$catena_6() throws Exception {\n    try{ testSame(\"/** @interface */ var I = function() {};\" +\n        \"I.prototype = {baz: function(){}};\" +\n        \"/** @type {number} */ I.prototype.bar;\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    Var i = globalScope.getVar(\"I\");\n    try{ assertEquals(\"function (this:I): ?\", i.getType().toString());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(i.getType().isInterface());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    ObjectType iPrototype = (ObjectType)\n        ((ObjectType) i.getType()).getPropertyType(\"prototype\");\n    try{ assertEquals(\"I.prototype\", iPrototype.toString());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(iPrototype.isFunctionPrototypeType());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(\"number\", iPrototype.getPropertyType(\"bar\").toString());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertEquals(\"function (this:I): undefined\",\n        iPrototype.getPropertyType(\"baz\").toString());                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertEquals(iPrototype, globalScope.getVar(\"I.prototype\").getType());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "7": "  public void testPropertiesOnInterface2$catena_7() throws Exception {\n    try{ testSame(\"/** @interface */ var I = function() {};\" +\n        \"I.prototype = {baz: function(){}};\" +\n        \"/** @type {number} */ I.prototype.bar;\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    Var i = globalScope.getVar(\"I\");\n    try{ assertEquals(\"function (this:I): ?\", i.getType().toString());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(i.getType().isInterface());                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    ObjectType iPrototype = (ObjectType)\n        ((ObjectType) i.getType()).getPropertyType(\"prototype\");\n    try{ assertEquals(\"I.prototype\", iPrototype.toString());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ assertTrue(iPrototype.isFunctionPrototypeType());                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(\"number\", iPrototype.getPropertyType(\"bar\").toString());                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ assertEquals(\"function (this:I): undefined\",\n        iPrototype.getPropertyType(\"baz\").toString());                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertEquals(iPrototype, globalScope.getVar(\"I.prototype\").getType());                                  /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        }
    },
    "11": {
        "failing_tests": [
            "com.google.javascript.jscomp.TypedScopeCreatorTest::testMethodBeforeFunction2$catena_5",
            "com.google.javascript.jscomp.TypeCheckTest::testIssue1023",
            "com.google.javascript.jscomp.TypedScopeCreatorTest::testPropertiesOnInterface2$catena_7"
        ]
    }
}