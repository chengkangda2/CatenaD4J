---
Begin generate bug_id: Closure_50
num_of_hunks: 3
use working dir: ./working/data/Closure_50
Try to checkout Closure_50
build dir: ['./working/data/Closure_50/build/classes', './working/data/Closure_50/build/test']
init FileManager
trace file: src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java
trace file: src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java
trace file: src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java
trying to replace old failing tests
edit: replace from 82 range 46 at test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java
to
  public void testStringJoinAdd$catena_0() {
    fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");                                                    /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = [].join(',')", "x = \"\"");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a'].join(',')", "x = \"a\"");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', foo, 'b', 'c'].join(',')",
        "x = [\"a\",foo,\"b,c\"].join()");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [foo, 'a', 'b', 'c'].join(',')",
        "x = [foo,\"a,b,c\"].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c', foo].join(',')",
        "x = [\"a,b,c\",foo].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works with numbers
    try{ fold("x = ['a=', 5].join('')", "x = \"a=5\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(7)", "x = \"a75\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works on boolean
    try{ fold("x = ['a=', false].join('')", "x = \"a=false\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Only optimize if it's a size win.
    try{ fold("x = ['a', '5', 'c'].join('a very very very long chain')",
         "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(user): Its possible to fold this better.
    try{ foldSame("x = ['', foo].join('-')");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = ['', foo, ''].join()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, ''].join(',')",
         "x = [',', foo, ''].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['', '', foo, '', ''].join(',')",
         "x = [',', foo, ','].join()");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, '', '', bar].join(',')",
         "x = [',', foo, ',', bar].join()");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2,3].join('abcdef')",
         "x = '1abcdef2abcdef3'");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2].join()", "x = '1,2'");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,''].join(',')", "x = ',,'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,0].join(',')", "x = ',,0'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    // This can be folded but we don't currently.
    try{ foldSame("x = [[1,2],[3,4]].join()");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: "x = '1,2,3,4'"
  }   public void testStringJoinAdd$catena_1() {
    try{ fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = [].join(',')", "x = \"\"");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = ['a'].join(',')", "x = \"a\"");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', foo, 'b', 'c'].join(',')",
        "x = [\"a\",foo,\"b,c\"].join()");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [foo, 'a', 'b', 'c'].join(',')",
        "x = [foo,\"a,b,c\"].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c', foo].join(',')",
        "x = [\"a,b,c\",foo].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works with numbers
    try{ fold("x = ['a=', 5].join('')", "x = \"a=5\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(7)", "x = \"a75\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works on boolean
    try{ fold("x = ['a=', false].join('')", "x = \"a=false\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Only optimize if it's a size win.
    try{ fold("x = ['a', '5', 'c'].join('a very very very long chain')",
         "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(user): Its possible to fold this better.
    try{ foldSame("x = ['', foo].join('-')");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = ['', foo, ''].join()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, ''].join(',')",
         "x = [',', foo, ''].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['', '', foo, '', ''].join(',')",
         "x = [',', foo, ','].join()");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, '', '', bar].join(',')",
         "x = [',', foo, ',', bar].join()");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2,3].join('abcdef')",
         "x = '1abcdef2abcdef3'");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2].join()", "x = '1,2'");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,''].join(',')", "x = ',,'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,0].join(',')", "x = ',,0'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    // This can be folded but we don't currently.
    try{ foldSame("x = [[1,2],[3,4]].join()");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: "x = '1,2,3,4'"
  }   public void testStringJoinAdd$catena_2() {
    try{ fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [].join(',')", "x = \"\"");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = ['a'].join(',')", "x = \"a\"");                                                               /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', foo, 'b', 'c'].join(',')",
        "x = [\"a\",foo,\"b,c\"].join()");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [foo, 'a', 'b', 'c'].join(',')",
        "x = [foo,\"a,b,c\"].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c', foo].join(',')",
        "x = [\"a,b,c\",foo].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works with numbers
    try{ fold("x = ['a=', 5].join('')", "x = \"a=5\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(7)", "x = \"a75\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works on boolean
    try{ fold("x = ['a=', false].join('')", "x = \"a=false\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Only optimize if it's a size win.
    try{ fold("x = ['a', '5', 'c'].join('a very very very long chain')",
         "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(user): Its possible to fold this better.
    try{ foldSame("x = ['', foo].join('-')");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = ['', foo, ''].join()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, ''].join(',')",
         "x = [',', foo, ''].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['', '', foo, '', ''].join(',')",
         "x = [',', foo, ','].join()");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, '', '', bar].join(',')",
         "x = [',', foo, ',', bar].join()");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2,3].join('abcdef')",
         "x = '1abcdef2abcdef3'");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2].join()", "x = '1,2'");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,''].join(',')", "x = ',,'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,0].join(',')", "x = ',,0'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    // This can be folded but we don't currently.
    try{ foldSame("x = [[1,2],[3,4]].join()");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: "x = '1,2,3,4'"
  }   public void testStringJoinAdd$catena_3() {
    try{ fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [].join(',')", "x = \"\"");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a'].join(',')", "x = \"a\"");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");                                                 /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = ['a', foo, 'b', 'c'].join(',')",
        "x = [\"a\",foo,\"b,c\"].join()");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [foo, 'a', 'b', 'c'].join(',')",
        "x = [foo,\"a,b,c\"].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c', foo].join(',')",
        "x = [\"a,b,c\",foo].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works with numbers
    try{ fold("x = ['a=', 5].join('')", "x = \"a=5\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(7)", "x = \"a75\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works on boolean
    try{ fold("x = ['a=', false].join('')", "x = \"a=false\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Only optimize if it's a size win.
    try{ fold("x = ['a', '5', 'c'].join('a very very very long chain')",
         "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(user): Its possible to fold this better.
    try{ foldSame("x = ['', foo].join('-')");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = ['', foo, ''].join()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, ''].join(',')",
         "x = [',', foo, ''].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['', '', foo, '', ''].join(',')",
         "x = [',', foo, ','].join()");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, '', '', bar].join(',')",
         "x = [',', foo, ',', bar].join()");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2,3].join('abcdef')",
         "x = '1abcdef2abcdef3'");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2].join()", "x = '1,2'");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,''].join(',')", "x = ',,'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,0].join(',')", "x = ',,0'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    // This can be folded but we don't currently.
    try{ foldSame("x = [[1,2],[3,4]].join()");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: "x = '1,2,3,4'"
  }   public void testStringJoinAdd$catena_4() {
    try{ fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [].join(',')", "x = \"\"");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a'].join(',')", "x = \"a\"");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = ['a', foo, 'b', 'c'].join(',')",
        "x = [\"a\",foo,\"b,c\"].join()");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = [foo, 'a', 'b', 'c'].join(',')",
        "x = [foo,\"a,b,c\"].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c', foo].join(',')",
        "x = [\"a,b,c\",foo].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works with numbers
    try{ fold("x = ['a=', 5].join('')", "x = \"a=5\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(7)", "x = \"a75\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works on boolean
    try{ fold("x = ['a=', false].join('')", "x = \"a=false\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Only optimize if it's a size win.
    try{ fold("x = ['a', '5', 'c'].join('a very very very long chain')",
         "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(user): Its possible to fold this better.
    try{ foldSame("x = ['', foo].join('-')");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = ['', foo, ''].join()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, ''].join(',')",
         "x = [',', foo, ''].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['', '', foo, '', ''].join(',')",
         "x = [',', foo, ','].join()");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, '', '', bar].join(',')",
         "x = [',', foo, ',', bar].join()");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2,3].join('abcdef')",
         "x = '1abcdef2abcdef3'");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2].join()", "x = '1,2'");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,''].join(',')", "x = ',,'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,0].join(',')", "x = ',,0'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    // This can be folded but we don't currently.
    try{ foldSame("x = [[1,2],[3,4]].join()");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: "x = '1,2,3,4'"
  }   public void testStringJoinAdd$catena_5() {
    try{ fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [].join(',')", "x = \"\"");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a'].join(',')", "x = \"a\"");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', foo, 'b', 'c'].join(',')",
        "x = [\"a\",foo,\"b,c\"].join()");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = [foo, 'a', 'b', 'c'].join(',')",
        "x = [foo,\"a,b,c\"].join()");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = ['a', 'b', 'c', foo].join(',')",
        "x = [\"a,b,c\",foo].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works with numbers
    try{ fold("x = ['a=', 5].join('')", "x = \"a=5\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(7)", "x = \"a75\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works on boolean
    try{ fold("x = ['a=', false].join('')", "x = \"a=false\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Only optimize if it's a size win.
    try{ fold("x = ['a', '5', 'c'].join('a very very very long chain')",
         "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(user): Its possible to fold this better.
    try{ foldSame("x = ['', foo].join('-')");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = ['', foo, ''].join()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, ''].join(',')",
         "x = [',', foo, ''].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['', '', foo, '', ''].join(',')",
         "x = [',', foo, ','].join()");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, '', '', bar].join(',')",
         "x = [',', foo, ',', bar].join()");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2,3].join('abcdef')",
         "x = '1abcdef2abcdef3'");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2].join()", "x = '1,2'");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,''].join(',')", "x = ',,'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,0].join(',')", "x = ',,0'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    // This can be folded but we don't currently.
    try{ foldSame("x = [[1,2],[3,4]].join()");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: "x = '1,2,3,4'"
  }   public void testStringJoinAdd$catena_6() {
    try{ fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [].join(',')", "x = \"\"");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a'].join(',')", "x = \"a\"");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', foo, 'b', 'c'].join(',')",
        "x = [\"a\",foo,\"b,c\"].join()");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [foo, 'a', 'b', 'c'].join(',')",
        "x = [foo,\"a,b,c\"].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = ['a', 'b', 'c', foo].join(',')",
        "x = [\"a,b,c\",foo].join()");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/

    // Works with numbers
    try{ fold("x = ['a=', 5].join('')", "x = \"a=5\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(7)", "x = \"a75\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works on boolean
    try{ fold("x = ['a=', false].join('')", "x = \"a=false\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Only optimize if it's a size win.
    try{ fold("x = ['a', '5', 'c'].join('a very very very long chain')",
         "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(user): Its possible to fold this better.
    try{ foldSame("x = ['', foo].join('-')");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = ['', foo, ''].join()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, ''].join(',')",
         "x = [',', foo, ''].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['', '', foo, '', ''].join(',')",
         "x = [',', foo, ','].join()");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, '', '', bar].join(',')",
         "x = [',', foo, ',', bar].join()");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2,3].join('abcdef')",
         "x = '1abcdef2abcdef3'");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2].join()", "x = '1,2'");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,''].join(',')", "x = ',,'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,0].join(',')", "x = ',,0'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    // This can be folded but we don't currently.
    try{ foldSame("x = [[1,2],[3,4]].join()");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: "x = '1,2,3,4'"
  }   public void testStringJoinAdd$catena_7() {
    try{ fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [].join(',')", "x = \"\"");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a'].join(',')", "x = \"a\"");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', foo, 'b', 'c'].join(',')",
        "x = [\"a\",foo,\"b,c\"].join()");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [foo, 'a', 'b', 'c'].join(',')",
        "x = [foo,\"a,b,c\"].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c', foo].join(',')",
        "x = [\"a,b,c\",foo].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works with numbers
    fold("x = ['a=', 5].join('')", "x = \"a=5\"");                                                          /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = ['a', '5'].join(7)", "x = \"a75\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works on boolean
    try{ fold("x = ['a=', false].join('')", "x = \"a=false\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Only optimize if it's a size win.
    try{ fold("x = ['a', '5', 'c'].join('a very very very long chain')",
         "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(user): Its possible to fold this better.
    try{ foldSame("x = ['', foo].join('-')");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = ['', foo, ''].join()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, ''].join(',')",
         "x = [',', foo, ''].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['', '', foo, '', ''].join(',')",
         "x = [',', foo, ','].join()");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, '', '', bar].join(',')",
         "x = [',', foo, ',', bar].join()");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2,3].join('abcdef')",
         "x = '1abcdef2abcdef3'");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2].join()", "x = '1,2'");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,''].join(',')", "x = ',,'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,0].join(',')", "x = ',,0'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    // This can be folded but we don't currently.
    try{ foldSame("x = [[1,2],[3,4]].join()");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: "x = '1,2,3,4'"
  }   public void testStringJoinAdd$catena_8() {
    try{ fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [].join(',')", "x = \"\"");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a'].join(',')", "x = \"a\"");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', foo, 'b', 'c'].join(',')",
        "x = [\"a\",foo,\"b,c\"].join()");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [foo, 'a', 'b', 'c'].join(',')",
        "x = [foo,\"a,b,c\"].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c', foo].join(',')",
        "x = [\"a,b,c\",foo].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works with numbers
    try{ fold("x = ['a=', 5].join('')", "x = \"a=5\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = ['a', '5'].join(7)", "x = \"a75\"");                                                          /***** ORIGINAL ASSERTION IS HERE *****/

    // Works on boolean
    try{ fold("x = ['a=', false].join('')", "x = \"a=false\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Only optimize if it's a size win.
    try{ fold("x = ['a', '5', 'c'].join('a very very very long chain')",
         "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(user): Its possible to fold this better.
    try{ foldSame("x = ['', foo].join('-')");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = ['', foo, ''].join()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, ''].join(',')",
         "x = [',', foo, ''].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['', '', foo, '', ''].join(',')",
         "x = [',', foo, ','].join()");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, '', '', bar].join(',')",
         "x = [',', foo, ',', bar].join()");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2,3].join('abcdef')",
         "x = '1abcdef2abcdef3'");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2].join()", "x = '1,2'");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,''].join(',')", "x = ',,'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,0].join(',')", "x = ',,0'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    // This can be folded but we don't currently.
    try{ foldSame("x = [[1,2],[3,4]].join()");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: "x = '1,2,3,4'"
  }   public void testStringJoinAdd$catena_9() {
    try{ fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [].join(',')", "x = \"\"");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a'].join(',')", "x = \"a\"");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', foo, 'b', 'c'].join(',')",
        "x = [\"a\",foo,\"b,c\"].join()");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [foo, 'a', 'b', 'c'].join(',')",
        "x = [foo,\"a,b,c\"].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c', foo].join(',')",
        "x = [\"a,b,c\",foo].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works with numbers
    try{ fold("x = ['a=', 5].join('')", "x = \"a=5\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(7)", "x = \"a75\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works on boolean
    fold("x = ['a=', false].join('')", "x = \"a=false\"");                                                  /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Only optimize if it's a size win.
    try{ fold("x = ['a', '5', 'c'].join('a very very very long chain')",
         "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(user): Its possible to fold this better.
    try{ foldSame("x = ['', foo].join('-')");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = ['', foo, ''].join()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, ''].join(',')",
         "x = [',', foo, ''].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['', '', foo, '', ''].join(',')",
         "x = [',', foo, ','].join()");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, '', '', bar].join(',')",
         "x = [',', foo, ',', bar].join()");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2,3].join('abcdef')",
         "x = '1abcdef2abcdef3'");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2].join()", "x = '1,2'");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,''].join(',')", "x = ',,'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,0].join(',')", "x = ',,0'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    // This can be folded but we don't currently.
    try{ foldSame("x = [[1,2],[3,4]].join()");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: "x = '1,2,3,4'"
  }   public void testStringJoinAdd$catena_10() {
    try{ fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [].join(',')", "x = \"\"");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a'].join(',')", "x = \"a\"");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', foo, 'b', 'c'].join(',')",
        "x = [\"a\",foo,\"b,c\"].join()");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [foo, 'a', 'b', 'c'].join(',')",
        "x = [foo,\"a,b,c\"].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c', foo].join(',')",
        "x = [\"a,b,c\",foo].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works with numbers
    try{ fold("x = ['a=', 5].join('')", "x = \"a=5\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(7)", "x = \"a75\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works on boolean
    try{ fold("x = ['a=', false].join('')", "x = \"a=false\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");                                                    /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Only optimize if it's a size win.
    try{ fold("x = ['a', '5', 'c'].join('a very very very long chain')",
         "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(user): Its possible to fold this better.
    try{ foldSame("x = ['', foo].join('-')");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = ['', foo, ''].join()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, ''].join(',')",
         "x = [',', foo, ''].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['', '', foo, '', ''].join(',')",
         "x = [',', foo, ','].join()");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, '', '', bar].join(',')",
         "x = [',', foo, ',', bar].join()");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2,3].join('abcdef')",
         "x = '1abcdef2abcdef3'");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2].join()", "x = '1,2'");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,''].join(',')", "x = ',,'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,0].join(',')", "x = ',,0'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    // This can be folded but we don't currently.
    try{ foldSame("x = [[1,2],[3,4]].join()");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: "x = '1,2,3,4'"
  }   public void testStringJoinAdd$catena_11() {
    try{ fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [].join(',')", "x = \"\"");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a'].join(',')", "x = \"a\"");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', foo, 'b', 'c'].join(',')",
        "x = [\"a\",foo,\"b,c\"].join()");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [foo, 'a', 'b', 'c'].join(',')",
        "x = [foo,\"a,b,c\"].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c', foo].join(',')",
        "x = [\"a,b,c\",foo].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works with numbers
    try{ fold("x = ['a=', 5].join('')", "x = \"a=5\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(7)", "x = \"a75\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works on boolean
    try{ fold("x = ['a=', false].join('')", "x = \"a=false\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");                                                  /***** ORIGINAL ASSERTION IS HERE *****/

    // Only optimize if it's a size win.
    try{ fold("x = ['a', '5', 'c'].join('a very very very long chain')",
         "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(user): Its possible to fold this better.
    try{ foldSame("x = ['', foo].join('-')");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = ['', foo, ''].join()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, ''].join(',')",
         "x = [',', foo, ''].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['', '', foo, '', ''].join(',')",
         "x = [',', foo, ','].join()");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, '', '', bar].join(',')",
         "x = [',', foo, ',', bar].join()");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2,3].join('abcdef')",
         "x = '1abcdef2abcdef3'");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2].join()", "x = '1,2'");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,''].join(',')", "x = ',,'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,0].join(',')", "x = ',,0'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    // This can be folded but we don't currently.
    try{ foldSame("x = [[1,2],[3,4]].join()");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: "x = '1,2,3,4'"
  }   public void testStringJoinAdd$catena_12() {
    try{ fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [].join(',')", "x = \"\"");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a'].join(',')", "x = \"a\"");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', foo, 'b', 'c'].join(',')",
        "x = [\"a\",foo,\"b,c\"].join()");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [foo, 'a', 'b', 'c'].join(',')",
        "x = [foo,\"a,b,c\"].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c', foo].join(',')",
        "x = [\"a,b,c\",foo].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works with numbers
    try{ fold("x = ['a=', 5].join('')", "x = \"a=5\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(7)", "x = \"a75\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works on boolean
    try{ fold("x = ['a=', false].join('')", "x = \"a=false\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Only optimize if it's a size win.
    fold("x = ['a', '5', 'c'].join('a very very very long chain')",
         "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");                                  /***** ORIGINAL ASSERTION IS HERE *****/

    // TODO(user): Its possible to fold this better.
    try{ foldSame("x = ['', foo].join('-')");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = ['', foo, ''].join()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, ''].join(',')",
         "x = [',', foo, ''].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['', '', foo, '', ''].join(',')",
         "x = [',', foo, ','].join()");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, '', '', bar].join(',')",
         "x = [',', foo, ',', bar].join()");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2,3].join('abcdef')",
         "x = '1abcdef2abcdef3'");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2].join()", "x = '1,2'");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,''].join(',')", "x = ',,'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,0].join(',')", "x = ',,0'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    // This can be folded but we don't currently.
    try{ foldSame("x = [[1,2],[3,4]].join()");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: "x = '1,2,3,4'"
  }   public void testStringJoinAdd$catena_13() {
    try{ fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [].join(',')", "x = \"\"");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a'].join(',')", "x = \"a\"");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', foo, 'b', 'c'].join(',')",
        "x = [\"a\",foo,\"b,c\"].join()");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [foo, 'a', 'b', 'c'].join(',')",
        "x = [foo,\"a,b,c\"].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c', foo].join(',')",
        "x = [\"a,b,c\",foo].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works with numbers
    try{ fold("x = ['a=', 5].join('')", "x = \"a=5\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(7)", "x = \"a75\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works on boolean
    try{ fold("x = ['a=', false].join('')", "x = \"a=false\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Only optimize if it's a size win.
    try{ fold("x = ['a', '5', 'c'].join('a very very very long chain')",
         "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(user): Its possible to fold this better.
    foldSame("x = ['', foo].join('-')");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/
    try{ foldSame("x = ['', foo, ''].join()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, ''].join(',')",
         "x = [',', foo, ''].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['', '', foo, '', ''].join(',')",
         "x = [',', foo, ','].join()");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, '', '', bar].join(',')",
         "x = [',', foo, ',', bar].join()");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2,3].join('abcdef')",
         "x = '1abcdef2abcdef3'");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2].join()", "x = '1,2'");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,''].join(',')", "x = ',,'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,0].join(',')", "x = ',,0'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    // This can be folded but we don't currently.
    try{ foldSame("x = [[1,2],[3,4]].join()");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: "x = '1,2,3,4'"
  }   public void testStringJoinAdd$catena_14() {
    try{ fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [].join(',')", "x = \"\"");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a'].join(',')", "x = \"a\"");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', foo, 'b', 'c'].join(',')",
        "x = [\"a\",foo,\"b,c\"].join()");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [foo, 'a', 'b', 'c'].join(',')",
        "x = [foo,\"a,b,c\"].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c', foo].join(',')",
        "x = [\"a,b,c\",foo].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works with numbers
    try{ fold("x = ['a=', 5].join('')", "x = \"a=5\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(7)", "x = \"a75\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works on boolean
    try{ fold("x = ['a=', false].join('')", "x = \"a=false\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Only optimize if it's a size win.
    try{ fold("x = ['a', '5', 'c'].join('a very very very long chain')",
         "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(user): Its possible to fold this better.
    try{ foldSame("x = ['', foo].join('-')");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    foldSame("x = ['', foo, ''].join()");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/

    try{ fold("x = ['', '', foo, ''].join(',')",
         "x = [',', foo, ''].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['', '', foo, '', ''].join(',')",
         "x = [',', foo, ','].join()");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, '', '', bar].join(',')",
         "x = [',', foo, ',', bar].join()");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2,3].join('abcdef')",
         "x = '1abcdef2abcdef3'");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2].join()", "x = '1,2'");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,''].join(',')", "x = ',,'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,0].join(',')", "x = ',,0'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    // This can be folded but we don't currently.
    try{ foldSame("x = [[1,2],[3,4]].join()");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: "x = '1,2,3,4'"
  }   public void testStringJoinAdd$catena_15() {
    try{ fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [].join(',')", "x = \"\"");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a'].join(',')", "x = \"a\"");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', foo, 'b', 'c'].join(',')",
        "x = [\"a\",foo,\"b,c\"].join()");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [foo, 'a', 'b', 'c'].join(',')",
        "x = [foo,\"a,b,c\"].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c', foo].join(',')",
        "x = [\"a,b,c\",foo].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works with numbers
    try{ fold("x = ['a=', 5].join('')", "x = \"a=5\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(7)", "x = \"a75\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works on boolean
    try{ fold("x = ['a=', false].join('')", "x = \"a=false\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Only optimize if it's a size win.
    try{ fold("x = ['a', '5', 'c'].join('a very very very long chain')",
         "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(user): Its possible to fold this better.
    try{ foldSame("x = ['', foo].join('-')");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = ['', foo, ''].join()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    fold("x = ['', '', foo, ''].join(',')",
         "x = [',', foo, ''].join()");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = ['', '', foo, '', ''].join(',')",
         "x = [',', foo, ','].join()");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, '', '', bar].join(',')",
         "x = [',', foo, ',', bar].join()");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2,3].join('abcdef')",
         "x = '1abcdef2abcdef3'");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2].join()", "x = '1,2'");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,''].join(',')", "x = ',,'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,0].join(',')", "x = ',,0'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    // This can be folded but we don't currently.
    try{ foldSame("x = [[1,2],[3,4]].join()");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: "x = '1,2,3,4'"
  }   public void testStringJoinAdd$catena_16() {
    try{ fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [].join(',')", "x = \"\"");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a'].join(',')", "x = \"a\"");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', foo, 'b', 'c'].join(',')",
        "x = [\"a\",foo,\"b,c\"].join()");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [foo, 'a', 'b', 'c'].join(',')",
        "x = [foo,\"a,b,c\"].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c', foo].join(',')",
        "x = [\"a,b,c\",foo].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works with numbers
    try{ fold("x = ['a=', 5].join('')", "x = \"a=5\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(7)", "x = \"a75\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works on boolean
    try{ fold("x = ['a=', false].join('')", "x = \"a=false\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Only optimize if it's a size win.
    try{ fold("x = ['a', '5', 'c'].join('a very very very long chain')",
         "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(user): Its possible to fold this better.
    try{ foldSame("x = ['', foo].join('-')");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = ['', foo, ''].join()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, ''].join(',')",
         "x = [',', foo, ''].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = ['', '', foo, '', ''].join(',')",
         "x = [',', foo, ','].join()");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/

    try{ fold("x = ['', '', foo, '', '', bar].join(',')",
         "x = [',', foo, ',', bar].join()");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2,3].join('abcdef')",
         "x = '1abcdef2abcdef3'");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2].join()", "x = '1,2'");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,''].join(',')", "x = ',,'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,0].join(',')", "x = ',,0'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    // This can be folded but we don't currently.
    try{ foldSame("x = [[1,2],[3,4]].join()");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: "x = '1,2,3,4'"
  }   public void testStringJoinAdd$catena_17() {
    try{ fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [].join(',')", "x = \"\"");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a'].join(',')", "x = \"a\"");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', foo, 'b', 'c'].join(',')",
        "x = [\"a\",foo,\"b,c\"].join()");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [foo, 'a', 'b', 'c'].join(',')",
        "x = [foo,\"a,b,c\"].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c', foo].join(',')",
        "x = [\"a,b,c\",foo].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works with numbers
    try{ fold("x = ['a=', 5].join('')", "x = \"a=5\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(7)", "x = \"a75\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works on boolean
    try{ fold("x = ['a=', false].join('')", "x = \"a=false\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Only optimize if it's a size win.
    try{ fold("x = ['a', '5', 'c'].join('a very very very long chain')",
         "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(user): Its possible to fold this better.
    try{ foldSame("x = ['', foo].join('-')");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = ['', foo, ''].join()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, ''].join(',')",
         "x = [',', foo, ''].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['', '', foo, '', ''].join(',')",
         "x = [',', foo, ','].join()");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    fold("x = ['', '', foo, '', '', bar].join(',')",
         "x = [',', foo, ',', bar].join()");                                                                /***** ORIGINAL ASSERTION IS HERE *****/

    try{ fold("x = [1,2,3].join('abcdef')",
         "x = '1abcdef2abcdef3'");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2].join()", "x = '1,2'");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,''].join(',')", "x = ',,'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,0].join(',')", "x = ',,0'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    // This can be folded but we don't currently.
    try{ foldSame("x = [[1,2],[3,4]].join()");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: "x = '1,2,3,4'"
  }   public void testStringJoinAdd$catena_18() {
    try{ fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [].join(',')", "x = \"\"");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a'].join(',')", "x = \"a\"");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', foo, 'b', 'c'].join(',')",
        "x = [\"a\",foo,\"b,c\"].join()");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [foo, 'a', 'b', 'c'].join(',')",
        "x = [foo,\"a,b,c\"].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c', foo].join(',')",
        "x = [\"a,b,c\",foo].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works with numbers
    try{ fold("x = ['a=', 5].join('')", "x = \"a=5\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(7)", "x = \"a75\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works on boolean
    try{ fold("x = ['a=', false].join('')", "x = \"a=false\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Only optimize if it's a size win.
    try{ fold("x = ['a', '5', 'c'].join('a very very very long chain')",
         "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(user): Its possible to fold this better.
    try{ foldSame("x = ['', foo].join('-')");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = ['', foo, ''].join()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, ''].join(',')",
         "x = [',', foo, ''].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['', '', foo, '', ''].join(',')",
         "x = [',', foo, ','].join()");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, '', '', bar].join(',')",
         "x = [',', foo, ',', bar].join()");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    fold("x = [1,2,3].join('abcdef')",
         "x = '1abcdef2abcdef3'");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/

    try{ fold("x = [1,2].join()", "x = '1,2'");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,''].join(',')", "x = ',,'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,0].join(',')", "x = ',,0'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    // This can be folded but we don't currently.
    try{ foldSame("x = [[1,2],[3,4]].join()");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: "x = '1,2,3,4'"
  }   public void testStringJoinAdd$catena_19() {
    try{ fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [].join(',')", "x = \"\"");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a'].join(',')", "x = \"a\"");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', foo, 'b', 'c'].join(',')",
        "x = [\"a\",foo,\"b,c\"].join()");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [foo, 'a', 'b', 'c'].join(',')",
        "x = [foo,\"a,b,c\"].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c', foo].join(',')",
        "x = [\"a,b,c\",foo].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works with numbers
    try{ fold("x = ['a=', 5].join('')", "x = \"a=5\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(7)", "x = \"a75\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works on boolean
    try{ fold("x = ['a=', false].join('')", "x = \"a=false\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Only optimize if it's a size win.
    try{ fold("x = ['a', '5', 'c'].join('a very very very long chain')",
         "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(user): Its possible to fold this better.
    try{ foldSame("x = ['', foo].join('-')");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = ['', foo, ''].join()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, ''].join(',')",
         "x = [',', foo, ''].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['', '', foo, '', ''].join(',')",
         "x = [',', foo, ','].join()");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, '', '', bar].join(',')",
         "x = [',', foo, ',', bar].join()");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2,3].join('abcdef')",
         "x = '1abcdef2abcdef3'");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

    fold("x = [1,2].join()", "x = '1,2'");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = [null,undefined,''].join(',')", "x = ',,'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,0].join(',')", "x = ',,0'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    // This can be folded but we don't currently.
    try{ foldSame("x = [[1,2],[3,4]].join()");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: "x = '1,2,3,4'"
  }   public void testStringJoinAdd$catena_20() {
    try{ fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [].join(',')", "x = \"\"");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a'].join(',')", "x = \"a\"");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', foo, 'b', 'c'].join(',')",
        "x = [\"a\",foo,\"b,c\"].join()");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [foo, 'a', 'b', 'c'].join(',')",
        "x = [foo,\"a,b,c\"].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c', foo].join(',')",
        "x = [\"a,b,c\",foo].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works with numbers
    try{ fold("x = ['a=', 5].join('')", "x = \"a=5\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(7)", "x = \"a75\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works on boolean
    try{ fold("x = ['a=', false].join('')", "x = \"a=false\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Only optimize if it's a size win.
    try{ fold("x = ['a', '5', 'c'].join('a very very very long chain')",
         "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(user): Its possible to fold this better.
    try{ foldSame("x = ['', foo].join('-')");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = ['', foo, ''].join()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, ''].join(',')",
         "x = [',', foo, ''].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['', '', foo, '', ''].join(',')",
         "x = [',', foo, ','].join()");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, '', '', bar].join(',')",
         "x = [',', foo, ',', bar].join()");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2,3].join('abcdef')",
         "x = '1abcdef2abcdef3'");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2].join()", "x = '1,2'");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = [null,undefined,''].join(',')", "x = ',,'");                                                  /***** ORIGINAL ASSERTION IS HERE *****/
    try{ fold("x = [null,undefined,0].join(',')", "x = ',,0'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    // This can be folded but we don't currently.
    try{ foldSame("x = [[1,2],[3,4]].join()");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: "x = '1,2,3,4'"
  }   public void testStringJoinAdd$catena_21() {
    try{ fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [].join(',')", "x = \"\"");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a'].join(',')", "x = \"a\"");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', foo, 'b', 'c'].join(',')",
        "x = [\"a\",foo,\"b,c\"].join()");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [foo, 'a', 'b', 'c'].join(',')",
        "x = [foo,\"a,b,c\"].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c', foo].join(',')",
        "x = [\"a,b,c\",foo].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works with numbers
    try{ fold("x = ['a=', 5].join('')", "x = \"a=5\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(7)", "x = \"a75\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works on boolean
    try{ fold("x = ['a=', false].join('')", "x = \"a=false\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Only optimize if it's a size win.
    try{ fold("x = ['a', '5', 'c'].join('a very very very long chain')",
         "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(user): Its possible to fold this better.
    try{ foldSame("x = ['', foo].join('-')");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = ['', foo, ''].join()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, ''].join(',')",
         "x = [',', foo, ''].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['', '', foo, '', ''].join(',')",
         "x = [',', foo, ','].join()");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, '', '', bar].join(',')",
         "x = [',', foo, ',', bar].join()");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2,3].join('abcdef')",
         "x = '1abcdef2abcdef3'");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2].join()", "x = '1,2'");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,''].join(',')", "x = ',,'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    fold("x = [null,undefined,0].join(',')", "x = ',,0'");                                                  /***** ORIGINAL ASSERTION IS HERE *****/
    // This can be folded but we don't currently.
    try{ foldSame("x = [[1,2],[3,4]].join()");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: "x = '1,2,3,4'"
  }   public void testStringJoinAdd$catena_22() {
    try{ fold("x = ['a', 'b', 'c'].join('')", "x = \"abc\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [].join(',')", "x = \"\"");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a'].join(',')", "x = \"a\"");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c'].join(',')", "x = \"a,b,c\"");                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', foo, 'b', 'c'].join(',')",
        "x = [\"a\",foo,\"b,c\"].join()");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [foo, 'a', 'b', 'c'].join(',')",
        "x = [foo,\"a,b,c\"].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', 'b', 'c', foo].join(',')",
        "x = [\"a,b,c\",foo].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works with numbers
    try{ fold("x = ['a=', 5].join('')", "x = \"a=5\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(7)", "x = \"a75\"");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    // Works on boolean
    try{ fold("x = ['a=', false].join('')", "x = \"a=false\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(true)", "x = \"atrue5\"");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['a', '5'].join(false)", "x = \"afalse5\"");                                             }catch(Throwable __SHOULD_BE_IGNORED){}

    // Only optimize if it's a size win.
    try{ fold("x = ['a', '5', 'c'].join('a very very very long chain')",
         "x = [\"a\",\"5\",\"c\"].join(\"a very very very long chain\")");                                  }catch(Throwable __SHOULD_BE_IGNORED){}

    // TODO(user): Its possible to fold this better.
    try{ foldSame("x = ['', foo].join('-')");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ foldSame("x = ['', foo, ''].join()");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, ''].join(',')",
         "x = [',', foo, ''].join()");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = ['', '', foo, '', ''].join(',')",
         "x = [',', foo, ','].join()");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = ['', '', foo, '', '', bar].join(',')",
         "x = [',', foo, ',', bar].join()");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2,3].join('abcdef')",
         "x = '1abcdef2abcdef3'");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ fold("x = [1,2].join()", "x = '1,2'");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,''].join(',')", "x = ',,'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ fold("x = [null,undefined,0].join(',')", "x = ',,0'");                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    // This can be folded but we don't currently.
    foldSame("x = [[1,2],[3,4]].join()");                                    /***** ORIGINAL ASSERTION IS HERE *****/ // would like: "x = '1,2,3,4'"
  }
edit: replace from 77 range 4 at test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java
to
  public void testNoStringJoin$catena_0() {
    foldSame("x = [].join(',',2)");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
    try{ foldSame("x = [].join(f)");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testNoStringJoin$catena_1() {
    try{ foldSame("x = [].join(',',2)");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    foldSame("x = [].join(f)");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/
  }
trace file: test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java
new test num: 25
ori test num: 0
pattern: 000
patches are written to file
running tests...
used time: Finished in 226.35 seconds
Failing tests: 7
	com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testNoStringJoin$catena_0
	com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_15
	com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_16
	com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_17
	com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_4
	com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_5
	com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_6
pattern: 001
try to fix hunk: 2
insert before 390 with       n.removeChild(right);
      reportCodeChange();
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 010
try to fix hunk: 1
insert before 389 with     if (right != null && right.getType() == Token.STRING
        && ",".equals(right.getString())) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 100
try to fix hunk: 0
replace from 376 with range 1 to
      if (right.getNext() != null || !NodeUtil.isImmutableValue(right)) {

patches are written to file
running tests...
used time: Finished in 214.82 seconds
Failing tests: 6
	com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_15
	com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_16
	com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_17
	com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_4
	com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_5
	com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_6
No new failing tests but only 1 hunk
pattern: 011
try to fix hunk: 1
insert before 389 with     if (right != null && right.getType() == Token.STRING
        && ",".equals(right.getString())) {

try to fix hunk: 2
insert before 390 with       n.removeChild(right);
      reportCodeChange();
    }

patches are written to file
running tests...
used time: Finished in 224.19 seconds
Failing tests: 1
	com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testNoStringJoin$catena_0
Can independently fix ['com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_5', 'com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_6', 'com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_17', 'com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_16', 'com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_15', 'com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_4']
select new bug
Pattern: 011
failing tests: com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_5@com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_6@com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_17@com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_16@com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_15@com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_4
pattern: 101
try to fix hunk: 0
replace from 376 with range 1 to
      if (right.getNext() != null || !NodeUtil.isImmutableValue(right)) {

try to fix hunk: 2
insert before 390 with       n.removeChild(right);
      reportCodeChange();
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 110
try to fix hunk: 0
replace from 376 with range 1 to
      if (right.getNext() != null || !NodeUtil.isImmutableValue(right)) {

try to fix hunk: 1
insert before 389 with     if (right != null && right.getType() == Token.STRING
        && ",".equals(right.getString())) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 111
try to fix hunk: 0
replace from 376 with range 1 to
      if (right.getNext() != null || !NodeUtil.isImmutableValue(right)) {

try to fix hunk: 1
insert before 389 with     if (right != null && right.getType() == Token.STRING
        && ",".equals(right.getString())) {

try to fix hunk: 2
insert before 390 with       n.removeChild(right);
      reportCodeChange();
    }

patches are written to file
running tests...
used time: Finished in 216.87 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
Find 1 new bugs
