{
    "original": {
        "num_of_hunks": 3,
        "0": {
            "file_name": "src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java",
            "from_line_no": 376,
            "to_line_no": 376,
            "replaced_with": "      if (right.getNext() != null || !NodeUtil.isImmutableValue(right)) {\n",
            "replaced": "      if (!NodeUtil.isImmutableValue(right)) {\n",
            "patch_type": "replace",
            "next_line_no": 377
        },
        "1": {
            "file_name": "src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java",
            "replaced_with": "    if (right != null && right.getType() == Token.STRING\n        && \",\".equals(right.getString())) {\n",
            "patch_type": "insert",
            "next_line_no": 389
        },
        "2": {
            "file_name": "src/com/google/javascript/jscomp/PeepholeReplaceKnownMethods.java",
            "replaced_with": "      n.removeChild(right);\n      reportCodeChange();\n    }\n",
            "patch_type": "insert",
            "next_line_no": 390
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd",
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testNoStringJoin"
        ],
        "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd": {
            "file_path": "test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java",
            "Instance": "Begin: Pos(82, 10)\nEnd: Pos(127, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_50/test//com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java\nName: testStringJoinAdd\nChilds: [StatementAssertion<Begin: Pos(83, 5), End: Pos(83, 56)>,\nStatementAssertion<Begin: Pos(84, 5), End: Pos(84, 41)>,\nStatementAssertion<Begin: Pos(85, 5), End: Pos(85, 45)>,\nStatementAssertion<Begin: Pos(86, 5), End: Pos(86, 59)>,\nStatementAssertion<Begin: Pos(87, 5), End: Pos(88, 42)>,\nStatementAssertion<Begin: Pos(89, 5), End: Pos(90, 38)>,\nStatementAssertion<Begin: Pos(91, 5), End: Pos(92, 38)>,\nStatementAssertion<Begin: Pos(95, 5), End: Pos(95, 50)>,\nStatementAssertion<Begin: Pos(96, 5), End: Pos(96, 50)>,\nStatementAssertion<Begin: Pos(99, 5), End: Pos(99, 58)>,\nStatementAssertion<Begin: Pos(100, 5), End: Pos(100, 56)>,\nStatementAssertion<Begin: Pos(101, 5), End: Pos(101, 58)>,\nStatementAssertion<Begin: Pos(104, 5), End: Pos(105, 74)>,\nStatementAssertion<Begin: Pos(108, 5), End: Pos(108, 40)>,\nStatementAssertion<Begin: Pos(109, 5), End: Pos(109, 41)>,\nStatementAssertion<Begin: Pos(111, 5), End: Pos(112, 38)>,\nStatementAssertion<Begin: Pos(113, 5), End: Pos(114, 39)>,\nStatementAssertion<Begin: Pos(116, 5), End: Pos(117, 44)>,\nStatementAssertion<Begin: Pos(119, 5), End: Pos(120, 34)>,\nStatementAssertion<Begin: Pos(122, 5), End: Pos(122, 42)>,\nStatementAssertion<Begin: Pos(123, 5), End: Pos(123, 58)>,\nStatementAssertion<Begin: Pos(124, 5), End: Pos(124, 58)>,\nStatementAssertion<Begin: Pos(126, 5), End: Pos(126, 41)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_50/test//com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java",
            "name": "testStringJoinAdd",
            "begin": "Pos(82, 10)",
            "end": "Pos(127, 3)",
            "begin_line_no": 82,
            "end_line_no": 127,
            "child": [
                "Begin: Pos(83, 5)\nEnd: Pos(83, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(84, 5)\nEnd: Pos(84, 41)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(85, 5)\nEnd: Pos(85, 45)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(86, 5)\nEnd: Pos(86, 59)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(87, 5)\nEnd: Pos(88, 42)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(89, 5)\nEnd: Pos(90, 38)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(91, 5)\nEnd: Pos(92, 38)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(95, 5)\nEnd: Pos(95, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(96, 5)\nEnd: Pos(96, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(99, 5)\nEnd: Pos(99, 58)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(100, 5)\nEnd: Pos(100, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(101, 5)\nEnd: Pos(101, 58)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(104, 5)\nEnd: Pos(105, 74)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(108, 5)\nEnd: Pos(108, 40)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(109, 5)\nEnd: Pos(109, 41)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(111, 5)\nEnd: Pos(112, 38)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(113, 5)\nEnd: Pos(114, 39)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(116, 5)\nEnd: Pos(117, 44)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(119, 5)\nEnd: Pos(120, 34)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(122, 5)\nEnd: Pos(122, 42)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(123, 5)\nEnd: Pos(123, 58)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(124, 5)\nEnd: Pos(124, 58)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(126, 5)\nEnd: Pos(126, 41)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testStringJoinAdd$catena_0() {\n    fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "  public void testStringJoinAdd$catena_1() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "  public void testStringJoinAdd$catena_2() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "  public void testStringJoinAdd$catena_3() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "  public void testStringJoinAdd$catena_4() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "  public void testStringJoinAdd$catena_5() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "  public void testStringJoinAdd$catena_6() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "  public void testStringJoinAdd$catena_7() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "  public void testStringJoinAdd$catena_8() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "  public void testStringJoinAdd$catena_9() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "  public void testStringJoinAdd$catena_10() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "  public void testStringJoinAdd$catena_11() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "  public void testStringJoinAdd$catena_12() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "  public void testStringJoinAdd$catena_13() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    foldSame(\"x = ['', foo].join('-')\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "  public void testStringJoinAdd$catena_14() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    foldSame(\"x = ['', foo, ''].join()\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "  public void testStringJoinAdd$catena_15() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "  public void testStringJoinAdd$catena_16() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "  public void testStringJoinAdd$catena_17() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "  public void testStringJoinAdd$catena_18() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "  public void testStringJoinAdd$catena_19() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "  public void testStringJoinAdd$catena_20() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "  public void testStringJoinAdd$catena_21() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "  public void testStringJoinAdd$catena_22() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    foldSame(\"x = [[1,2],[3,4]].join()\");                                    /***** ORIGINAL ASSERTION IS HERE *****/ // would like: \"x = '1,2,3,4'\"\n  }"
            ],
            "func": {
                "0": "  public void testStringJoinAdd$catena_0() {\n    fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "1": "  public void testStringJoinAdd$catena_1() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "2": "  public void testStringJoinAdd$catena_2() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "3": "  public void testStringJoinAdd$catena_3() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "4": "  public void testStringJoinAdd$catena_4() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "5": "  public void testStringJoinAdd$catena_5() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "6": "  public void testStringJoinAdd$catena_6() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "7": "  public void testStringJoinAdd$catena_7() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "8": "  public void testStringJoinAdd$catena_8() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "9": "  public void testStringJoinAdd$catena_9() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "10": "  public void testStringJoinAdd$catena_10() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "11": "  public void testStringJoinAdd$catena_11() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "12": "  public void testStringJoinAdd$catena_12() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "13": "  public void testStringJoinAdd$catena_13() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    foldSame(\"x = ['', foo].join('-')\");                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "14": "  public void testStringJoinAdd$catena_14() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    foldSame(\"x = ['', foo, ''].join()\");                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "15": "  public void testStringJoinAdd$catena_15() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "16": "  public void testStringJoinAdd$catena_16() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "17": "  public void testStringJoinAdd$catena_17() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "18": "  public void testStringJoinAdd$catena_18() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "19": "  public void testStringJoinAdd$catena_19() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "20": "  public void testStringJoinAdd$catena_20() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "21": "  public void testStringJoinAdd$catena_21() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    // This can be folded but we don't currently.\n    try{ foldSame(\"x = [[1,2],[3,4]].join()\");                               }catch(Throwable __SHOULD_BE_IGNORED){} // would like: \"x = '1,2,3,4'\"\n  }",
                "22": "  public void testStringJoinAdd$catena_22() {\n    try{ fold(\"x = ['a', 'b', 'c'].join('')\", \"x = \\\"abc\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [].join(',')\", \"x = \\\"\\\"\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a'].join(',')\", \"x = \\\"a\\\"\");                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c'].join(',')\", \"x = \\\"a,b,c\\\"\");                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', foo, 'b', 'c'].join(',')\",\n        \"x = [\\\"a\\\",foo,\\\"b,c\\\"].join()\");                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [foo, 'a', 'b', 'c'].join(',')\",\n        \"x = [foo,\\\"a,b,c\\\"].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', 'b', 'c', foo].join(',')\",\n        \"x = [\\\"a,b,c\\\",foo].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works with numbers\n    try{ fold(\"x = ['a=', 5].join('')\", \"x = \\\"a=5\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(7)\", \"x = \\\"a75\\\"\");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Works on boolean\n    try{ fold(\"x = ['a=', false].join('')\", \"x = \\\"a=false\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(true)\", \"x = \\\"atrue5\\\"\");                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['a', '5'].join(false)\", \"x = \\\"afalse5\\\"\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // Only optimize if it's a size win.\n    try{ fold(\"x = ['a', '5', 'c'].join('a very very very long chain')\",\n         \"x = [\\\"a\\\",\\\"5\\\",\\\"c\\\"].join(\\\"a very very very long chain\\\")\");                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    // TODO(user): Its possible to fold this better.\n    try{ foldSame(\"x = ['', foo].join('-')\");                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ foldSame(\"x = ['', foo, ''].join()\");                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, ''].join(',')\",\n         \"x = [',', foo, ''].join()\");                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = ['', '', foo, '', ''].join(',')\",\n         \"x = [',', foo, ','].join()\");                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = ['', '', foo, '', '', bar].join(',')\",\n         \"x = [',', foo, ',', bar].join()\");                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2,3].join('abcdef')\",\n         \"x = '1abcdef2abcdef3'\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    try{ fold(\"x = [1,2].join()\", \"x = '1,2'\");                                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,''].join(',')\", \"x = ',,'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    try{ fold(\"x = [null,undefined,0].join(',')\", \"x = ',,0'\");                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    // This can be folded but we don't currently.\n    foldSame(\"x = [[1,2],[3,4]].join()\");                                    /***** ORIGINAL ASSERTION IS HERE *****/ // would like: \"x = '1,2,3,4'\"\n  }"
            }
        },
        "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testNoStringJoin": {
            "file_path": "test/com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java",
            "Instance": "Begin: Pos(77, 10)\nEnd: Pos(80, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_50/test//com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java\nName: testNoStringJoin\nChilds: [StatementAssertion<Begin: Pos(78, 5), End: Pos(78, 35)>,\nStatementAssertion<Begin: Pos(79, 5), End: Pos(79, 31)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_50/test//com/google/javascript/jscomp/PeepholeReplaceKnownMethodsTest.java",
            "name": "testNoStringJoin",
            "begin": "Pos(77, 10)",
            "end": "Pos(80, 3)",
            "begin_line_no": 77,
            "end_line_no": 80,
            "child": [
                "Begin: Pos(78, 5)\nEnd: Pos(78, 35)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(79, 5)\nEnd: Pos(79, 31)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testNoStringJoin$catena_0() {\n    foldSame(\"x = [].join(',',2)\");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ foldSame(\"x = [].join(f)\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testNoStringJoin$catena_1() {\n    try{ foldSame(\"x = [].join(',',2)\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    foldSame(\"x = [].join(f)\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testNoStringJoin$catena_0() {\n    foldSame(\"x = [].join(',',2)\");                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ foldSame(\"x = [].join(f)\");                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testNoStringJoin$catena_1() {\n    try{ foldSame(\"x = [].join(',',2)\");                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    foldSame(\"x = [].join(f)\");                                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        }
    },
    "100": {
        "failing_tests": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testNoStringJoin$catena_0"
        ]
    },
    "011": {
        "failing_tests": [
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_17",
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_5",
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_16",
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_15",
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_4",
            "com.google.javascript.jscomp.PeepholeReplaceKnownMethodsTest::testStringJoinAdd$catena_6"
        ]
    }
}