{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java",
            "from_line_no": 235,
            "to_line_no": 235,
            "replaced_with": "                final int p = agingA - MAXIMAL_AGING;\n                final double weightA = (1 << p) - 1;\n                final double weightB = p + 1;\n                targetY = (weightA * yA - weightB * REDUCTION_FACTOR * yB) / (weightA + weightB);\n",
            "replaced": "                targetY = -REDUCTION_FACTOR * yB;\n",
            "patch_type": "replace",
            "next_line_no": 236
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolver.java",
            "from_line_no": 238,
            "to_line_no": 238,
            "replaced_with": "                final int p = agingB - MAXIMAL_AGING;\n                final double weightA = p + 1;\n                final double weightB = (1 << p) - 1;\n                targetY = (weightB * yB - weightA * REDUCTION_FACTOR * yA) / (weightA + weightB);\n",
            "replaced": "                targetY = -REDUCTION_FACTOR * yA;\n",
            "patch_type": "replace",
            "next_line_no": 239
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest::testIssue716"
        ],
        "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest::testIssue716": {
            "file_path": "src/test/java/org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
            "Instance": "Begin: Pos(84, 5)\nEnd: Pos(97, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_40/src/test/java//org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java\nName: testIssue716\nChilds: [StatementAssertion<Begin: Pos(94, 9), End: Pos(94, 91)>,\nStatementAssertion<Begin: Pos(95, 9), End: Pos(95, 56)>,\nStatementAssertion<Begin: Pos(96, 9), End: Pos(96, 51)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_40/src/test/java//org/apache/commons/math/analysis/solvers/BracketingNthOrderBrentSolverTest.java",
            "name": "testIssue716",
            "begin": "Pos(84, 5)",
            "end": "Pos(97, 5)",
            "begin_line_no": 84,
            "end_line_no": 97,
            "child": [
                "Begin: Pos(94, 9)\nEnd: Pos(94, 91)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(95, 9)\nEnd: Pos(95, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(96, 9)\nEnd: Pos(96, 51)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testIssue716$catena_0() {\n        BracketingNthOrderBrentSolver solver =\n                new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-10, 1.0e-22, 5);\n        UnivariateFunction sharpTurn = new UnivariateFunction() {\n            public double value(double x) {\n                return (2 * x + 1) / (1.0e9 * (x + 1));\n            }\n        };\n        double result = solver.solve(100, sharpTurn, -0.9999999, 30, 15, AllowedSolution.RIGHT_SIDE);\n        Assert.assertEquals(0, sharpTurn.value(result), solver.getFunctionValueAccuracy());                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertTrue(sharpTurn.value(result) >= 0);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(-0.5, result, 1.0e-10);                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testIssue716$catena_1() {\n        BracketingNthOrderBrentSolver solver =\n                new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-10, 1.0e-22, 5);\n        UnivariateFunction sharpTurn = new UnivariateFunction() {\n            public double value(double x) {\n                return (2 * x + 1) / (1.0e9 * (x + 1));\n            }\n        };\n        double result = solver.solve(100, sharpTurn, -0.9999999, 30, 15, AllowedSolution.RIGHT_SIDE);\n        try{ Assert.assertEquals(0, sharpTurn.value(result), solver.getFunctionValueAccuracy());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertTrue(sharpTurn.value(result) >= 0);                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertEquals(-0.5, result, 1.0e-10);                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testIssue716$catena_2() {\n        BracketingNthOrderBrentSolver solver =\n                new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-10, 1.0e-22, 5);\n        UnivariateFunction sharpTurn = new UnivariateFunction() {\n            public double value(double x) {\n                return (2 * x + 1) / (1.0e9 * (x + 1));\n            }\n        };\n        double result = solver.solve(100, sharpTurn, -0.9999999, 30, 15, AllowedSolution.RIGHT_SIDE);\n        try{ Assert.assertEquals(0, sharpTurn.value(result), solver.getFunctionValueAccuracy());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertTrue(sharpTurn.value(result) >= 0);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertEquals(-0.5, result, 1.0e-10);                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testIssue716$catena_0() {\n        BracketingNthOrderBrentSolver solver =\n                new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-10, 1.0e-22, 5);\n        UnivariateFunction sharpTurn = new UnivariateFunction() {\n            public double value(double x) {\n                return (2 * x + 1) / (1.0e9 * (x + 1));\n            }\n        };\n        double result = solver.solve(100, sharpTurn, -0.9999999, 30, 15, AllowedSolution.RIGHT_SIDE);\n        Assert.assertEquals(0, sharpTurn.value(result), solver.getFunctionValueAccuracy());                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertTrue(sharpTurn.value(result) >= 0);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertEquals(-0.5, result, 1.0e-10);                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void testIssue716$catena_1() {\n        BracketingNthOrderBrentSolver solver =\n                new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-10, 1.0e-22, 5);\n        UnivariateFunction sharpTurn = new UnivariateFunction() {\n            public double value(double x) {\n                return (2 * x + 1) / (1.0e9 * (x + 1));\n            }\n        };\n        double result = solver.solve(100, sharpTurn, -0.9999999, 30, 15, AllowedSolution.RIGHT_SIDE);\n        try{ Assert.assertEquals(0, sharpTurn.value(result), solver.getFunctionValueAccuracy());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertTrue(sharpTurn.value(result) >= 0);                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertEquals(-0.5, result, 1.0e-10);                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void testIssue716$catena_2() {\n        BracketingNthOrderBrentSolver solver =\n                new BracketingNthOrderBrentSolver(1.0e-12, 1.0e-10, 1.0e-22, 5);\n        UnivariateFunction sharpTurn = new UnivariateFunction() {\n            public double value(double x) {\n                return (2 * x + 1) / (1.0e9 * (x + 1));\n            }\n        };\n        double result = solver.solve(100, sharpTurn, -0.9999999, 30, 15, AllowedSolution.RIGHT_SIDE);\n        try{ Assert.assertEquals(0, sharpTurn.value(result), solver.getFunctionValueAccuracy());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ Assert.assertTrue(sharpTurn.value(result) >= 0);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertEquals(-0.5, result, 1.0e-10);                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "10": {
        "failing_tests": [
            "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest::testIssue716$catena_0",
            "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest::testIssue716$catena_2",
            "org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolverTest::testIssue716$catena_1"
        ]
    }
}