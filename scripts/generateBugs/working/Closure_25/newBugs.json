{
    "original": {
        "num_of_hunks": 4,
        "0": {
            "file_name": "src/com/google/javascript/jscomp/TypeInference.java",
            "replaced_with": "    scope = traverseChildren(n, scope);\n",
            "patch_type": "insert",
            "next_line_no": 1036
        },
        "1": {
            "file_name": "src/com/google/javascript/jscomp/TypeInference.java",
            "from_line_no": 1038,
            "to_line_no": 1038,
            "replaced": "    scope = traverse(constructor, scope);\n",
            "patch_type": "delete",
            "next_line_no": 1039
        },
        "2": {
            "file_name": "src/com/google/javascript/jscomp/TypeInference.java",
            "replaced_with": "          backwardsInferenceFromCallSite(n, ct);\n",
            "patch_type": "insert",
            "next_line_no": 1055
        },
        "3": {
            "file_name": "src/com/google/javascript/jscomp/TypeInference.java",
            "from_line_no": 1059,
            "to_line_no": 1061,
            "replaced": "    for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {\n      scope = traverse(arg, scope);\n    }\n",
            "patch_type": "delete",
            "next_line_no": 1062
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew"
        ],
        "com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew": {
            "file_path": "test/com/google/javascript/jscomp/TypeInferenceTest.java",
            "Instance": "Begin: Pos(880, 10)\nEnd: Pos(891, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_25/test//com/google/javascript/jscomp/TypeInferenceTest.java\nName: testBackwardsInferenceNew\nChilds: [StatementAssertion<Begin: Pos(881, 5), End: Pos(888, 21)>,\nStatementAssertion<Begin: Pos(890, 5), End: Pos(890, 71)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_25/test//com/google/javascript/jscomp/TypeInferenceTest.java",
            "name": "testBackwardsInferenceNew",
            "begin": "Pos(880, 10)",
            "end": "Pos(891, 3)",
            "begin_line_no": 880,
            "end_line_no": 891,
            "child": [
                "Begin: Pos(881, 5)\nEnd: Pos(888, 21)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(890, 5)\nEnd: Pos(890, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testBackwardsInferenceNew$catena_0() {\n    inFunction(\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @param {{foo: (number|undefined)}} x\\n\" +\n        \" */\" +\n        \"function F(x) {}\" +\n        \"var y = {};\" +\n        \"new F(y);\");                                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertEquals(\"{foo: (number|undefined)}\", getType(\"y\").toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testBackwardsInferenceNew$catena_1() {\n    try{ inFunction(\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @param {{foo: (number|undefined)}} x\\n\" +\n        \" */\" +\n        \"function F(x) {}\" +\n        \"var y = {};\" +\n        \"new F(y);\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertEquals(\"{foo: (number|undefined)}\", getType(\"y\").toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testBackwardsInferenceNew$catena_0() {\n    inFunction(\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @param {{foo: (number|undefined)}} x\\n\" +\n        \" */\" +\n        \"function F(x) {}\" +\n        \"var y = {};\" +\n        \"new F(y);\");                                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n    try{ assertEquals(\"{foo: (number|undefined)}\", getType(\"y\").toString());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testBackwardsInferenceNew$catena_1() {\n    try{ inFunction(\n        \"/**\\n\" +\n        \" * @constructor\\n\" +\n        \" * @param {{foo: (number|undefined)}} x\\n\" +\n        \" */\" +\n        \"function F(x) {}\" +\n        \"var y = {};\" +\n        \"new F(y);\");                                                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    assertEquals(\"{foo: (number|undefined)}\", getType(\"y\").toString());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        }
    },
    "1010": {
        "failing_tests": [
            "com.google.javascript.jscomp.TypeInferenceTest::testBackwardsInferenceNew$catena_1"
        ]
    }
}