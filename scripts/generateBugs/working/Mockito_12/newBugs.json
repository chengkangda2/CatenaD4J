{
    "original": {
        "num_of_hunks": 3,
        "0": {
            "file_name": "src/org/mockito/internal/util/reflection/GenericMaster.java",
            "replaced_with": "            if (actual instanceof Class) {\n",
            "patch_type": "insert",
            "next_line_no": 20
        },
        "1": {
            "file_name": "src/org/mockito/internal/util/reflection/GenericMaster.java",
            "replaced_with": "            } else if (actual instanceof ParameterizedType) {\n",
            "patch_type": "insert",
            "next_line_no": 21
        },
        "2": {
            "file_name": "src/org/mockito/internal/util/reflection/GenericMaster.java",
            "replaced_with": "                return (Class) ((ParameterizedType) actual).getRawType();\n            }\n",
            "patch_type": "insert",
            "next_line_no": 22
        }
    },
    "method": {
        "failing_tests": [
            "org.mockito.internal.util.reflection.GenericMasterTest::shouldDealWithNestedGenerics",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldUseAnnotatedCaptor",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldUseCaptorInOrdinaryWay",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldCaptureGenericList",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldUseGenericlessAnnotatedCaptor",
            "org.mockitousage.annotation.CaptorAnnotationTest::shouldScreamWhenWrongTypeForCaptor",
            "org.mockitousage.annotation.CaptorAnnotationTest::testNormalUsage",
            "org.mockitousage.annotation.CaptorAnnotationTest::shouldScreamWhenMoreThanOneMockitoAnnotaton",
            "org.mockitousage.annotation.CaptorAnnotationTest::shouldScreamWhenInitializingCaptorsForNullClass",
            "org.mockitousage.annotation.CaptorAnnotationTest::shouldLookForAnnotatedCaptorsInSuperClasses"
        ],
        "org.mockito.internal.util.reflection.GenericMasterTest::shouldDealWithNestedGenerics": {
            "file_path": "test/org/mockito/internal/util/reflection/GenericMasterTest.java",
            "Instance": "Begin: Pos(36, 5)\nEnd: Pos(40, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockito/internal/util/reflection/GenericMasterTest.java\nName: shouldDealWithNestedGenerics\nChilds: [StatementAssertion<Begin: Pos(38, 9), End: Pos(38, 67)>,\nStatementAssertion<Begin: Pos(39, 9), End: Pos(39, 72)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockito/internal/util/reflection/GenericMasterTest.java",
            "name": "shouldDealWithNestedGenerics",
            "begin": "Pos(36, 5)",
            "end": "Pos(40, 5)",
            "begin_line_no": 36,
            "end_line_no": 40,
            "child": [
                "Begin: Pos(38, 9)\nEnd: Pos(38, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(39, 9)\nEnd: Pos(39, 72)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void shouldDealWithNestedGenerics$catena_0() throws Exception {\n        assertEquals(Set.class, m.getGenericType(field(\"nested\")));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Set.class, m.getGenericType(field(\"multiNested\")));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldDealWithNestedGenerics$catena_1() throws Exception {\n        try{ assertEquals(Set.class, m.getGenericType(field(\"nested\")));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Set.class, m.getGenericType(field(\"multiNested\")));                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void shouldDealWithNestedGenerics$catena_0() throws Exception {\n        assertEquals(Set.class, m.getGenericType(field(\"nested\")));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Set.class, m.getGenericType(field(\"multiNested\")));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void shouldDealWithNestedGenerics$catena_1() throws Exception {\n        try{ assertEquals(Set.class, m.getGenericType(field(\"nested\")));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Set.class, m.getGenericType(field(\"multiNested\")));                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldUseAnnotatedCaptor": {
            "file_path": "test/org/mockitousage/annotation/CaptorAnnotationBasicTest.java",
            "Instance": "Begin: Pos(64, 5)\nEnd: Pos(73, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationBasicTest.java\nName: shouldUseAnnotatedCaptor\nChilds: [StatementAssertion<Begin: Pos(70, 9), End: Pos(70, 56)>,\nStatementAssertion<Begin: Pos(71, 9), End: Pos(71, 57)>,\nStatementAssertion<Begin: Pos(72, 9), End: Pos(72, 65)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationBasicTest.java",
            "name": "shouldUseAnnotatedCaptor",
            "begin": "Pos(64, 5)",
            "end": "Pos(73, 5)",
            "begin_line_no": 64,
            "end_line_no": 73,
            "child": [
                "Begin: Pos(70, 9)\nEnd: Pos(70, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(71, 9)\nEnd: Pos(71, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(72, 9)\nEnd: Pos(72, 65)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void shouldUseAnnotatedCaptor$catena_0() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        verify(peopleRepository).save(captor.capture());                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Wes\", captor.getValue().getName());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Williams\", captor.getValue().getSurname());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldUseAnnotatedCaptor$catena_1() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        try{ verify(peopleRepository).save(captor.capture());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Wes\", captor.getValue().getName());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Williams\", captor.getValue().getSurname());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldUseAnnotatedCaptor$catena_2() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        try{ verify(peopleRepository).save(captor.capture());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Wes\", captor.getValue().getName());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Williams\", captor.getValue().getSurname());                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void shouldUseAnnotatedCaptor$catena_0() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        verify(peopleRepository).save(captor.capture());                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Wes\", captor.getValue().getName());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Williams\", captor.getValue().getSurname());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void shouldUseAnnotatedCaptor$catena_1() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        try{ verify(peopleRepository).save(captor.capture());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Wes\", captor.getValue().getName());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Williams\", captor.getValue().getSurname());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void shouldUseAnnotatedCaptor$catena_2() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        try{ verify(peopleRepository).save(captor.capture());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Wes\", captor.getValue().getName());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Williams\", captor.getValue().getSurname());                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldUseCaptorInOrdinaryWay": {
            "file_path": "test/org/mockitousage/annotation/CaptorAnnotationBasicTest.java",
            "Instance": "Begin: Pos(50, 5)\nEnd: Pos(60, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationBasicTest.java\nName: shouldUseCaptorInOrdinaryWay\nChilds: [StatementAssertion<Begin: Pos(57, 9), End: Pos(57, 56)>,\nStatementAssertion<Begin: Pos(58, 9), End: Pos(58, 57)>,\nStatementAssertion<Begin: Pos(59, 9), End: Pos(59, 65)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationBasicTest.java",
            "name": "shouldUseCaptorInOrdinaryWay",
            "begin": "Pos(50, 5)",
            "end": "Pos(60, 5)",
            "begin_line_no": 50,
            "end_line_no": 60,
            "child": [
                "Begin: Pos(57, 9)\nEnd: Pos(57, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(58, 9)\nEnd: Pos(58, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(59, 9)\nEnd: Pos(59, 65)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void shouldUseCaptorInOrdinaryWay$catena_0() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        ArgumentCaptor<Person> captor = ArgumentCaptor.forClass(Person.class);\n        verify(peopleRepository).save(captor.capture());                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Wes\", captor.getValue().getName());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Williams\", captor.getValue().getSurname());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldUseCaptorInOrdinaryWay$catena_1() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        ArgumentCaptor<Person> captor = ArgumentCaptor.forClass(Person.class);\n        try{ verify(peopleRepository).save(captor.capture());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Wes\", captor.getValue().getName());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Williams\", captor.getValue().getSurname());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldUseCaptorInOrdinaryWay$catena_2() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        ArgumentCaptor<Person> captor = ArgumentCaptor.forClass(Person.class);\n        try{ verify(peopleRepository).save(captor.capture());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Wes\", captor.getValue().getName());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Williams\", captor.getValue().getSurname());                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void shouldUseCaptorInOrdinaryWay$catena_0() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        ArgumentCaptor<Person> captor = ArgumentCaptor.forClass(Person.class);\n        verify(peopleRepository).save(captor.capture());                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Wes\", captor.getValue().getName());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Williams\", captor.getValue().getSurname());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void shouldUseCaptorInOrdinaryWay$catena_1() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        ArgumentCaptor<Person> captor = ArgumentCaptor.forClass(Person.class);\n        try{ verify(peopleRepository).save(captor.capture());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Wes\", captor.getValue().getName());                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Williams\", captor.getValue().getSurname());                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void shouldUseCaptorInOrdinaryWay$catena_2() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        ArgumentCaptor<Person> captor = ArgumentCaptor.forClass(Person.class);\n        try{ verify(peopleRepository).save(captor.capture());                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Wes\", captor.getValue().getName());                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Williams\", captor.getValue().getSurname());                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldCaptureGenericList": {
            "file_path": "test/org/mockitousage/annotation/CaptorAnnotationBasicTest.java",
            "Instance": "Begin: Pos(91, 5)\nEnd: Pos(102, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationBasicTest.java\nName: shouldCaptureGenericList\nChilds: [StatementAssertion<Begin: Pos(98, 9), End: Pos(98, 64)>,\nStatementAssertion<Begin: Pos(101, 9), End: Pos(101, 55)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationBasicTest.java",
            "name": "shouldCaptureGenericList",
            "begin": "Pos(91, 5)",
            "end": "Pos(102, 5)",
            "begin_line_no": 91,
            "end_line_no": 102,
            "child": [
                "Begin: Pos(98, 9)\nEnd: Pos(98, 64)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(101, 9)\nEnd: Pos(101, 55)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void shouldCaptureGenericList$catena_0() {\n        //given\n        List<String> list = new LinkedList<String>();\n        mock.listArgMethod(list);\n                \n        //when\n        verify(mock).listArgMethod(genericListCaptor.capture());                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        //then\n        try{ assertSame(list, genericListCaptor.getValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    } ",
                "    @Test\n    public void shouldCaptureGenericList$catena_1() {\n        //given\n        List<String> list = new LinkedList<String>();\n        mock.listArgMethod(list);\n                \n        //when\n        try{ verify(mock).listArgMethod(genericListCaptor.capture());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        //then\n        assertSame(list, genericListCaptor.getValue());                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    } "
            ],
            "func": {
                "0": "    @Test\n    public void shouldCaptureGenericList$catena_0() {\n        //given\n        List<String> list = new LinkedList<String>();\n        mock.listArgMethod(list);\n                \n        //when\n        verify(mock).listArgMethod(genericListCaptor.capture());                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        //then\n        try{ assertSame(list, genericListCaptor.getValue());                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    } ",
                "1": "    @Test\n    public void shouldCaptureGenericList$catena_1() {\n        //given\n        List<String> list = new LinkedList<String>();\n        mock.listArgMethod(list);\n                \n        //when\n        try{ verify(mock).listArgMethod(genericListCaptor.capture());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        //then\n        assertSame(list, genericListCaptor.getValue());                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    } "
            }
        },
        "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldUseGenericlessAnnotatedCaptor": {
            "file_path": "test/org/mockitousage/annotation/CaptorAnnotationBasicTest.java",
            "Instance": "Begin: Pos(77, 5)\nEnd: Pos(86, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationBasicTest.java\nName: shouldUseGenericlessAnnotatedCaptor\nChilds: [StatementAssertion<Begin: Pos(83, 9), End: Pos(83, 76)>,\nStatementAssertion<Begin: Pos(84, 9), End: Pos(84, 79)>,\nStatementAssertion<Begin: Pos(85, 9), End: Pos(85, 87)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationBasicTest.java",
            "name": "shouldUseGenericlessAnnotatedCaptor",
            "begin": "Pos(77, 5)",
            "end": "Pos(86, 5)",
            "begin_line_no": 77,
            "end_line_no": 86,
            "child": [
                "Begin: Pos(83, 9)\nEnd: Pos(83, 76)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(84, 9)\nEnd: Pos(84, 79)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(85, 9)\nEnd: Pos(85, 87)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void shouldUseGenericlessAnnotatedCaptor$catena_0() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        verify(peopleRepository).save((Person) genericLessCaptor.capture());                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Wes\", ((Person) genericLessCaptor.getValue()).getName());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Williams\", ((Person) genericLessCaptor.getValue()).getSurname());                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }  ",
                "    @Test\n    public void shouldUseGenericlessAnnotatedCaptor$catena_1() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        try{ verify(peopleRepository).save((Person) genericLessCaptor.capture());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Wes\", ((Person) genericLessCaptor.getValue()).getName());                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Williams\", ((Person) genericLessCaptor.getValue()).getSurname());                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }  ",
                "    @Test\n    public void shouldUseGenericlessAnnotatedCaptor$catena_2() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        try{ verify(peopleRepository).save((Person) genericLessCaptor.capture());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Wes\", ((Person) genericLessCaptor.getValue()).getName());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Williams\", ((Person) genericLessCaptor.getValue()).getSurname());                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }  "
            ],
            "func": {
                "0": "    @Test\n    public void shouldUseGenericlessAnnotatedCaptor$catena_0() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        verify(peopleRepository).save((Person) genericLessCaptor.capture());                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Wes\", ((Person) genericLessCaptor.getValue()).getName());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Williams\", ((Person) genericLessCaptor.getValue()).getSurname());                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }  ",
                "1": "    @Test\n    public void shouldUseGenericlessAnnotatedCaptor$catena_1() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        try{ verify(peopleRepository).save((Person) genericLessCaptor.capture());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Wes\", ((Person) genericLessCaptor.getValue()).getName());                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Williams\", ((Person) genericLessCaptor.getValue()).getSurname());                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }  ",
                "2": "    @Test\n    public void shouldUseGenericlessAnnotatedCaptor$catena_2() {\n        //when\n        createPerson(\"Wes\", \"Williams\");\n        \n        //then\n        try{ verify(peopleRepository).save((Person) genericLessCaptor.capture());                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Wes\", ((Person) genericLessCaptor.getValue()).getName());                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Williams\", ((Person) genericLessCaptor.getValue()).getSurname());                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }  "
            }
        },
        "org.mockitousage.annotation.CaptorAnnotationTest::shouldScreamWhenWrongTypeForCaptor": {
            "file_path": "test/org/mockitousage/annotation/CaptorAnnotationTest.java",
            "Instance": "Begin: Pos(78, 5)\nEnd: Pos(84, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationTest.java\nName: shouldScreamWhenWrongTypeForCaptor\nChilds: [StatementAssertion<Begin: Pos(82, 13), End: Pos(82, 19)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationTest.java",
            "name": "shouldScreamWhenWrongTypeForCaptor",
            "begin": "Pos(78, 5)",
            "end": "Pos(84, 5)",
            "begin_line_no": 78,
            "end_line_no": 84,
            "child": [
                "Begin: Pos(82, 13)\nEnd: Pos(82, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.mockitousage.annotation.CaptorAnnotationTest::testNormalUsage": {
            "file_path": "test/org/mockitousage/annotation/CaptorAnnotationTest.java",
            "check": [
                "Use pattern matching: mockInterface.testMe",
                "Use pattern matching: None.testMe",
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(49, 5)\nEnd: Pos(71, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationTest.java\nName: testNormalUsage\nChilds: [StatementAssertion<Begin: Pos(55, 9), End: Pos(55, 35)>,\nStatementAssertion<Begin: Pos(56, 9), End: Pos(56, 38)>,\nStatementAssertion<Begin: Pos(57, 9), End: Pos(57, 49)>,\nStatementAssertion<Begin: Pos(58, 9), End: Pos(58, 29)>,\nStatementAssertion<Begin: Pos(64, 9), End: Pos(64, 70)>,\nStatementAssertion<Begin: Pos(66, 9), End: Pos(66, 94)>,\nStatementAssertion<Begin: Pos(68, 9), End: Pos(68, 64)>,\nStatementAssertion<Begin: Pos(69, 9), End: Pos(69, 70)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationTest.java",
            "name": "testNormalUsage",
            "begin": "Pos(49, 5)",
            "end": "Pos(71, 5)",
            "begin_line_no": 49,
            "end_line_no": 71,
            "child": [
                "Begin: Pos(55, 9)\nEnd: Pos(55, 35)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(56, 9)\nEnd: Pos(56, 38)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(57, 9)\nEnd: Pos(57, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(58, 9)\nEnd: Pos(58, 29)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(64, 9)\nEnd: Pos(64, 70)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(66, 9)\nEnd: Pos(66, 94)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(68, 9)\nEnd: Pos(68, 64)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(69, 9)\nEnd: Pos(69, 70)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testNormalUsage$catena_0() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        assertNotNull(finalCaptor);                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNotNull(genericsCaptor);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(nonGenericCaptorIsAllowed);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(notAMock);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        try{ mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(argForFinalCaptor, finalCaptor.getValue());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(argForGenericsCaptor, genericsCaptor.getValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void testNormalUsage$catena_1() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        try{ assertNotNull(finalCaptor);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNotNull(genericsCaptor);                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNotNull(nonGenericCaptorIsAllowed);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(notAMock);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        try{ mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(argForFinalCaptor, finalCaptor.getValue());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(argForGenericsCaptor, genericsCaptor.getValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void testNormalUsage$catena_2() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        try{ assertNotNull(finalCaptor);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(genericsCaptor);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNotNull(nonGenericCaptorIsAllowed);                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNull(notAMock);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        try{ mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(argForFinalCaptor, finalCaptor.getValue());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(argForGenericsCaptor, genericsCaptor.getValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void testNormalUsage$catena_3() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        try{ assertNotNull(finalCaptor);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(genericsCaptor);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(nonGenericCaptorIsAllowed);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNull(notAMock);                                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        try{ mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(argForFinalCaptor, finalCaptor.getValue());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(argForGenericsCaptor, genericsCaptor.getValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void testNormalUsage$catena_4() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        try{ assertNotNull(finalCaptor);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(genericsCaptor);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(nonGenericCaptorIsAllowed);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(notAMock);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(argForFinalCaptor, finalCaptor.getValue());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(argForGenericsCaptor, genericsCaptor.getValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void testNormalUsage$catena_5() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        try{ assertNotNull(finalCaptor);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(genericsCaptor);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(nonGenericCaptorIsAllowed);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(notAMock);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        try{ mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(argForFinalCaptor, finalCaptor.getValue());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(argForGenericsCaptor, genericsCaptor.getValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void testNormalUsage$catena_6() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        try{ assertNotNull(finalCaptor);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(genericsCaptor);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(nonGenericCaptorIsAllowed);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(notAMock);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        try{ mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(argForFinalCaptor, finalCaptor.getValue());                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(argForGenericsCaptor, genericsCaptor.getValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void testNormalUsage$catena_7() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        try{ assertNotNull(finalCaptor);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(genericsCaptor);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(nonGenericCaptorIsAllowed);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(notAMock);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        try{ mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(argForFinalCaptor, finalCaptor.getValue());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(argForGenericsCaptor, genericsCaptor.getValue());                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testNormalUsage$catena_0() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        assertNotNull(finalCaptor);                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNotNull(genericsCaptor);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(nonGenericCaptorIsAllowed);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(notAMock);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        try{ mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(argForFinalCaptor, finalCaptor.getValue());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(argForGenericsCaptor, genericsCaptor.getValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "1": "    @Test\n    public void testNormalUsage$catena_1() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        try{ assertNotNull(finalCaptor);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNotNull(genericsCaptor);                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNotNull(nonGenericCaptorIsAllowed);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(notAMock);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        try{ mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(argForFinalCaptor, finalCaptor.getValue());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(argForGenericsCaptor, genericsCaptor.getValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "2": "    @Test\n    public void testNormalUsage$catena_2() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        try{ assertNotNull(finalCaptor);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(genericsCaptor);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNotNull(nonGenericCaptorIsAllowed);                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNull(notAMock);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        try{ mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(argForFinalCaptor, finalCaptor.getValue());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(argForGenericsCaptor, genericsCaptor.getValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "3": "    @Test\n    public void testNormalUsage$catena_3() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        try{ assertNotNull(finalCaptor);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(genericsCaptor);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(nonGenericCaptorIsAllowed);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNull(notAMock);                                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        try{ mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(argForFinalCaptor, finalCaptor.getValue());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(argForGenericsCaptor, genericsCaptor.getValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "4": "    @Test\n    public void testNormalUsage$catena_4() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        try{ assertNotNull(finalCaptor);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(genericsCaptor);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(nonGenericCaptorIsAllowed);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(notAMock);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(argForFinalCaptor, finalCaptor.getValue());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(argForGenericsCaptor, genericsCaptor.getValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "5": "    @Test\n    public void testNormalUsage$catena_5() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        try{ assertNotNull(finalCaptor);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(genericsCaptor);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(nonGenericCaptorIsAllowed);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(notAMock);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        try{ mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());              /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(argForFinalCaptor, finalCaptor.getValue());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(argForGenericsCaptor, genericsCaptor.getValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "6": "    @Test\n    public void testNormalUsage$catena_6() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        try{ assertNotNull(finalCaptor);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(genericsCaptor);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(nonGenericCaptorIsAllowed);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(notAMock);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        try{ mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(argForFinalCaptor, finalCaptor.getValue());                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(argForGenericsCaptor, genericsCaptor.getValue());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "7": "    @Test\n    public void testNormalUsage$catena_7() {\n\n        MockitoAnnotations.initMocks(this);\n\n        // check if assigned correctly\n        try{ assertNotNull(finalCaptor);                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(genericsCaptor);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(nonGenericCaptorIsAllowed);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(notAMock);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // use captors in the field to be sure they are cool\n        String argForFinalCaptor = \"Hello\";\n        ArrayList<List<String>> argForGenericsCaptor = new ArrayList<List<String>>();\n\n        try{ mockInterface.testMe(argForFinalCaptor, argForGenericsCaptor);                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ Mockito.verify(mockInterface).testMe(finalCaptor.capture(), genericsCaptor.capture());         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(argForFinalCaptor, finalCaptor.getValue());                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(argForGenericsCaptor, genericsCaptor.getValue());                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            }
        },
        "org.mockitousage.annotation.CaptorAnnotationTest::shouldScreamWhenMoreThanOneMockitoAnnotaton": {
            "file_path": "test/org/mockitousage/annotation/CaptorAnnotationTest.java",
            "Instance": "Begin: Pos(92, 5)\nEnd: Pos(101, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationTest.java\nName: shouldScreamWhenMoreThanOneMockitoAnnotaton\nChilds: [StatementAssertion<Begin: Pos(96, 13), End: Pos(96, 19)>,\nStatementAssertion<Begin: Pos(98, 13), End: Pos(98, 67)>,\nStatementAssertion<Begin: Pos(99, 13), End: Pos(99, 75)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationTest.java",
            "name": "shouldScreamWhenMoreThanOneMockitoAnnotaton",
            "begin": "Pos(92, 5)",
            "end": "Pos(101, 5)",
            "begin_line_no": 92,
            "end_line_no": 101,
            "child": [
                "Begin: Pos(96, 13)\nEnd: Pos(96, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(98, 13)\nEnd: Pos(98, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(99, 13)\nEnd: Pos(99, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void shouldScreamWhenMoreThanOneMockitoAnnotaton$catena_0() {\n        try {\n            MockitoAnnotations.initMocks(new ToManyAnnotations());\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (MockitoException e) {\n            try{ assertContains(\"missingGenericsField\", e.getMessage());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertContains(\"multiple Mockito annotations\", e.getMessage());                }catch(Throwable __SHOULD_BE_IGNORED){}            \n        }\n    }",
                "    @Test\n    public void shouldScreamWhenMoreThanOneMockitoAnnotaton$catena_1() {\n        try {\n            MockitoAnnotations.initMocks(new ToManyAnnotations());\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (MockitoException e) {\n            assertContains(\"missingGenericsField\", e.getMessage());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertContains(\"multiple Mockito annotations\", e.getMessage());                }catch(Throwable __SHOULD_BE_IGNORED){}            \n        }\n    }",
                "    @Test\n    public void shouldScreamWhenMoreThanOneMockitoAnnotaton$catena_2() {\n        try {\n            MockitoAnnotations.initMocks(new ToManyAnnotations());\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (MockitoException e) {\n            try{ assertContains(\"missingGenericsField\", e.getMessage());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertContains(\"multiple Mockito annotations\", e.getMessage());                     /***** ORIGINAL ASSERTION IS HERE *****/            \n        }\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void shouldScreamWhenMoreThanOneMockitoAnnotaton$catena_0() {\n        try {\n            MockitoAnnotations.initMocks(new ToManyAnnotations());\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (MockitoException e) {\n            try{ assertContains(\"missingGenericsField\", e.getMessage());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertContains(\"multiple Mockito annotations\", e.getMessage());                }catch(Throwable __SHOULD_BE_IGNORED){}            \n        }\n    }",
                "1": "    @Test\n    public void shouldScreamWhenMoreThanOneMockitoAnnotaton$catena_1() {\n        try {\n            MockitoAnnotations.initMocks(new ToManyAnnotations());\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (MockitoException e) {\n            assertContains(\"missingGenericsField\", e.getMessage());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertContains(\"multiple Mockito annotations\", e.getMessage());                }catch(Throwable __SHOULD_BE_IGNORED){}            \n        }\n    }",
                "2": "    @Test\n    public void shouldScreamWhenMoreThanOneMockitoAnnotaton$catena_2() {\n        try {\n            MockitoAnnotations.initMocks(new ToManyAnnotations());\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (MockitoException e) {\n            try{ assertContains(\"missingGenericsField\", e.getMessage());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertContains(\"multiple Mockito annotations\", e.getMessage());                     /***** ORIGINAL ASSERTION IS HERE *****/            \n        }\n    }"
            }
        },
        "org.mockitousage.annotation.CaptorAnnotationTest::shouldScreamWhenInitializingCaptorsForNullClass": {
            "file_path": "test/org/mockitousage/annotation/CaptorAnnotationTest.java",
            "Instance": "Begin: Pos(103, 5)\nEnd: Pos(110, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationTest.java\nName: shouldScreamWhenInitializingCaptorsForNullClass\nChilds: [StatementAssertion<Begin: Pos(107, 13), End: Pos(107, 19)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationTest.java",
            "name": "shouldScreamWhenInitializingCaptorsForNullClass",
            "begin": "Pos(103, 5)",
            "end": "Pos(110, 5)",
            "begin_line_no": 103,
            "end_line_no": 110,
            "child": [
                "Begin: Pos(107, 13)\nEnd: Pos(107, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.mockitousage.annotation.CaptorAnnotationTest::shouldLookForAnnotatedCaptorsInSuperClasses": {
            "file_path": "test/org/mockitousage/annotation/CaptorAnnotationTest.java",
            "Instance": "Begin: Pos(112, 5)\nEnd: Pos(120, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationTest.java\nName: shouldLookForAnnotatedCaptorsInSuperClasses\nChilds: [StatementAssertion<Begin: Pos(117, 9), End: Pos(117, 39)>,\nStatementAssertion<Begin: Pos(118, 9), End: Pos(118, 43)>,\nStatementAssertion<Begin: Pos(119, 9), End: Pos(119, 48)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_12/test//org/mockitousage/annotation/CaptorAnnotationTest.java",
            "name": "shouldLookForAnnotatedCaptorsInSuperClasses",
            "begin": "Pos(112, 5)",
            "end": "Pos(120, 5)",
            "begin_line_no": 112,
            "end_line_no": 120,
            "child": [
                "Begin: Pos(117, 9)\nEnd: Pos(117, 39)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(118, 9)\nEnd: Pos(118, 43)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(119, 9)\nEnd: Pos(119, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void shouldLookForAnnotatedCaptorsInSuperClasses$catena_0() throws Exception {\n        Sub sub = new Sub();\n        MockitoAnnotations.initMocks(sub);\n\n        assertNotNull(sub.getCaptor());                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNotNull(sub.getBaseCaptor());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(sub.getSuperBaseCaptor());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldLookForAnnotatedCaptorsInSuperClasses$catena_1() throws Exception {\n        Sub sub = new Sub();\n        MockitoAnnotations.initMocks(sub);\n\n        try{ assertNotNull(sub.getCaptor());                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNotNull(sub.getBaseCaptor());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNotNull(sub.getSuperBaseCaptor());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void shouldLookForAnnotatedCaptorsInSuperClasses$catena_2() throws Exception {\n        Sub sub = new Sub();\n        MockitoAnnotations.initMocks(sub);\n\n        try{ assertNotNull(sub.getCaptor());                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(sub.getBaseCaptor());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNotNull(sub.getSuperBaseCaptor());                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void shouldLookForAnnotatedCaptorsInSuperClasses$catena_0() throws Exception {\n        Sub sub = new Sub();\n        MockitoAnnotations.initMocks(sub);\n\n        assertNotNull(sub.getCaptor());                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNotNull(sub.getBaseCaptor());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(sub.getSuperBaseCaptor());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void shouldLookForAnnotatedCaptorsInSuperClasses$catena_1() throws Exception {\n        Sub sub = new Sub();\n        MockitoAnnotations.initMocks(sub);\n\n        try{ assertNotNull(sub.getCaptor());                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNotNull(sub.getBaseCaptor());                                                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNotNull(sub.getSuperBaseCaptor());                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void shouldLookForAnnotatedCaptorsInSuperClasses$catena_2() throws Exception {\n        Sub sub = new Sub();\n        MockitoAnnotations.initMocks(sub);\n\n        try{ assertNotNull(sub.getCaptor());                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(sub.getBaseCaptor());                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNotNull(sub.getSuperBaseCaptor());                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "111": {
        "failing_tests": [
            "org.mockitousage.annotation.CaptorAnnotationTest::shouldLookForAnnotatedCaptorsInSuperClasses$catena_1",
            "org.mockitousage.annotation.CaptorAnnotationTest::shouldScreamWhenWrongTypeForCaptor",
            "org.mockitousage.annotation.CaptorAnnotationTest::testNormalUsage$catena_2",
            "org.mockitousage.annotation.CaptorAnnotationTest::testNormalUsage$catena_6",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldUseGenericlessAnnotatedCaptor$catena_2",
            "org.mockitousage.annotation.CaptorAnnotationTest::testNormalUsage$catena_1",
            "org.mockitousage.annotation.CaptorAnnotationTest::shouldScreamWhenMoreThanOneMockitoAnnotaton$catena_0",
            "org.mockitousage.annotation.CaptorAnnotationTest::testNormalUsage$catena_0",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldUseAnnotatedCaptor$catena_0",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldUseCaptorInOrdinaryWay$catena_2",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldUseCaptorInOrdinaryWay$catena_1",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldUseGenericlessAnnotatedCaptor$catena_1",
            "org.mockito.internal.util.reflection.GenericMasterTest::shouldDealWithNestedGenerics$catena_1",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldUseAnnotatedCaptor$catena_2",
            "org.mockitousage.annotation.CaptorAnnotationTest::testNormalUsage$catena_5",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldUseAnnotatedCaptor$catena_1",
            "org.mockitousage.annotation.CaptorAnnotationTest::shouldScreamWhenInitializingCaptorsForNullClass",
            "org.mockitousage.annotation.CaptorAnnotationTest::testNormalUsage$catena_4",
            "org.mockitousage.annotation.CaptorAnnotationTest::shouldLookForAnnotatedCaptorsInSuperClasses$catena_2",
            "org.mockitousage.annotation.CaptorAnnotationTest::shouldScreamWhenMoreThanOneMockitoAnnotaton$catena_2",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldUseGenericlessAnnotatedCaptor$catena_0",
            "org.mockitousage.annotation.CaptorAnnotationTest::testNormalUsage$catena_3",
            "org.mockito.internal.util.reflection.GenericMasterTest::shouldDealWithNestedGenerics$catena_0",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldCaptureGenericList$catena_1",
            "org.mockitousage.annotation.CaptorAnnotationTest::shouldLookForAnnotatedCaptorsInSuperClasses$catena_0",
            "org.mockitousage.annotation.CaptorAnnotationTest::testNormalUsage$catena_7",
            "org.mockitousage.annotation.CaptorAnnotationTest::shouldScreamWhenMoreThanOneMockitoAnnotaton$catena_1",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldUseCaptorInOrdinaryWay$catena_0",
            "org.mockitousage.annotation.CaptorAnnotationBasicTest::shouldCaptureGenericList$catena_0"
        ]
    }
}