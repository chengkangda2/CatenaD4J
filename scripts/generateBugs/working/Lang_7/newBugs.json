{
    "original": {
        "num_of_hunks": 3,
        "0": {
            "file_name": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
            "from_line_no": 452,
            "to_line_no": 454,
            "replaced": "        if (str.startsWith(\"--\")) {\n            return null;\n        }\n",
            "patch_type": "delete",
            "next_line_no": 455
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
            "replaced_with": "        if (str.trim().startsWith(\"--\")) {\n",
            "patch_type": "insert",
            "next_line_no": 721
        },
        "2": {
            "file_name": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
            "replaced_with": "            throw new NumberFormatException(str + \" is not a valid number.\");\n        }\n",
            "patch_type": "insert",
            "next_line_no": 725
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber"
        ],
        "org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber": {
            "file_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
            "Instance": "Begin: Pos(184, 5)\nEnd: Pos(246, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_7/src/test/java//org/apache/commons/lang3/math/NumberUtilsTest.java\nName: testCreateNumber\nChilds: [StatementAssertion<Begin: Pos(187, 9), End: Pos(187, 115)>,\nStatementAssertion<Begin: Pos(188, 9), End: Pos(188, 115)>,\nStatementAssertion<Begin: Pos(189, 9), End: Pos(189, 117)>,\nStatementAssertion<Begin: Pos(190, 9), End: Pos(190, 117)>,\nStatementAssertion<Begin: Pos(191, 9), End: Pos(191, 116)>,\nStatementAssertion<Begin: Pos(192, 9), End: Pos(192, 116)>,\nStatementAssertion<Begin: Pos(193, 9), End: Pos(194, 41)>,\nStatementAssertion<Begin: Pos(195, 9), End: Pos(195, 111)>,\nStatementAssertion<Begin: Pos(196, 9), End: Pos(196, 111)>,\nStatementAssertion<Begin: Pos(197, 9), End: Pos(197, 117)>,\nStatementAssertion<Begin: Pos(198, 9), End: Pos(198, 117)>,\nStatementAssertion<Begin: Pos(199, 9), End: Pos(199, 110)>,\nStatementAssertion<Begin: Pos(200, 9), End: Pos(200, 110)>,\nStatementAssertion<Begin: Pos(201, 9), End: Pos(201, 113)>,\nStatementAssertion<Begin: Pos(202, 9), End: Pos(202, 113)>,\nStatementAssertion<Begin: Pos(203, 9), End: Pos(203, 119)>,\nStatementAssertion<Begin: Pos(204, 9), End: Pos(204, 116)>,\nStatementAssertion<Begin: Pos(205, 9), End: Pos(205, 121)>,\nStatementAssertion<Begin: Pos(206, 9), End: Pos(206, 121)>,\nStatementAssertion<Begin: Pos(207, 9), End: Pos(207, 88)>,\nStatementAssertion<Begin: Pos(208, 9), End: Pos(209, 56)>,\nStatementAssertion<Begin: Pos(213, 13), End: Pos(214, 48)>,\nStatementAssertion<Begin: Pos(216, 9), End: Pos(217, 63)>,\nStatementAssertion<Begin: Pos(218, 9), End: Pos(219, 57)>,\nStatementAssertion<Begin: Pos(220, 9), End: Pos(221, 54)>,\nStatementAssertion<Begin: Pos(224, 9), End: Pos(224, 114)>,\nStatementAssertion<Begin: Pos(227, 9), End: Pos(227, 80)>,\nStatementAssertion<Begin: Pos(230, 9), End: Pos(231, 58)>,\nStatementAssertion<Begin: Pos(236, 9), End: Pos(236, 57)>,\nStatementAssertion<Begin: Pos(237, 9), End: Pos(237, 30)>,\nStatementAssertion<Begin: Pos(242, 13), End: Pos(242, 51)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_7/src/test/java//org/apache/commons/lang3/math/NumberUtilsTest.java",
            "name": "testCreateNumber",
            "begin": "Pos(184, 5)",
            "end": "Pos(246, 5)",
            "begin_line_no": 184,
            "end_line_no": 246,
            "child": [
                "Begin: Pos(187, 9)\nEnd: Pos(187, 115)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(188, 9)\nEnd: Pos(188, 115)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(189, 9)\nEnd: Pos(189, 117)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(190, 9)\nEnd: Pos(190, 117)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(191, 9)\nEnd: Pos(191, 116)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(192, 9)\nEnd: Pos(192, 116)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(193, 9)\nEnd: Pos(194, 41)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(195, 9)\nEnd: Pos(195, 111)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(196, 9)\nEnd: Pos(196, 111)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(197, 9)\nEnd: Pos(197, 117)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(198, 9)\nEnd: Pos(198, 117)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(199, 9)\nEnd: Pos(199, 110)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(200, 9)\nEnd: Pos(200, 110)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(201, 9)\nEnd: Pos(201, 113)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(202, 9)\nEnd: Pos(202, 113)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(203, 9)\nEnd: Pos(203, 119)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(204, 9)\nEnd: Pos(204, 116)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(205, 9)\nEnd: Pos(205, 121)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(206, 9)\nEnd: Pos(206, 121)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(207, 9)\nEnd: Pos(207, 88)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(208, 9)\nEnd: Pos(209, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(213, 13)\nEnd: Pos(214, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(216, 9)\nEnd: Pos(217, 63)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(218, 9)\nEnd: Pos(219, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(220, 9)\nEnd: Pos(221, 54)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(224, 9)\nEnd: Pos(224, 114)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(227, 9)\nEnd: Pos(227, 80)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(230, 9)\nEnd: Pos(231, 58)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(236, 9)\nEnd: Pos(236, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(237, 9)\nEnd: Pos(237, 30)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(242, 13)\nEnd: Pos(242, 51)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testCreateNumber$catena_0() {\n        // a lot of things can go wrong\n        assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_1() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_2() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_3() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_4() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_5() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_6() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_7() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_8() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_9() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_10() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_11() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_12() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_13() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_14() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_15() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_16() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_17() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_18() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_19() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_20() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_21() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_22() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_23() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_24() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_25() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_26() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_27() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_28() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        assertEquals(BigDecimal.class,bigNum.getClass());                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_29() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNotNull(bigNum);                                                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "    @Test\n    public void testCreateNumber$catena_30() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            fail(\"Expected NumberFormatException\");                                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testCreateNumber$catena_0() {\n        // a lot of things can go wrong\n        assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "1": "    @Test\n    public void testCreateNumber$catena_1() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "2": "    @Test\n    public void testCreateNumber$catena_2() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "3": "    @Test\n    public void testCreateNumber$catena_3() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "4": "    @Test\n    public void testCreateNumber$catena_4() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "5": "    @Test\n    public void testCreateNumber$catena_5() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "6": "    @Test\n    public void testCreateNumber$catena_6() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "7": "    @Test\n    public void testCreateNumber$catena_7() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "8": "    @Test\n    public void testCreateNumber$catena_8() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "9": "    @Test\n    public void testCreateNumber$catena_9() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "10": "    @Test\n    public void testCreateNumber$catena_10() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "11": "    @Test\n    public void testCreateNumber$catena_11() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "12": "    @Test\n    public void testCreateNumber$catena_12() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "13": "    @Test\n    public void testCreateNumber$catena_13() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "14": "    @Test\n    public void testCreateNumber$catena_14() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "15": "    @Test\n    public void testCreateNumber$catena_15() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "16": "    @Test\n    public void testCreateNumber$catena_16() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "17": "    @Test\n    public void testCreateNumber$catena_17() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "18": "    @Test\n    public void testCreateNumber$catena_18() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "19": "    @Test\n    public void testCreateNumber$catena_19() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "20": "    @Test\n    public void testCreateNumber$catena_20() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "21": "    @Test\n    public void testCreateNumber$catena_21() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "22": "    @Test\n    public void testCreateNumber$catena_22() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "23": "    @Test\n    public void testCreateNumber$catena_23() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "24": "    @Test\n    public void testCreateNumber$catena_24() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "25": "    @Test\n    public void testCreateNumber$catena_25() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "26": "    @Test\n    public void testCreateNumber$catena_26() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "27": "    @Test\n    public void testCreateNumber$catena_27() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "28": "    @Test\n    public void testCreateNumber$catena_28() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        assertEquals(BigDecimal.class,bigNum.getClass());                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "29": "    @Test\n    public void testCreateNumber$catena_29() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNotNull(bigNum);                                                                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            try{ fail(\"Expected NumberFormatException\");                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }",
                "30": "    @Test\n    public void testCreateNumber$catena_30() {\n        // a lot of things can go wrong\n        try{ assertEquals(\"createNumber(String) 1 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 2 failed\", Integer.valueOf(\"12345\"), NumberUtils.createNumber(\"12345\"));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5D\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 3 failed\", Double.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5d\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5F\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 4 failed\", Float.valueOf(\"1234.5\"), NumberUtils.createNumber(\"1234.5f\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 5 failed\", Long.valueOf(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(\"\"\n            + (Integer.MAX_VALUE + 1L)));                                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345L\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 6 failed\", Long.valueOf(12345), NumberUtils.createNumber(\"12345l\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 7 failed\", Float.valueOf(\"-1234.5\"), NumberUtils.createNumber(\"-1234.5\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 8 failed\", Integer.valueOf(\"-12345\"), NumberUtils.createNumber(\"-12345\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9a failed\", 0xFADE == NumberUtils.createNumber(\"0xFADE\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 9b failed\", 0xFADE == NumberUtils.createNumber(\"0Xfade\").intValue());               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10a failed\", -0xFADE == NumberUtils.createNumber(\"-0xFADE\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(\"createNumber(String) 10b failed\", -0xFADE == NumberUtils.createNumber(\"-0Xfade\").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 11 failed\", Double.valueOf(\"1.1E200\"), NumberUtils.createNumber(\"1.1E200\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 12 failed\", Float.valueOf(\"1.1E20\"), NumberUtils.createNumber(\"1.1E20\"));         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 13 failed\", Double.valueOf(\"-1.1E200\"), NumberUtils.createNumber(\"-1.1E200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 14 failed\", Double.valueOf(\"1.1E-200\"), NumberUtils.createNumber(\"1.1E-200\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(null) failed\", null, NumberUtils.createNumber(null));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) failed\", new BigInteger(\"12345678901234567890\"), NumberUtils\n                .createNumber(\"12345678901234567890L\"));                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2\n        if (SystemUtils.isJavaVersionAtLeast(JAVA_1_3)) {\n            try{ assertEquals(\"createNumber(String) 15 failed\", new BigDecimal(\"1.1E-700\"), NumberUtils\n                    .createNumber(\"1.1E-700F\"));                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        try{ assertEquals(\"createNumber(String) 16 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE + \"L\"));                                                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 17 failed\", Long.valueOf(\"10\" + Integer.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Integer.MAX_VALUE));                                                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"createNumber(String) 18 failed\", new BigInteger(\"10\" + Long.MAX_VALUE), NumberUtils\n                .createNumber(\"10\" + Long.MAX_VALUE));                                                                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-521\n        try{ assertEquals(\"createNumber(String) LANG-521 failed\", Float.valueOf(\"2.\"), NumberUtils.createNumber(\"2.\"));           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-638\n        try{ assertFalse(\"createNumber(String) succeeded\", checkCreateNumber(\"1eE\"));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // LANG-693\n        try{ assertEquals(\"createNumber(String) LANG-693 failed\", Double.valueOf(Double.MAX_VALUE), NumberUtils\n                    .createNumber(\"\" + Double.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // LANG-822\n        // ensure that the underlying negative number would create a BigDecimal\n        final Number bigNum = NumberUtils.createNumber(\"-1.1E-700F\");\n        try{ assertEquals(BigDecimal.class,bigNum.getClass());                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNotNull(bigNum);                                                                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Check that the code fails to create a valid number when preceeded by -- rather than -\n        try {\n            NumberUtils.createNumber(\"--1.1E-700F\");\n            fail(\"Expected NumberFormatException\");                                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (NumberFormatException nfe) {\n            // expected\n        }\n    }"
            }
        }
    }
}