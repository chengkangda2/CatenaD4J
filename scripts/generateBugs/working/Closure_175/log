---
Begin generate bug_id: Closure_175
num_of_hunks: 7
timeout for running: 3600
use working dir: ./working/data/Closure_175
Try to checkout Closure_175
build dir: ['./working/data/Closure_175/build/classes', './working/data/Closure_175/build/test']
init FileManager
trace file: src/com/google/javascript/jscomp/FunctionInjector.java
trying to replace old failing tests
new test num: 0
ori test num: 5
pattern: 0000000
patches are written to file
running tests...
used time: Finished in 307.65 seconds
Failing tests: 5
	com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101a
	com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101b
	com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining10
	com.google.javascript.jscomp.InlineFunctionsTest::testIssue1101
	com.google.javascript.jscomp.InlineFunctionsTest::testInlineMutableArgsReferencedOnce
processed: 0000000
pattern: 0000001
try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000001
pattern: 0000010
try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000010
pattern: 0000100
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000100
pattern: 0001000
try to fix hunk: 3
delete from 695 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001000
pattern: 0010000
try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010000
pattern: 0100000
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100000
pattern: 1000000
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

patches are written to file
running tests...
used time: Finished in 291.68 seconds
Failing tests: 5
	com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101a
	com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101b
	com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining10
	com.google.javascript.jscomp.InlineFunctionsTest::testIssue1101
	com.google.javascript.jscomp.InlineFunctionsTest::testInlineMutableArgsReferencedOnce
No new failing tests but only 1 hunk
processed: 1000000
pattern: 0000011
try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000011
pattern: 0000101
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000101
pattern: 0000110
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000110
pattern: 0001001
try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001001
pattern: 0001010
try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001010
pattern: 0001100
try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001100
pattern: 0010001
try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010001
pattern: 0010010
try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010010
pattern: 0010100
try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010100
pattern: 0011000
try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011000
pattern: 0100001
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100001
pattern: 0100010
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100010
pattern: 0100100
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100100
pattern: 0101000
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 3
delete from 695 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101000
pattern: 0110000
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

patches are written to file
running tests...
used time: Finished in 296.81 seconds
Failing tests: 5
	com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101a
	com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101b
	com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining10
	com.google.javascript.jscomp.InlineFunctionsTest::testIssue1101
	com.google.javascript.jscomp.InlineFunctionsTest::testInlineMutableArgsReferencedOnce
Can independently fix []
Could not fix independently
processed: 0110000
pattern: 1000001
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000001
pattern: 1000010
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000010
pattern: 1000100
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

patches are written to file
running tests...
used time: Finished in 285.96 seconds
Failing tests: 17
	com.google.javascript.jscomp.FunctionInjectorTest::testCanInlineReferenceToFunction19
	com.google.javascript.jscomp.FunctionInjectorTest::testCanInlineReferenceToFunction20
	com.google.javascript.jscomp.FunctionInjectorTest::testCanInlineReferenceToFunction21
	com.google.javascript.jscomp.FunctionInjectorTest::testCanInlineReferenceToFunction22
	com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101a
	com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101b
	com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining10
	com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInliningCosting2
	com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInliningCosting3
	com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInliningCosting4
	com.google.javascript.jscomp.InlineFunctionsTest::testIssue1101
	com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineMutableArgs1
	com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineMutableArgs2
	com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineMutableArgs3
	com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineMutableArgs4
	com.google.javascript.jscomp.InlineFunctionsTest::testInlineMutableArgsReferencedOnce
	com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInlining4
Includes new failing tests, set to unusable
processed: 1000100
pattern: 1001000
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 3
delete from 695 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001000
pattern: 1010000
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010000
pattern: 1100000
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100000
pattern: 0000111
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0000111
pattern: 0001011
try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001011
pattern: 0001101
try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001101
pattern: 0001110
try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001110
pattern: 0010011
try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010011
pattern: 0010101
try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010101
pattern: 0010110
try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010110
pattern: 0011001
try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011001
pattern: 0011010
try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011010
pattern: 0011100
try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011100
pattern: 0100011
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100011
pattern: 0100101
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100101
pattern: 0100110
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100110
pattern: 0101001
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101001
pattern: 0101010
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101010
pattern: 0101100
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101100
pattern: 0110001
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110001
pattern: 0110010
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110010
pattern: 0110100
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110100
pattern: 0111000
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0111000
pattern: 1000011
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000011
pattern: 1000101
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000101
pattern: 1000110
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000110
pattern: 1001001
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001001
pattern: 1001010
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001010
pattern: 1001100
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

patches are written to file
running tests...
used time: Finished in 292.56 seconds
Failing tests: 17
	com.google.javascript.jscomp.FunctionInjectorTest::testCanInlineReferenceToFunction19
	com.google.javascript.jscomp.FunctionInjectorTest::testCanInlineReferenceToFunction20
	com.google.javascript.jscomp.FunctionInjectorTest::testCanInlineReferenceToFunction21
	com.google.javascript.jscomp.FunctionInjectorTest::testCanInlineReferenceToFunction22
	com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101a
	com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101b
	com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining10
	com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInliningCosting2
	com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInliningCosting3
	com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInliningCosting4
	com.google.javascript.jscomp.InlineFunctionsTest::testIssue1101
	com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineMutableArgs1
	com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineMutableArgs2
	com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineMutableArgs3
	com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineMutableArgs4
	com.google.javascript.jscomp.InlineFunctionsTest::testInlineMutableArgsReferencedOnce
	com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInlining4
Includes new failing tests, set to unusable
processed: 1001100
pattern: 1010001
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010001
pattern: 1010010
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010010
pattern: 1010100
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010100
pattern: 1011000
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1011000
pattern: 1100001
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100001
pattern: 1100010
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100010
pattern: 1100100
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100100
pattern: 1101000
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 3
delete from 695 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1101000
pattern: 1110000
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

patches are written to file
running tests...
used time: Finished in 290.10 seconds
Failing tests: 5
	com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101a
	com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101b
	com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining10
	com.google.javascript.jscomp.InlineFunctionsTest::testIssue1101
	com.google.javascript.jscomp.InlineFunctionsTest::testInlineMutableArgsReferencedOnce
Can independently fix []
Could not fix independently
processed: 1110000
pattern: 0001111
try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001111
pattern: 0010111
try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0010111
pattern: 0011011
try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011011
pattern: 0011101
try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011101
pattern: 0011110
try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011110
pattern: 0100111
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100111
pattern: 0101011
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101011
pattern: 0101101
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101101
pattern: 0101110
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101110
pattern: 0110011
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110011
pattern: 0110101
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110101
pattern: 0110110
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110110
pattern: 0111001
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0111001
pattern: 0111010
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0111010
pattern: 0111100
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0111100
pattern: 1000111
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1000111
pattern: 1001011
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001011
pattern: 1001101
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001101
pattern: 1001110
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001110
pattern: 1010011
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010011
pattern: 1010101
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010101
pattern: 1010110
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010110
pattern: 1011001
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1011001
pattern: 1011010
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1011010
pattern: 1011100
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1011100
pattern: 1100011
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100011
pattern: 1100101
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100101
pattern: 1100110
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100110
pattern: 1101001
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1101001
pattern: 1101010
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1101010
pattern: 1101100
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1101100
pattern: 1110001
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1110001
pattern: 1110010
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1110010
pattern: 1110100
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

patches are written to file
running tests...
used time: Finished in 304.14 seconds
Failing tests: 17
	com.google.javascript.jscomp.FunctionInjectorTest::testCanInlineReferenceToFunction19
	com.google.javascript.jscomp.FunctionInjectorTest::testCanInlineReferenceToFunction20
	com.google.javascript.jscomp.FunctionInjectorTest::testCanInlineReferenceToFunction21
	com.google.javascript.jscomp.FunctionInjectorTest::testCanInlineReferenceToFunction22
	com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101a
	com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101b
	com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining10
	com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInliningCosting2
	com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInliningCosting3
	com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInliningCosting4
	com.google.javascript.jscomp.InlineFunctionsTest::testIssue1101
	com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineMutableArgs1
	com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineMutableArgs2
	com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineMutableArgs3
	com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineMutableArgs4
	com.google.javascript.jscomp.InlineFunctionsTest::testInlineMutableArgsReferencedOnce
	com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInlining4
Includes new failing tests, set to unusable
processed: 1110100
pattern: 1111000
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1111000
pattern: 0011111
try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011111
pattern: 0101111
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101111
pattern: 0110111
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110111
pattern: 0111011
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0111011
pattern: 0111101
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0111101
pattern: 0111110
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0111110
pattern: 1001111
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001111
pattern: 1010111
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1010111
pattern: 1011011
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1011011
pattern: 1011101
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1011101
pattern: 1011110
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1011110
pattern: 1100111
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100111
pattern: 1101011
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1101011
pattern: 1101101
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1101101
pattern: 1101110
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1101110
pattern: 1110011
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1110011
pattern: 1110101
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1110101
pattern: 1110110
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1110110
pattern: 1111001
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1111001
pattern: 1111010
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1111010
pattern: 1111100
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

patches are written to file
running tests...
used time: Finished in 284.61 seconds
Failing tests: 17
	com.google.javascript.jscomp.FunctionInjectorTest::testCanInlineReferenceToFunction19
	com.google.javascript.jscomp.FunctionInjectorTest::testCanInlineReferenceToFunction20
	com.google.javascript.jscomp.FunctionInjectorTest::testCanInlineReferenceToFunction21
	com.google.javascript.jscomp.FunctionInjectorTest::testCanInlineReferenceToFunction22
	com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101a
	com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101b
	com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining10
	com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInliningCosting2
	com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInliningCosting3
	com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInliningCosting4
	com.google.javascript.jscomp.InlineFunctionsTest::testIssue1101
	com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineMutableArgs1
	com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineMutableArgs2
	com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineMutableArgs3
	com.google.javascript.jscomp.InlineFunctionsTest::testNoInlineMutableArgs4
	com.google.javascript.jscomp.InlineFunctionsTest::testInlineMutableArgsReferencedOnce
	com.google.javascript.jscomp.InlineFunctionsTest::testMixedModeInlining4
Includes new failing tests, set to unusable
processed: 1111100
pattern: 0111111
try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0111111
pattern: 1011111
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1011111
pattern: 1101111
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1101111
pattern: 1110111
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
used time: Finished in 257.80 seconds
Failing tests: 0
Can independently fix ['com.google.javascript.jscomp.InlineFunctionsTest::testIssue1101', 'com.google.javascript.jscomp.InlineFunctionsTest::testInlineMutableArgsReferencedOnce', 'com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101a', 'com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining10', 'com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101b']
select new bug
Pattern: 1110111
new failing tests:
com.google.javascript.jscomp.InlineFunctionsTest::testIssue1101
com.google.javascript.jscomp.InlineFunctionsTest::testInlineMutableArgsReferencedOnce
com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101a
com.google.javascript.jscomp.InlineFunctionsTest::testCostBasedInlining10
com.google.javascript.jscomp.FunctionInjectorTest::testIssue1101b
Save found bug
processed: 1110111
pattern: 1111011
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1111011
pattern: 1111101
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 6
delete from 731 with range 2
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1111101
pattern: 1111110
try to fix hunk: 0
insert before 46 with   private final Supplier<String> throwawayNameSupplier =
      new Supplier<String>() {
    private int nextId = 0;
    @Override
    public String get() {
      return String.valueOf(nextId++);
    }
  };

try to fix hunk: 1
replace from 208 with range 1 to
      return canInlineReferenceDirectly(callNode, fnNode, needAliases);

try to fix hunk: 2
replace from 690 with range 1 to
      Node callNode, Node fnNode, Set<String> namesToAlias) {

try to fix hunk: 3
delete from 695 with range 1
try to fix hunk: 4
replace from 715 with range 12 to
    Map<String, Node> args =
        FunctionArgumentInjector.getFunctionCallParameterMap(
            fnNode, callNode, this.throwawayNameSupplier);
    boolean hasArgs = !args.isEmpty();
    if (hasArgs) {

try to fix hunk: 5
replace from 728 with range 2 to
      Set<String> allNamesToAlias = Sets.newHashSet(namesToAlias);
      FunctionArgumentInjector.maybeAddTempsForCallArguments(
          fnNode, args, allNamesToAlias, compiler.getCodingConvention());
      if (!allNamesToAlias.isEmpty()) {

patches are written to file
running tests...
EXCEPTION: Inside Exception generator.run() timeout
Traceback (most recent call last):
  File "run.py", line 30, in task
    generator.run()
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 83, in run
    self._run()
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 109, in _run
    self.taskSingleHunk(task)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 138, in taskSingleHunk
    failure = util.get_failing_tests(self.path, self.build_dir)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/util.py", line 46, in get_failing_tests
    result = runCommand(['defects4j', 'test', '-w', '{}'.format(path)], timeout=timeout)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/util.py", line 9, in runCommand
    finished = subprocess.run(cmd, capture_output=True, cwd=cwd, timeout=timeout)
  File "/usr/lib/python3.8/subprocess.py", line 495, in run
    stdout, stderr = process.communicate(input, timeout=timeout)
  File "/usr/lib/python3.8/subprocess.py", line 1028, in communicate
    stdout, stderr = self._communicate(input, endtime, timeout)
  File "/usr/lib/python3.8/subprocess.py", line 1868, in _communicate
    ready = selector.select(timeout)
  File "/usr/lib/python3.8/selectors.py", line 415, in select
    fd_event_list = self._selector.poll(timeout)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 69, in handler
    _raise_exception(timeout_exception, exception_message)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 47, in _raise_exception
    raise exception(exception_message)
TimeoutError: generator.run() timeout

