{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
            "from_line_no": 207,
            "to_line_no": 208,
            "replaced_with": "                this.seriesKeys = new Comparable[0];\n                this.categoryKeys = new Comparable[0];\n",
            "replaced": "                this.seriesKeys = null;\n                this.categoryKeys = null;\n",
            "patch_type": "replace",
            "next_line_no": 209
        },
        "1": {
            "file_name": "source/org/jfree/data/category/DefaultIntervalCategoryDataset.java",
            "from_line_no": 338,
            "to_line_no": 338,
            "replaced_with": "        if (categoryKeys.length != getCategoryCount()) {\n",
            "replaced": "        if (categoryKeys.length != this.startData[0].length) {\n",
            "patch_type": "replace",
            "next_line_no": 339
        }
    },
    "method": {
        "failing_tests": [
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetCategoryIndex",
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testSetCategoryKeys",
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetSeriesIndex",
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetRowCount",
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetRowIndex",
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetColumnCount",
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetColumnIndex",
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testCloning2"
        ],
        "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetCategoryIndex": {
            "file_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
            "Instance": "Begin: Pos(410, 12)\nEnd: Pos(416, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java\nName: testGetCategoryIndex\nChilds: [StatementAssertion<Begin: Pos(415, 6), End: Pos(415, 53)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
            "name": "testGetCategoryIndex",
            "begin": "Pos(410, 12)",
            "end": "Pos(416, 5)",
            "begin_line_no": 410,
            "end_line_no": 416,
            "child": [
                "Begin: Pos(415, 6)\nEnd: Pos(415, 53)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testSetCategoryKeys": {
            "file_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
            "Instance": "Begin: Pos(432, 12)\nEnd: Pos(445, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java\nName: testSetCategoryKeys\nChilds: [StatementAssertion<Begin: Pos(444, 6), End: Pos(444, 22)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
            "name": "testSetCategoryKeys",
            "begin": "Pos(432, 12)",
            "end": "Pos(445, 5)",
            "begin_line_no": 432,
            "end_line_no": 445,
            "child": [
                "Begin: Pos(444, 6)\nEnd: Pos(444, 22)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetSeriesIndex": {
            "file_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
            "Instance": "Begin: Pos(370, 12)\nEnd: Pos(376, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java\nName: testGetSeriesIndex\nChilds: [StatementAssertion<Begin: Pos(375, 6), End: Pos(375, 51)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
            "name": "testGetSeriesIndex",
            "begin": "Pos(370, 12)",
            "end": "Pos(376, 5)",
            "begin_line_no": 370,
            "end_line_no": 376,
            "child": [
                "Begin: Pos(375, 6)\nEnd: Pos(375, 51)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetRowCount": {
            "file_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
            "Instance": "Begin: Pos(485, 12)\nEnd: Pos(491, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java\nName: testGetRowCount\nChilds: [StatementAssertion<Begin: Pos(490, 9), End: Pos(490, 48)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
            "name": "testGetRowCount",
            "begin": "Pos(485, 12)",
            "end": "Pos(491, 5)",
            "begin_line_no": 485,
            "end_line_no": 491,
            "child": [
                "Begin: Pos(490, 9)\nEnd: Pos(490, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetRowIndex": {
            "file_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
            "Instance": "Begin: Pos(381, 12)\nEnd: Pos(387, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java\nName: testGetRowIndex\nChilds: [StatementAssertion<Begin: Pos(386, 6), End: Pos(386, 48)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
            "name": "testGetRowIndex",
            "begin": "Pos(381, 12)",
            "end": "Pos(387, 5)",
            "begin_line_no": 381,
            "end_line_no": 387,
            "child": [
                "Begin: Pos(386, 6)\nEnd: Pos(386, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetColumnCount": {
            "file_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
            "Instance": "Begin: Pos(474, 12)\nEnd: Pos(480, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java\nName: testGetColumnCount\nChilds: [StatementAssertion<Begin: Pos(479, 9), End: Pos(479, 48)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
            "name": "testGetColumnCount",
            "begin": "Pos(474, 12)",
            "end": "Pos(480, 5)",
            "begin_line_no": 474,
            "end_line_no": 480,
            "child": [
                "Begin: Pos(479, 9)\nEnd: Pos(479, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetColumnIndex": {
            "file_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
            "Instance": "Begin: Pos(421, 12)\nEnd: Pos(427, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java\nName: testGetColumnIndex\nChilds: [StatementAssertion<Begin: Pos(426, 6), End: Pos(426, 51)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
            "name": "testGetColumnIndex",
            "begin": "Pos(421, 12)",
            "end": "Pos(427, 5)",
            "begin_line_no": 421,
            "end_line_no": 427,
            "child": [
                "Begin: Pos(426, 6)\nEnd: Pos(426, 51)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testCloning2": {
            "file_path": "tests/org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
            "Instance": "Begin: Pos(259, 12)\nEnd: Pos(273, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java\nName: testCloning2\nChilds: [StatementAssertion<Begin: Pos(270, 9), End: Pos(270, 29)>,\nStatementAssertion<Begin: Pos(271, 9), End: Pos(271, 51)>,\nStatementAssertion<Begin: Pos(272, 9), End: Pos(272, 34)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_16/tests//org/jfree/data/category/junit/DefaultIntervalCategoryDatasetTests.java",
            "name": "testCloning2",
            "begin": "Pos(259, 12)",
            "end": "Pos(273, 5)",
            "begin_line_no": 259,
            "end_line_no": 273,
            "child": [
                "Begin: Pos(270, 9)\nEnd: Pos(270, 29)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(271, 9)\nEnd: Pos(271, 51)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(272, 9)\nEnd: Pos(272, 34)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testCloning2$catena_0() {\n    \tDefaultIntervalCategoryDataset d1 \n                = new DefaultIntervalCategoryDataset(new double[0][0], \n        \t\t    new double[0][0]);\n        DefaultIntervalCategoryDataset d2 = null;\n        try {\n            d2 = (DefaultIntervalCategoryDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);                                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(d1.getClass() == d2.getClass());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(d1.equals(d2));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\t\n    }",
                "    public void testCloning2$catena_1() {\n    \tDefaultIntervalCategoryDataset d1 \n                = new DefaultIntervalCategoryDataset(new double[0][0], \n        \t\t    new double[0][0]);\n        DefaultIntervalCategoryDataset d2 = null;\n        try {\n            d2 = (DefaultIntervalCategoryDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        try{ assertTrue(d1 != d2);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(d1.getClass() == d2.getClass());                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(d1.equals(d2));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\t\n    }",
                "    public void testCloning2$catena_2() {\n    \tDefaultIntervalCategoryDataset d1 \n                = new DefaultIntervalCategoryDataset(new double[0][0], \n        \t\t    new double[0][0]);\n        DefaultIntervalCategoryDataset d2 = null;\n        try {\n            d2 = (DefaultIntervalCategoryDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        try{ assertTrue(d1 != d2);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(d1.getClass() == d2.getClass());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(d1.equals(d2));                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\t\n    }"
            ],
            "func": {
                "0": "    public void testCloning2$catena_0() {\n    \tDefaultIntervalCategoryDataset d1 \n                = new DefaultIntervalCategoryDataset(new double[0][0], \n        \t\t    new double[0][0]);\n        DefaultIntervalCategoryDataset d2 = null;\n        try {\n            d2 = (DefaultIntervalCategoryDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        assertTrue(d1 != d2);                                                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(d1.getClass() == d2.getClass());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(d1.equals(d2));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\t\n    }",
                "1": "    public void testCloning2$catena_1() {\n    \tDefaultIntervalCategoryDataset d1 \n                = new DefaultIntervalCategoryDataset(new double[0][0], \n        \t\t    new double[0][0]);\n        DefaultIntervalCategoryDataset d2 = null;\n        try {\n            d2 = (DefaultIntervalCategoryDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        try{ assertTrue(d1 != d2);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(d1.getClass() == d2.getClass());                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(d1.equals(d2));                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\t\n    }",
                "2": "    public void testCloning2$catena_2() {\n    \tDefaultIntervalCategoryDataset d1 \n                = new DefaultIntervalCategoryDataset(new double[0][0], \n        \t\t    new double[0][0]);\n        DefaultIntervalCategoryDataset d2 = null;\n        try {\n            d2 = (DefaultIntervalCategoryDataset) d1.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            e.printStackTrace();\n        }\n        try{ assertTrue(d1 != d2);                                                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertTrue(d1.getClass() == d2.getClass());                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(d1.equals(d2));                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\t\n    }"
            }
        }
    },
    "01": {
        "failing_tests": [
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testSetCategoryKeys"
        ]
    },
    "10": {
        "failing_tests": [
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetRowIndex",
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testCloning2$catena_1",
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testCloning2$catena_0",
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testCloning2$catena_2",
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetRowCount",
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetColumnCount",
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetSeriesIndex",
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetColumnIndex",
            "org.jfree.data.category.junit.DefaultIntervalCategoryDatasetTests::testGetCategoryIndex"
        ]
    }
}