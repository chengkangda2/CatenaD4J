{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
            "replaced_with": "            if (lhs instanceof java.math.BigDecimal) {\n                isEquals = (((java.math.BigDecimal)lhs).compareTo(rhs) == 0);\n            } else {\n",
            "patch_type": "insert",
            "next_line_no": 380
        },
        "1": {
            "file_name": "src/java/org/apache/commons/lang/builder/EqualsBuilder.java",
            "replaced_with": "            }\n",
            "patch_type": "insert",
            "next_line_no": 382
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.lang.builder.EqualsBuilderTest::testBigDecimal"
        ],
        "org.apache.commons.lang.builder.EqualsBuilderTest::testBigDecimal": {
            "file_path": "src/test/org/apache/commons/lang/builder/EqualsBuilderTest.java",
            "Instance": "Begin: Pos(381, 12)\nEnd: Pos(386, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_48/src/test//org/apache/commons/lang/builder/EqualsBuilderTest.java\nName: testBigDecimal\nChilds: [StatementAssertion<Begin: Pos(384, 9), End: Pos(384, 66)>,\nStatementAssertion<Begin: Pos(385, 9), End: Pos(385, 66)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_48/src/test//org/apache/commons/lang/builder/EqualsBuilderTest.java",
            "name": "testBigDecimal",
            "begin": "Pos(381, 12)",
            "end": "Pos(386, 5)",
            "begin_line_no": 381,
            "end_line_no": 386,
            "child": [
                "Begin: Pos(384, 9)\nEnd: Pos(384, 66)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(385, 9)\nEnd: Pos(385, 66)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testBigDecimal$catena_0() {\n        BigDecimal o1 = new BigDecimal(\"2.0\");\n        BigDecimal o2 = new BigDecimal(\"2.00\");\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(new EqualsBuilder().append(o1, o2).isEquals());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testBigDecimal$catena_1() {\n        BigDecimal o1 = new BigDecimal(\"2.0\");\n        BigDecimal o2 = new BigDecimal(\"2.00\");\n        try{ assertTrue(new EqualsBuilder().append(o1, o1).isEquals());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(new EqualsBuilder().append(o1, o2).isEquals());                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testBigDecimal$catena_0() {\n        BigDecimal o1 = new BigDecimal(\"2.0\");\n        BigDecimal o2 = new BigDecimal(\"2.00\");\n        assertTrue(new EqualsBuilder().append(o1, o1).isEquals());                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertTrue(new EqualsBuilder().append(o1, o2).isEquals());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testBigDecimal$catena_1() {\n        BigDecimal o1 = new BigDecimal(\"2.0\");\n        BigDecimal o2 = new BigDecimal(\"2.00\");\n        try{ assertTrue(new EqualsBuilder().append(o1, o1).isEquals());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertTrue(new EqualsBuilder().append(o1, o2).isEquals());                                          /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "11": {
        "failing_tests": [
            "org.apache.commons.lang.builder.EqualsBuilderTest::testBigDecimal$catena_1"
        ]
    }
}