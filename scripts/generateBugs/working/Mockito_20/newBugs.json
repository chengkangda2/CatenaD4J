{
    "original": {
        "num_of_hunks": 3,
        "0": {
            "file_name": "src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java",
            "replaced_with": "        Instantiator instantiator = new InstantiatorProvider().getInstantiator(settings);\n",
            "patch_type": "insert",
            "next_line_no": 32
        },
        "1": {
            "file_name": "src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java",
            "from_line_no": 34,
            "to_line_no": 34,
            "replaced_with": "            mockInstance = instantiator.newInstance(mockedProxyType);\n",
            "replaced": "            mockInstance = classInstantiator.instantiate(mockedProxyType);\n",
            "patch_type": "replace",
            "next_line_no": 35
        },
        "2": {
            "file_name": "src/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java",
            "from_line_no": 45,
            "to_line_no": 45,
            "replaced_with": "                    \"  instance creation by : \" + instantiator.getClass().getSimpleName(),\n",
            "replaced": "                    \"  instance creation by : \" + classInstantiator.getClass().getSimpleName(),\n",
            "patch_type": "replace",
            "next_line_no": 46
        }
    },
    "method": {
        "failing_tests": [
            "org.mockitousage.annotation.SpyAnnotationTest::should_spy_inner_class",
            "org.mockitousage.annotation.SpyAnnotationTest::should_report_when_constructor_is_explosive",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest::can_spy_abstract_classes",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest::exception_message_when_constructor_not_found",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest::can_create_mock_with_constructor",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest::can_mock_inner_classes",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest::mocking_inner_classes_with_wrong_outer_instance",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest::can_mock_abstract_classes"
        ],
        "org.mockitousage.annotation.SpyAnnotationTest::should_spy_inner_class": {
            "file_path": "test/org/mockitousage/annotation/SpyAnnotationTest.java",
            "Instance": "Begin: Pos(123, 5)\nEnd: Pos(151, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/annotation/SpyAnnotationTest.java\nName: should_spy_inner_class\nChilds: [StatementAssertion<Begin: Pos(135, 15), End: Pos(135, 34)>,\nStatementAssertion<Begin: Pos(150, 9), End: Pos(150, 70)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/annotation/SpyAnnotationTest.java",
            "name": "should_spy_inner_class",
            "begin": "Pos(123, 5)",
            "end": "Pos(151, 5)",
            "begin_line_no": 123,
            "end_line_no": 151,
            "child": [
                "Begin: Pos(135, 15)\nEnd: Pos(135, 34)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(150, 9)\nEnd: Pos(150, 70)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void should_spy_inner_class$catena_0() throws Exception {\n    \t \n     class WithMockAndSpy {\n    \t\t@Spy private InnerStrength strength;\n    \t\t@Mock private List<String> list;\n\n            abstract class InnerStrength {\n            \tprivate final String name;\n\n            \tInnerStrength() {\n            \t\t// Make sure that @Mock fields are always injected before @Spy fields.\n            \t\tassertNotNull(list);                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n            \t\t// Make sure constructor is indeed called.\n            \t\tthis.name = \"inner\";\n            \t}\n            \t\n            \tabstract String strength();\n            \t\n            \tString fullStrength() {\n            \t\treturn name + \" \" + strength();\n            \t}\n            }\n    \t}\n\t\tWithMockAndSpy outer = new WithMockAndSpy();\n        MockitoAnnotations.initMocks(outer);\n        when(outer.strength.strength()).thenReturn(\"strength\");\n        try{ assertEquals(\"inner strength\", outer.strength.fullStrength());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void should_spy_inner_class$catena_1() throws Exception {\n    \t \n     class WithMockAndSpy {\n    \t\t@Spy private InnerStrength strength;\n    \t\t@Mock private List<String> list;\n\n            abstract class InnerStrength {\n            \tprivate final String name;\n\n            \tInnerStrength() {\n            \t\t// Make sure that @Mock fields are always injected before @Spy fields.\n            \t\ttry{ assertNotNull(list);                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            \t\t// Make sure constructor is indeed called.\n            \t\tthis.name = \"inner\";\n            \t}\n            \t\n            \tabstract String strength();\n            \t\n            \tString fullStrength() {\n            \t\treturn name + \" \" + strength();\n            \t}\n            }\n    \t}\n\t\tWithMockAndSpy outer = new WithMockAndSpy();\n        MockitoAnnotations.initMocks(outer);\n        when(outer.strength.strength()).thenReturn(\"strength\");\n        assertEquals(\"inner strength\", outer.strength.fullStrength());                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void should_spy_inner_class$catena_0() throws Exception {\n    \t \n     class WithMockAndSpy {\n    \t\t@Spy private InnerStrength strength;\n    \t\t@Mock private List<String> list;\n\n            abstract class InnerStrength {\n            \tprivate final String name;\n\n            \tInnerStrength() {\n            \t\t// Make sure that @Mock fields are always injected before @Spy fields.\n            \t\tassertNotNull(list);                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n            \t\t// Make sure constructor is indeed called.\n            \t\tthis.name = \"inner\";\n            \t}\n            \t\n            \tabstract String strength();\n            \t\n            \tString fullStrength() {\n            \t\treturn name + \" \" + strength();\n            \t}\n            }\n    \t}\n\t\tWithMockAndSpy outer = new WithMockAndSpy();\n        MockitoAnnotations.initMocks(outer);\n        when(outer.strength.strength()).thenReturn(\"strength\");\n        try{ assertEquals(\"inner strength\", outer.strength.fullStrength());                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void should_spy_inner_class$catena_1() throws Exception {\n    \t \n     class WithMockAndSpy {\n    \t\t@Spy private InnerStrength strength;\n    \t\t@Mock private List<String> list;\n\n            abstract class InnerStrength {\n            \tprivate final String name;\n\n            \tInnerStrength() {\n            \t\t// Make sure that @Mock fields are always injected before @Spy fields.\n            \t\ttry{ assertNotNull(list);                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            \t\t// Make sure constructor is indeed called.\n            \t\tthis.name = \"inner\";\n            \t}\n            \t\n            \tabstract String strength();\n            \t\n            \tString fullStrength() {\n            \t\treturn name + \" \" + strength();\n            \t}\n            }\n    \t}\n\t\tWithMockAndSpy outer = new WithMockAndSpy();\n        MockitoAnnotations.initMocks(outer);\n        when(outer.strength.strength()).thenReturn(\"strength\");\n        assertEquals(\"inner strength\", outer.strength.fullStrength());                                      /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.mockitousage.annotation.SpyAnnotationTest::should_report_when_constructor_is_explosive": {
            "file_path": "test/org/mockitousage/annotation/SpyAnnotationTest.java",
            "check": [
                "Selector contains assertion"
            ],
            "Instance": "Begin: Pos(92, 5)\nEnd: Pos(105, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/annotation/SpyAnnotationTest.java\nName: should_report_when_constructor_is_explosive\nChilds: [StatementAssertion<Begin: Pos(101, 13), End: Pos(101, 19)>,\nStatementAssertion<Begin: Pos(103, 13), End: Pos(103, 93)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/annotation/SpyAnnotationTest.java",
            "name": "should_report_when_constructor_is_explosive",
            "begin": "Pos(92, 5)",
            "end": "Pos(105, 5)",
            "begin_line_no": 92,
            "end_line_no": 105,
            "child": [
                "Begin: Pos(101, 13)\nEnd: Pos(101, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(103, 13)\nEnd: Pos(103, 93)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void should_report_when_constructor_is_explosive$catena_0() throws Exception {\n\t\tclass FailingSpy {\n\t        @Spy\n            ThrowingConstructor throwingConstructor;\n\t\t}\n\n        try {\n            MockitoAnnotations.initMocks(new FailingSpy());\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (MockitoException e) {\n            try{ Assertions.assertThat(e.getMessage()).contains(\"Unable to create mock instance\");          }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    @Test\n    public void should_report_when_constructor_is_explosive$catena_1() throws Exception {\n\t\tclass FailingSpy {\n\t        @Spy\n            ThrowingConstructor throwingConstructor;\n\t\t}\n\n        try {\n            MockitoAnnotations.initMocks(new FailingSpy());\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (MockitoException e) {\n            Assertions.assertThat(e.getMessage()).contains(\"Unable to create mock instance\");               /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void should_report_when_constructor_is_explosive$catena_0() throws Exception {\n\t\tclass FailingSpy {\n\t        @Spy\n            ThrowingConstructor throwingConstructor;\n\t\t}\n\n        try {\n            MockitoAnnotations.initMocks(new FailingSpy());\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (MockitoException e) {\n            try{ Assertions.assertThat(e.getMessage()).contains(\"Unable to create mock instance\");          }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "1": "    @Test\n    public void should_report_when_constructor_is_explosive$catena_1() throws Exception {\n\t\tclass FailingSpy {\n\t        @Spy\n            ThrowingConstructor throwingConstructor;\n\t\t}\n\n        try {\n            MockitoAnnotations.initMocks(new FailingSpy());\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (MockitoException e) {\n            Assertions.assertThat(e.getMessage()).contains(\"Unable to create mock instance\");               /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }"
            }
        },
        "org.mockitousage.constructor.CreatingMocksWithConstructorTest::can_spy_abstract_classes": {
            "file_path": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
            "Instance": "Begin: Pos(43, 5)\nEnd: Pos(47, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java\nName: can_spy_abstract_classes\nChilds: [StatementAssertion<Begin: Pos(46, 9), End: Pos(46, 48)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
            "name": "can_spy_abstract_classes",
            "begin": "Pos(43, 5)",
            "end": "Pos(47, 5)",
            "begin_line_no": 43,
            "end_line_no": 47,
            "child": [
                "Begin: Pos(46, 9)\nEnd: Pos(46, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.mockitousage.constructor.CreatingMocksWithConstructorTest::exception_message_when_constructor_not_found": {
            "file_path": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
            "Instance": "Begin: Pos(59, 5)\nEnd: Pos(70, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java\nName: exception_message_when_constructor_not_found\nChilds: [StatementAssertion<Begin: Pos(65, 13), End: Pos(65, 19)>,\nStatementAssertion<Begin: Pos(67, 13), End: Pos(67, 100)>,\nStatementAssertion<Begin: Pos(68, 13), End: Pos(68, 75)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
            "name": "exception_message_when_constructor_not_found",
            "begin": "Pos(59, 5)",
            "end": "Pos(70, 5)",
            "begin_line_no": 59,
            "end_line_no": 70,
            "child": [
                "Begin: Pos(65, 13)\nEnd: Pos(65, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(67, 13)\nEnd: Pos(67, 100)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(68, 13)\nEnd: Pos(68, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void exception_message_when_constructor_not_found$catena_0() {\n        try {\n            //when\n            spy(HasConstructor.class);\n            //then\n            fail();                                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (MockitoException e) {\n            try{ assertEquals(\"Unable to create mock instance of type 'HasConstructor'\", e.getMessage());    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertContains(\"0-arg constructor\", e.getCause().getMessage());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    @Test\n    public void exception_message_when_constructor_not_found$catena_1() {\n        try {\n            //when\n            spy(HasConstructor.class);\n            //then\n            try{ fail();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (MockitoException e) {\n            assertEquals(\"Unable to create mock instance of type 'HasConstructor'\", e.getMessage());         /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertContains(\"0-arg constructor\", e.getCause().getMessage());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    @Test\n    public void exception_message_when_constructor_not_found$catena_2() {\n        try {\n            //when\n            spy(HasConstructor.class);\n            //then\n            try{ fail();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (MockitoException e) {\n            try{ assertEquals(\"Unable to create mock instance of type 'HasConstructor'\", e.getMessage());    }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertContains(\"0-arg constructor\", e.getCause().getMessage());                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void exception_message_when_constructor_not_found$catena_0() {\n        try {\n            //when\n            spy(HasConstructor.class);\n            //then\n            fail();                                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (MockitoException e) {\n            try{ assertEquals(\"Unable to create mock instance of type 'HasConstructor'\", e.getMessage());    }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertContains(\"0-arg constructor\", e.getCause().getMessage());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "1": "    @Test\n    public void exception_message_when_constructor_not_found$catena_1() {\n        try {\n            //when\n            spy(HasConstructor.class);\n            //then\n            try{ fail();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (MockitoException e) {\n            assertEquals(\"Unable to create mock instance of type 'HasConstructor'\", e.getMessage());         /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertContains(\"0-arg constructor\", e.getCause().getMessage());                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "2": "    @Test\n    public void exception_message_when_constructor_not_found$catena_2() {\n        try {\n            //when\n            spy(HasConstructor.class);\n            //then\n            try{ fail();                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (MockitoException e) {\n            try{ assertEquals(\"Unable to create mock instance of type 'HasConstructor'\", e.getMessage());    }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertContains(\"0-arg constructor\", e.getCause().getMessage());                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }"
            }
        },
        "org.mockitousage.constructor.CreatingMocksWithConstructorTest::can_create_mock_with_constructor": {
            "file_path": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
            "Instance": "Begin: Pos(30, 5)\nEnd: Pos(35, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java\nName: can_create_mock_with_constructor\nChilds: [StatementAssertion<Begin: Pos(34, 9), End: Pos(34, 48)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
            "name": "can_create_mock_with_constructor",
            "begin": "Pos(30, 5)",
            "end": "Pos(35, 5)",
            "begin_line_no": 30,
            "end_line_no": 35,
            "child": [
                "Begin: Pos(34, 9)\nEnd: Pos(34, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.mockitousage.constructor.CreatingMocksWithConstructorTest::can_mock_inner_classes": {
            "file_path": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
            "Instance": "Begin: Pos(49, 5)\nEnd: Pos(53, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java\nName: can_mock_inner_classes\nChilds: [StatementAssertion<Begin: Pos(52, 9), End: Pos(52, 48)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
            "name": "can_mock_inner_classes",
            "begin": "Pos(49, 5)",
            "end": "Pos(53, 5)",
            "begin_line_no": 49,
            "end_line_no": 53,
            "child": [
                "Begin: Pos(52, 9)\nEnd: Pos(52, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.mockitousage.constructor.CreatingMocksWithConstructorTest::mocking_inner_classes_with_wrong_outer_instance": {
            "file_path": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
            "Instance": "Begin: Pos(72, 5)\nEnd: Pos(83, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java\nName: mocking_inner_classes_with_wrong_outer_instance\nChilds: [StatementAssertion<Begin: Pos(78, 13), End: Pos(78, 19)>,\nStatementAssertion<Begin: Pos(80, 13), End: Pos(80, 96)>,\nStatementAssertion<Begin: Pos(81, 13), End: Pos(81, 161)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
            "name": "mocking_inner_classes_with_wrong_outer_instance",
            "begin": "Pos(72, 5)",
            "end": "Pos(83, 5)",
            "begin_line_no": 72,
            "end_line_no": 83,
            "child": [
                "Begin: Pos(78, 13)\nEnd: Pos(78, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(80, 13)\nEnd: Pos(80, 96)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(81, 13)\nEnd: Pos(81, 161)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void mocking_inner_classes_with_wrong_outer_instance$catena_0() {\n        try {\n            //when\n            mock(InnerClass.class, withSettings().useConstructor().outerInstance(\"foo\").defaultAnswer(CALLS_REAL_METHODS));\n            //then\n            fail();                                                                                                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (MockitoException e) {\n            try{ assertEquals(\"Unable to create mock instance of type 'InnerClass'\", e.getMessage());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertContains(\"Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.\", e.getCause().getMessage());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    @Test\n    public void mocking_inner_classes_with_wrong_outer_instance$catena_1() {\n        try {\n            //when\n            mock(InnerClass.class, withSettings().useConstructor().outerInstance(\"foo\").defaultAnswer(CALLS_REAL_METHODS));\n            //then\n            try{ fail();                                                                                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (MockitoException e) {\n            assertEquals(\"Unable to create mock instance of type 'InnerClass'\", e.getMessage());                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertContains(\"Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.\", e.getCause().getMessage());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    @Test\n    public void mocking_inner_classes_with_wrong_outer_instance$catena_2() {\n        try {\n            //when\n            mock(InnerClass.class, withSettings().useConstructor().outerInstance(\"foo\").defaultAnswer(CALLS_REAL_METHODS));\n            //then\n            try{ fail();                                                                                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (MockitoException e) {\n            try{ assertEquals(\"Unable to create mock instance of type 'InnerClass'\", e.getMessage());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertContains(\"Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.\", e.getCause().getMessage());         /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void mocking_inner_classes_with_wrong_outer_instance$catena_0() {\n        try {\n            //when\n            mock(InnerClass.class, withSettings().useConstructor().outerInstance(\"foo\").defaultAnswer(CALLS_REAL_METHODS));\n            //then\n            fail();                                                                                                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (MockitoException e) {\n            try{ assertEquals(\"Unable to create mock instance of type 'InnerClass'\", e.getMessage());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            try{ assertContains(\"Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.\", e.getCause().getMessage());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "1": "    @Test\n    public void mocking_inner_classes_with_wrong_outer_instance$catena_1() {\n        try {\n            //when\n            mock(InnerClass.class, withSettings().useConstructor().outerInstance(\"foo\").defaultAnswer(CALLS_REAL_METHODS));\n            //then\n            try{ fail();                                                                                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (MockitoException e) {\n            assertEquals(\"Unable to create mock instance of type 'InnerClass'\", e.getMessage());                                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n            try{ assertContains(\"Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.\", e.getCause().getMessage());    }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "2": "    @Test\n    public void mocking_inner_classes_with_wrong_outer_instance$catena_2() {\n        try {\n            //when\n            mock(InnerClass.class, withSettings().useConstructor().outerInstance(\"foo\").defaultAnswer(CALLS_REAL_METHODS));\n            //then\n            try{ fail();                                                                                                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (MockitoException e) {\n            try{ assertEquals(\"Unable to create mock instance of type 'InnerClass'\", e.getMessage());                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n            assertContains(\"Please ensure that the outer instance has correct type and that the target class has 0-arg constructor.\", e.getCause().getMessage());         /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }"
            }
        },
        "org.mockitousage.constructor.CreatingMocksWithConstructorTest::can_mock_abstract_classes": {
            "file_path": "test/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
            "Instance": "Begin: Pos(37, 5)\nEnd: Pos(41, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java\nName: can_mock_abstract_classes\nChilds: [StatementAssertion<Begin: Pos(40, 9), End: Pos(40, 48)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Mockito_20/test//org/mockitousage/constructor/CreatingMocksWithConstructorTest.java",
            "name": "can_mock_abstract_classes",
            "begin": "Pos(37, 5)",
            "end": "Pos(41, 5)",
            "begin_line_no": 37,
            "end_line_no": 41,
            "child": [
                "Begin: Pos(40, 9)\nEnd: Pos(40, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        }
    },
    "110": {
        "failing_tests": [
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest::can_mock_abstract_classes",
            "org.mockitousage.annotation.SpyAnnotationTest::should_spy_inner_class$catena_1",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest::can_mock_inner_classes",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest::mocking_inner_classes_with_wrong_outer_instance$catena_0",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest::can_create_mock_with_constructor",
            "org.mockitousage.annotation.SpyAnnotationTest::should_report_when_constructor_is_explosive$catena_0",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest::exception_message_when_constructor_not_found$catena_0",
            "org.mockitousage.constructor.CreatingMocksWithConstructorTest::can_spy_abstract_classes"
        ]
    }
}