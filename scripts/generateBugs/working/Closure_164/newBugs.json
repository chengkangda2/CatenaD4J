{
    "original": {
        "num_of_hunks": 4,
        "0": {
            "file_name": "src/com/google/javascript/rhino/jstype/ArrowType.java",
            "replaced_with": "      boolean thisIsOptional = thisIsVarArgs || thisParam.isOptionalArg();\n      boolean thatIsOptional = thatIsVarArgs || thatParam.isOptionalArg();\n",
            "patch_type": "insert",
            "next_line_no": 128
        },
        "1": {
            "file_name": "src/com/google/javascript/rhino/jstype/ArrowType.java",
            "replaced_with": "      if (!thisIsOptional && thatIsOptional) {\n",
            "patch_type": "insert",
            "next_line_no": 130
        },
        "2": {
            "file_name": "src/com/google/javascript/rhino/jstype/ArrowType.java",
            "replaced_with": "        boolean isTopFunction =\n            thatIsVarArgs &&\n            (thatParamType == null ||\n             thatParamType.isUnknownType() ||\n             thatParamType.isNoType());\n        if (!isTopFunction) {\n          return false;\n        }\n      }\n",
            "patch_type": "insert",
            "next_line_no": 135
        },
        "3": {
            "file_name": "src/com/google/javascript/rhino/jstype/ArrowType.java",
            "replaced_with": "    if (thisParam != null\n        && !thisParam.isOptionalArg() && !thisParam.isVarArgs()\n        && thatParam == null) {\n      return false;\n    }\n",
            "patch_type": "insert",
            "next_line_no": 152
        }
    },
    "method": {
        "failing_tests": [
            "com.google.javascript.jscomp.LooseTypeCheckTest::testMethodInference7",
            "com.google.javascript.jscomp.TypeCheckTest::testMethodInference7",
            "com.google.javascript.rhino.jstype.FunctionTypeTest::testSupAndInfOfReturnTypesWithNumOfParams"
        ],
        "com.google.javascript.jscomp.LooseTypeCheckTest::testMethodInference7": {
            "file_path": "test/com/google/javascript/jscomp/LooseTypeCheckTest.java",
            "Instance": "Begin: Pos(1781, 10)\nEnd: Pos(1792, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_164/test//com/google/javascript/jscomp/LooseTypeCheckTest.java\nName: testMethodInference7\nChilds: [StatementAssertion<Begin: Pos(1782, 5), End: Pos(1791, 56)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_164/test//com/google/javascript/jscomp/LooseTypeCheckTest.java",
            "name": "testMethodInference7",
            "begin": "Pos(1781, 10)",
            "end": "Pos(1792, 3)",
            "begin_line_no": 1781,
            "end_line_no": 1792,
            "child": [
                "Begin: Pos(1782, 5)\nEnd: Pos(1791, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.jscomp.TypeCheckTest::testMethodInference7": {
            "file_path": "test/com/google/javascript/jscomp/TypeCheckTest.java",
            "Instance": "Begin: Pos(2047, 10)\nEnd: Pos(2058, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_164/test//com/google/javascript/jscomp/TypeCheckTest.java\nName: testMethodInference7\nChilds: [StatementAssertion<Begin: Pos(2048, 5), End: Pos(2057, 56)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_164/test//com/google/javascript/jscomp/TypeCheckTest.java",
            "name": "testMethodInference7",
            "begin": "Pos(2047, 10)",
            "end": "Pos(2058, 3)",
            "begin_line_no": 2047,
            "end_line_no": 2058,
            "child": [
                "Begin: Pos(2048, 5)\nEnd: Pos(2057, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "com.google.javascript.rhino.jstype.FunctionTypeTest::testSupAndInfOfReturnTypesWithNumOfParams": {
            "file_path": "test/com/google/javascript/rhino/jstype/FunctionTypeTest.java",
            "check": [
                "Use pattern matching: .assertLeastSupertype",
                "Use pattern matching: .assertGreatestSubtype"
            ],
            "Instance": "Begin: Pos(141, 10)\nEnd: Pos(153, 3)\nSource: /root/workbench/exportInfo/d4j_buggy/Closure_164/test//com/google/javascript/rhino/jstype/FunctionTypeTest.java\nName: testSupAndInfOfReturnTypesWithNumOfParams\nChilds: [StatementAssertion<Begin: Pos(149, 5), End: Pos(150, 69)>,\nStatementAssertion<Begin: Pos(151, 5), End: Pos(152, 61)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Closure_164/test//com/google/javascript/rhino/jstype/FunctionTypeTest.java",
            "name": "testSupAndInfOfReturnTypesWithNumOfParams",
            "begin": "Pos(141, 10)",
            "end": "Pos(153, 3)",
            "begin_line_no": 141,
            "end_line_no": 153,
            "child": [
                "Begin: Pos(149, 5)\nEnd: Pos(150, 69)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(151, 5)\nEnd: Pos(152, 61)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "  public void testSupAndInfOfReturnTypesWithNumOfParams$catena_0() {\n    FunctionType twoNumbers = new FunctionBuilder(registry)\n        .withParamsNode(registry.createParameters(NUMBER_TYPE, NUMBER_TYPE))\n        .withReturnType(BOOLEAN_TYPE).build();\n    FunctionType oneNumber = new FunctionBuilder(registry)\n        .withParamsNode(registry.createParameters(NUMBER_TYPE))\n        .withReturnType(BOOLEAN_TYPE).build();\n\n    assertLeastSupertype(\n        \"function (number, number): boolean\", twoNumbers, oneNumber);                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertGreatestSubtype(\n        \"function (number): boolean\", twoNumbers, oneNumber);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "  public void testSupAndInfOfReturnTypesWithNumOfParams$catena_1() {\n    FunctionType twoNumbers = new FunctionBuilder(registry)\n        .withParamsNode(registry.createParameters(NUMBER_TYPE, NUMBER_TYPE))\n        .withReturnType(BOOLEAN_TYPE).build();\n    FunctionType oneNumber = new FunctionBuilder(registry)\n        .withParamsNode(registry.createParameters(NUMBER_TYPE))\n        .withReturnType(BOOLEAN_TYPE).build();\n\n    try{ assertLeastSupertype(\n        \"function (number, number): boolean\", twoNumbers, oneNumber);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertGreatestSubtype(\n        \"function (number): boolean\", twoNumbers, oneNumber);                                               /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            ],
            "func": {
                "0": "  public void testSupAndInfOfReturnTypesWithNumOfParams$catena_0() {\n    FunctionType twoNumbers = new FunctionBuilder(registry)\n        .withParamsNode(registry.createParameters(NUMBER_TYPE, NUMBER_TYPE))\n        .withReturnType(BOOLEAN_TYPE).build();\n    FunctionType oneNumber = new FunctionBuilder(registry)\n        .withParamsNode(registry.createParameters(NUMBER_TYPE))\n        .withReturnType(BOOLEAN_TYPE).build();\n\n    assertLeastSupertype(\n        \"function (number, number): boolean\", twoNumbers, oneNumber);                                       /***** ORIGINAL ASSERTION IS HERE *****/\n    try{ assertGreatestSubtype(\n        \"function (number): boolean\", twoNumbers, oneNumber);                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n  }",
                "1": "  public void testSupAndInfOfReturnTypesWithNumOfParams$catena_1() {\n    FunctionType twoNumbers = new FunctionBuilder(registry)\n        .withParamsNode(registry.createParameters(NUMBER_TYPE, NUMBER_TYPE))\n        .withReturnType(BOOLEAN_TYPE).build();\n    FunctionType oneNumber = new FunctionBuilder(registry)\n        .withParamsNode(registry.createParameters(NUMBER_TYPE))\n        .withReturnType(BOOLEAN_TYPE).build();\n\n    try{ assertLeastSupertype(\n        \"function (number, number): boolean\", twoNumbers, oneNumber);                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n    assertGreatestSubtype(\n        \"function (number): boolean\", twoNumbers, oneNumber);                                               /***** ORIGINAL ASSERTION IS HERE *****/\n  }"
            }
        }
    }
}