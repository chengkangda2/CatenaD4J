---
Begin generate bug_id: Math_106
num_of_hunks: 4
use working dir: ./working/data/Math_106
Try to checkout Math_106
build dir: ['./working/data/Math_106/target/classes', './working/data/Math_106/target/test-classes']
init FileManager
trace file: src/java/org/apache/commons/math/fraction/ProperFractionFormat.java
trace file: src/java/org/apache/commons/math/fraction/ProperFractionFormat.java
trace file: src/java/org/apache/commons/math/fraction/ProperFractionFormat.java
trace file: src/java/org/apache/commons/math/fraction/ProperFractionFormat.java
trying to replace old failing tests
edit: replace from 232 range 16 at src/test/org/apache/commons/math/fraction/FractionFormatTest.java
to
    public void testParseProperInvalidMinus$catena_0() {
        String source = "2 -2 / 3";
        try {
            Fraction c = properFormat.parse(source);
            fail("invalid minus in improper fraction.");                                                    /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (ParseException ex) {
            // expected
        }
        source = "2 2 / -3";
        try {
            Fraction c = properFormat.parse(source);
            try{ fail("invalid minus in improper fraction.");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ParseException ex) {
            // expected
        }
    }     public void testParseProperInvalidMinus$catena_1() {
        String source = "2 -2 / 3";
        try {
            Fraction c = properFormat.parse(source);
            try{ fail("invalid minus in improper fraction.");                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ParseException ex) {
            // expected
        }
        source = "2 2 / -3";
        try {
            Fraction c = properFormat.parse(source);
            fail("invalid minus in improper fraction.");                                                    /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (ParseException ex) {
            // expected
        }
    }
trace file: src/test/org/apache/commons/math/fraction/FractionFormatTest.java
new test num: 2
ori test num: 0
pattern: 0000
patches are written to file
running tests...
used time: Finished in 23.09 seconds
Failing tests: 2
	org.apache.commons.math.fraction.FractionFormatTest::testParseProperInvalidMinus$catena_0
	org.apache.commons.math.fraction.FractionFormatTest::testParseProperInvalidMinus$catena_1
pattern: 0001
try to fix hunk: 3
insert before 201 with             pos.setIndex(initialIndex);
            return null;
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 0010
try to fix hunk: 2
insert before 200 with         if (den.intValue() < 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 0100
try to fix hunk: 1
insert before 166 with             pos.setIndex(initialIndex);
            return null;
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 1000
try to fix hunk: 0
insert before 165 with         if (num.intValue() < 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 0011
try to fix hunk: 2
insert before 200 with         if (den.intValue() < 0) {

try to fix hunk: 3
insert before 201 with             pos.setIndex(initialIndex);
            return null;
        }

patches are written to file
running tests...
used time: Finished in 16.97 seconds
Failing tests: 1
	org.apache.commons.math.fraction.FractionFormatTest::testParseProperInvalidMinus$catena_0
Can independently fix ['org.apache.commons.math.fraction.FractionFormatTest::testParseProperInvalidMinus$catena_1']
select new bug
Pattern: 0011
failing tests: org.apache.commons.math.fraction.FractionFormatTest::testParseProperInvalidMinus$catena_1
pattern: 0101
try to fix hunk: 1
insert before 166 with             pos.setIndex(initialIndex);
            return null;
        }

try to fix hunk: 3
insert before 201 with             pos.setIndex(initialIndex);
            return null;
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 0110
try to fix hunk: 1
insert before 166 with             pos.setIndex(initialIndex);
            return null;
        }

try to fix hunk: 2
insert before 200 with         if (den.intValue() < 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 1001
try to fix hunk: 0
insert before 165 with         if (num.intValue() < 0) {

try to fix hunk: 3
insert before 201 with             pos.setIndex(initialIndex);
            return null;
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 1010
try to fix hunk: 0
insert before 165 with         if (num.intValue() < 0) {

try to fix hunk: 2
insert before 200 with         if (den.intValue() < 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 1100
try to fix hunk: 0
insert before 165 with         if (num.intValue() < 0) {

try to fix hunk: 1
insert before 166 with             pos.setIndex(initialIndex);
            return null;
        }

patches are written to file
running tests...
used time: Finished in 22.60 seconds
Failing tests: 1
	org.apache.commons.math.fraction.FractionFormatTest::testParseProperInvalidMinus$catena_1
Can independently fix ['org.apache.commons.math.fraction.FractionFormatTest::testParseProperInvalidMinus$catena_0']
select new bug
Pattern: 1100
failing tests: org.apache.commons.math.fraction.FractionFormatTest::testParseProperInvalidMinus$catena_0
pattern: 0111
try to fix hunk: 1
insert before 166 with             pos.setIndex(initialIndex);
            return null;
        }

try to fix hunk: 2
insert before 200 with         if (den.intValue() < 0) {

try to fix hunk: 3
insert before 201 with             pos.setIndex(initialIndex);
            return null;
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 1011
try to fix hunk: 0
insert before 165 with         if (num.intValue() < 0) {

try to fix hunk: 2
insert before 200 with         if (den.intValue() < 0) {

try to fix hunk: 3
insert before 201 with             pos.setIndex(initialIndex);
            return null;
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 1101
try to fix hunk: 0
insert before 165 with         if (num.intValue() < 0) {

try to fix hunk: 1
insert before 166 with             pos.setIndex(initialIndex);
            return null;
        }

try to fix hunk: 3
insert before 201 with             pos.setIndex(initialIndex);
            return null;
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 1110
try to fix hunk: 0
insert before 165 with         if (num.intValue() < 0) {

try to fix hunk: 1
insert before 166 with             pos.setIndex(initialIndex);
            return null;
        }

try to fix hunk: 2
insert before 200 with         if (den.intValue() < 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 1111
try to fix hunk: 0
insert before 165 with         if (num.intValue() < 0) {

try to fix hunk: 1
insert before 166 with             pos.setIndex(initialIndex);
            return null;
        }

try to fix hunk: 2
insert before 200 with         if (den.intValue() < 0) {

try to fix hunk: 3
insert before 201 with             pos.setIndex(initialIndex);
            return null;
        }

patches are written to file
running tests...
used time: Finished in 17.49 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
Find 2 new bugs
