---
Begin generate bug_id: Lang_65
num_of_hunks: 8
timeout for running: 3600
use working dir: ./working/data/Lang_65
Try to checkout Lang_65
build dir: ['./working/data/Lang_65/target/classes', './working/data/Lang_65/target/tests']
init FileManager
trace file: src/java/org/apache/commons/lang/time/DateUtils.java
trying to replace old failing tests
edit: replace from 896 range 69 at src/test/org/apache/commons/lang/time/DateUtilsTest.java
to
    public void testTruncateLang59$catena_0() throws Exception {

        // Set TimeZone to Mountain Time
        TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
        TimeZone.setDefault(MST_MDT);
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
        format.setTimeZone(MST_MDT);

        Date oct31_01MDT = new Date(1099206000000L); 

        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour
        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes
        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds
        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds

        assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT));                     /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}

        // ------- Demonstrate Problem -------
        Calendar gval = Calendar.getInstance();
        gval.setTime(new Date(oct31_01MDT.getTime()));
        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value
        try{ assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // ---------- Test Truncate ----------
        try{ assertEquals("Truncate Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.DATE",
                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}


        // ---------- Test Round (down) ----------
        try{ assertEquals("Round Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.DATE",
                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // restore default time zone
        TimeZone.setDefault(defaultZone);
    }     public void testTruncateLang59$catena_1() throws Exception {

        // Set TimeZone to Mountain Time
        TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
        TimeZone.setDefault(MST_MDT);
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
        format.setTimeZone(MST_MDT);

        Date oct31_01MDT = new Date(1099206000000L); 

        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour
        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes
        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds
        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds

        try{ assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT));                  /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}

        // ------- Demonstrate Problem -------
        Calendar gval = Calendar.getInstance();
        gval.setTime(new Date(oct31_01MDT.getTime()));
        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value
        try{ assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // ---------- Test Truncate ----------
        try{ assertEquals("Truncate Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.DATE",
                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}


        // ---------- Test Round (down) ----------
        try{ assertEquals("Round Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.DATE",
                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // restore default time zone
        TimeZone.setDefault(defaultZone);
    }     public void testTruncateLang59$catena_2() throws Exception {

        // Set TimeZone to Mountain Time
        TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
        TimeZone.setDefault(MST_MDT);
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
        format.setTimeZone(MST_MDT);

        Date oct31_01MDT = new Date(1099206000000L); 

        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour
        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes
        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds
        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds

        try{ assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT));               /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}

        // ------- Demonstrate Problem -------
        Calendar gval = Calendar.getInstance();
        gval.setTime(new Date(oct31_01MDT.getTime()));
        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value
        try{ assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // ---------- Test Truncate ----------
        try{ assertEquals("Truncate Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.DATE",
                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}


        // ---------- Test Round (down) ----------
        try{ assertEquals("Round Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.DATE",
                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // restore default time zone
        TimeZone.setDefault(defaultZone);
    }     public void testTruncateLang59$catena_3() throws Exception {

        // Set TimeZone to Mountain Time
        TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
        TimeZone.setDefault(MST_MDT);
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
        format.setTimeZone(MST_MDT);

        Date oct31_01MDT = new Date(1099206000000L); 

        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour
        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes
        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds
        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds

        try{ assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT));            /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}

        // ------- Demonstrate Problem -------
        Calendar gval = Calendar.getInstance();
        gval.setTime(new Date(oct31_01MDT.getTime()));
        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value
        try{ assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // ---------- Test Truncate ----------
        try{ assertEquals("Truncate Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.DATE",
                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}


        // ---------- Test Round (down) ----------
        try{ assertEquals("Round Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.DATE",
                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // restore default time zone
        TimeZone.setDefault(defaultZone);
    }     public void testTruncateLang59$catena_4() throws Exception {

        // Set TimeZone to Mountain Time
        TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
        TimeZone.setDefault(MST_MDT);
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
        format.setTimeZone(MST_MDT);

        Date oct31_01MDT = new Date(1099206000000L); 

        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour
        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes
        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds
        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds

        try{ assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT));         /***** ORIGINAL ASSERTION IS HERE *****/

        // ------- Demonstrate Problem -------
        Calendar gval = Calendar.getInstance();
        gval.setTime(new Date(oct31_01MDT.getTime()));
        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value
        try{ assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // ---------- Test Truncate ----------
        try{ assertEquals("Truncate Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.DATE",
                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}


        // ---------- Test Round (down) ----------
        try{ assertEquals("Round Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.DATE",
                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // restore default time zone
        TimeZone.setDefault(defaultZone);
    }     public void testTruncateLang59$catena_5() throws Exception {

        // Set TimeZone to Mountain Time
        TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
        TimeZone.setDefault(MST_MDT);
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
        format.setTimeZone(MST_MDT);

        Date oct31_01MDT = new Date(1099206000000L); 

        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour
        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes
        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds
        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds

        try{ assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}

        // ------- Demonstrate Problem -------
        Calendar gval = Calendar.getInstance();
        gval.setTime(new Date(oct31_01MDT.getTime()));
        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value
        assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);                /***** ORIGINAL ASSERTION IS HERE *****/

        // ---------- Test Truncate ----------
        try{ assertEquals("Truncate Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.DATE",
                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}


        // ---------- Test Round (down) ----------
        try{ assertEquals("Round Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.DATE",
                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // restore default time zone
        TimeZone.setDefault(defaultZone);
    }     public void testTruncateLang59$catena_6() throws Exception {

        // Set TimeZone to Mountain Time
        TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
        TimeZone.setDefault(MST_MDT);
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
        format.setTimeZone(MST_MDT);

        Date oct31_01MDT = new Date(1099206000000L); 

        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour
        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes
        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds
        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds

        try{ assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}

        // ------- Demonstrate Problem -------
        Calendar gval = Calendar.getInstance();
        gval.setTime(new Date(oct31_01MDT.getTime()));
        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value
        try{ assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // ---------- Test Truncate ----------
        assertEquals("Truncate Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  /***** ORIGINAL ASSERTION IS HERE *****/

        try{ assertEquals("Truncate Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.DATE",
                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}


        // ---------- Test Round (down) ----------
        try{ assertEquals("Round Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.DATE",
                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // restore default time zone
        TimeZone.setDefault(defaultZone);
    }     public void testTruncateLang59$catena_7() throws Exception {

        // Set TimeZone to Mountain Time
        TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
        TimeZone.setDefault(MST_MDT);
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
        format.setTimeZone(MST_MDT);

        Date oct31_01MDT = new Date(1099206000000L); 

        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour
        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes
        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds
        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds

        try{ assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}

        // ------- Demonstrate Problem -------
        Calendar gval = Calendar.getInstance();
        gval.setTime(new Date(oct31_01MDT.getTime()));
        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value
        try{ assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // ---------- Test Truncate ----------
        try{ assertEquals("Truncate Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        assertEquals("Truncate Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       /***** ORIGINAL ASSERTION IS HERE *****/

        try{ assertEquals("Truncate Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.DATE",
                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}


        // ---------- Test Round (down) ----------
        try{ assertEquals("Round Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.DATE",
                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // restore default time zone
        TimeZone.setDefault(defaultZone);
    }     public void testTruncateLang59$catena_8() throws Exception {

        // Set TimeZone to Mountain Time
        TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
        TimeZone.setDefault(MST_MDT);
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
        format.setTimeZone(MST_MDT);

        Date oct31_01MDT = new Date(1099206000000L); 

        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour
        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes
        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds
        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds

        try{ assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}

        // ------- Demonstrate Problem -------
        Calendar gval = Calendar.getInstance();
        gval.setTime(new Date(oct31_01MDT.getTime()));
        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value
        try{ assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // ---------- Test Truncate ----------
        try{ assertEquals("Truncate Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        assertEquals("Truncate Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       /***** ORIGINAL ASSERTION IS HERE *****/

        try{ assertEquals("Truncate Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.DATE",
                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}


        // ---------- Test Round (down) ----------
        try{ assertEquals("Round Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.DATE",
                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // restore default time zone
        TimeZone.setDefault(defaultZone);
    }     public void testTruncateLang59$catena_9() throws Exception {

        // Set TimeZone to Mountain Time
        TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
        TimeZone.setDefault(MST_MDT);
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
        format.setTimeZone(MST_MDT);

        Date oct31_01MDT = new Date(1099206000000L); 

        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour
        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes
        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds
        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds

        try{ assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}

        // ------- Demonstrate Problem -------
        Calendar gval = Calendar.getInstance();
        gval.setTime(new Date(oct31_01MDT.getTime()));
        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value
        try{ assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // ---------- Test Truncate ----------
        try{ assertEquals("Truncate Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        assertEquals("Truncate Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  /***** ORIGINAL ASSERTION IS HERE *****/

        try{ assertEquals("Truncate Calendar.HOUR",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.DATE",
                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}


        // ---------- Test Round (down) ----------
        try{ assertEquals("Round Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.DATE",
                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // restore default time zone
        TimeZone.setDefault(defaultZone);
    }     public void testTruncateLang59$catena_10() throws Exception {

        // Set TimeZone to Mountain Time
        TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
        TimeZone.setDefault(MST_MDT);
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
        format.setTimeZone(MST_MDT);

        Date oct31_01MDT = new Date(1099206000000L); 

        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour
        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes
        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds
        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds

        try{ assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}

        // ------- Demonstrate Problem -------
        Calendar gval = Calendar.getInstance();
        gval.setTime(new Date(oct31_01MDT.getTime()));
        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value
        try{ assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // ---------- Test Truncate ----------
        try{ assertEquals("Truncate Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        assertEquals("Truncate Calendar.HOUR",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         /***** ORIGINAL ASSERTION IS HERE *****/

        try{ assertEquals("Truncate Calendar.DATE",
                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}


        // ---------- Test Round (down) ----------
        try{ assertEquals("Round Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.DATE",
                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // restore default time zone
        TimeZone.setDefault(defaultZone);
    }     public void testTruncateLang59$catena_11() throws Exception {

        // Set TimeZone to Mountain Time
        TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
        TimeZone.setDefault(MST_MDT);
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
        format.setTimeZone(MST_MDT);

        Date oct31_01MDT = new Date(1099206000000L); 

        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour
        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes
        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds
        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds

        try{ assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}

        // ------- Demonstrate Problem -------
        Calendar gval = Calendar.getInstance();
        gval.setTime(new Date(oct31_01MDT.getTime()));
        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value
        try{ assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // ---------- Test Truncate ----------
        try{ assertEquals("Truncate Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}

        assertEquals("Truncate Calendar.DATE",
                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         /***** ORIGINAL ASSERTION IS HERE *****/


        // ---------- Test Round (down) ----------
        try{ assertEquals("Round Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.DATE",
                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // restore default time zone
        TimeZone.setDefault(defaultZone);
    }     public void testTruncateLang59$catena_12() throws Exception {

        // Set TimeZone to Mountain Time
        TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
        TimeZone.setDefault(MST_MDT);
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
        format.setTimeZone(MST_MDT);

        Date oct31_01MDT = new Date(1099206000000L); 

        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour
        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes
        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds
        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds

        try{ assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}

        // ------- Demonstrate Problem -------
        Calendar gval = Calendar.getInstance();
        gval.setTime(new Date(oct31_01MDT.getTime()));
        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value
        try{ assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // ---------- Test Truncate ----------
        try{ assertEquals("Truncate Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.DATE",
                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}


        // ---------- Test Round (down) ----------
        assertEquals("Round Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     /***** ORIGINAL ASSERTION IS HERE *****/

        try{ assertEquals("Round Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.DATE",
                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // restore default time zone
        TimeZone.setDefault(defaultZone);
    }     public void testTruncateLang59$catena_13() throws Exception {

        // Set TimeZone to Mountain Time
        TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
        TimeZone.setDefault(MST_MDT);
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
        format.setTimeZone(MST_MDT);

        Date oct31_01MDT = new Date(1099206000000L); 

        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour
        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes
        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds
        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds

        try{ assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}

        // ------- Demonstrate Problem -------
        Calendar gval = Calendar.getInstance();
        gval.setTime(new Date(oct31_01MDT.getTime()));
        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value
        try{ assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // ---------- Test Truncate ----------
        try{ assertEquals("Truncate Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.DATE",
                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}


        // ---------- Test Round (down) ----------
        try{ assertEquals("Round Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        assertEquals("Round Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          /***** ORIGINAL ASSERTION IS HERE *****/

        try{ assertEquals("Round Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.DATE",
                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // restore default time zone
        TimeZone.setDefault(defaultZone);
    }     public void testTruncateLang59$catena_14() throws Exception {

        // Set TimeZone to Mountain Time
        TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
        TimeZone.setDefault(MST_MDT);
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
        format.setTimeZone(MST_MDT);

        Date oct31_01MDT = new Date(1099206000000L); 

        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour
        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes
        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds
        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds

        try{ assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}

        // ------- Demonstrate Problem -------
        Calendar gval = Calendar.getInstance();
        gval.setTime(new Date(oct31_01MDT.getTime()));
        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value
        try{ assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // ---------- Test Truncate ----------
        try{ assertEquals("Truncate Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.DATE",
                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}


        // ---------- Test Round (down) ----------
        try{ assertEquals("Round Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        assertEquals("Round Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          /***** ORIGINAL ASSERTION IS HERE *****/

        try{ assertEquals("Round Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.DATE",
                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // restore default time zone
        TimeZone.setDefault(defaultZone);
    }     public void testTruncateLang59$catena_15() throws Exception {

        // Set TimeZone to Mountain Time
        TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
        TimeZone.setDefault(MST_MDT);
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
        format.setTimeZone(MST_MDT);

        Date oct31_01MDT = new Date(1099206000000L); 

        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour
        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes
        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds
        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds

        try{ assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}

        // ------- Demonstrate Problem -------
        Calendar gval = Calendar.getInstance();
        gval.setTime(new Date(oct31_01MDT.getTime()));
        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value
        try{ assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // ---------- Test Truncate ----------
        try{ assertEquals("Truncate Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.DATE",
                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}


        // ---------- Test Round (down) ----------
        try{ assertEquals("Round Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        assertEquals("Round Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     /***** ORIGINAL ASSERTION IS HERE *****/

        try{ assertEquals("Round Calendar.HOUR",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.DATE",
                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // restore default time zone
        TimeZone.setDefault(defaultZone);
    }     public void testTruncateLang59$catena_16() throws Exception {

        // Set TimeZone to Mountain Time
        TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
        TimeZone.setDefault(MST_MDT);
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
        format.setTimeZone(MST_MDT);

        Date oct31_01MDT = new Date(1099206000000L); 

        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour
        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes
        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds
        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds

        try{ assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}

        // ------- Demonstrate Problem -------
        Calendar gval = Calendar.getInstance();
        gval.setTime(new Date(oct31_01MDT.getTime()));
        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value
        try{ assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // ---------- Test Truncate ----------
        try{ assertEquals("Truncate Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.DATE",
                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}


        // ---------- Test Round (down) ----------
        try{ assertEquals("Round Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        assertEquals("Round Calendar.HOUR",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            /***** ORIGINAL ASSERTION IS HERE *****/

        try{ assertEquals("Round Calendar.DATE",
                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // restore default time zone
        TimeZone.setDefault(defaultZone);
    }     public void testTruncateLang59$catena_17() throws Exception {

        // Set TimeZone to Mountain Time
        TimeZone MST_MDT = TimeZone.getTimeZone("MST7MDT");
        TimeZone.setDefault(MST_MDT);
        DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS z");
        format.setTimeZone(MST_MDT);

        Date oct31_01MDT = new Date(1099206000000L); 

        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour
        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes
        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds
        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds

        try{ assertEquals("Check 00:00:00.000", "2004-10-31 00:00:00.000 MDT", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:00:00.000", "2004-10-31 01:00:00.000 MDT", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:00.000", "2004-10-31 01:02:00.000 MDT", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.000", "2004-10-31 01:02:03.000 MDT", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Check 01:02:03.004", "2004-10-31 01:02:03.004 MDT", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}

        // ------- Demonstrate Problem -------
        Calendar gval = Calendar.getInstance();
        gval.setTime(new Date(oct31_01MDT.getTime()));
        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value
        try{ assertEquals("Demonstrate Problem", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // ---------- Test Truncate ----------
        try{ assertEquals("Truncate Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.HOUR",
                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Truncate Calendar.DATE",
                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}


        // ---------- Test Round (down) ----------
        try{ assertEquals("Round Calendar.MILLISECOND",
                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.SECOND",
                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.MINUTE",
                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR_OF_DAY",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}

        try{ assertEquals("Round Calendar.HOUR",
                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}

        assertEquals("Round Calendar.DATE",
                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            /***** ORIGINAL ASSERTION IS HERE *****/

        // restore default time zone
        TimeZone.setDefault(defaultZone);
    }
trace file: src/test/org/apache/commons/lang/time/DateUtilsTest.java
new test num: 18
ori test num: 0
pattern: 00000000
patches are written to file
running tests...
used time: Finished in 24.39 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
processed: 00000000
pattern: 00000001
try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000001
pattern: 00000010
try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000010
pattern: 00000100
try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000100
pattern: 00001000
try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001000
pattern: 00010000
try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010000
pattern: 00100000
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100000
pattern: 01000000
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

patches are written to file
running tests...
used time: Finished in 22.67 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
No new failing tests but only 1 hunk
processed: 01000000
pattern: 10000000
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

patches are written to file
running tests...
used time: Finished in 21.58 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
No new failing tests but only 1 hunk
processed: 10000000
pattern: 00000011
try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 17.79 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 00000011
pattern: 00000101
try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000101
pattern: 00000110
try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000110
pattern: 00001001
try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001001
pattern: 00001010
try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001010
pattern: 00001100
try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001100
pattern: 00010001
try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010001
pattern: 00010010
try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010010
pattern: 00010100
try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010100
pattern: 00011000
try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011000
pattern: 00100001
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100001
pattern: 00100010
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100010
pattern: 00100100
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100100
pattern: 00101000
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101000
pattern: 00110000
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110000
pattern: 01000001
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000001
pattern: 01000010
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000010
pattern: 01000100
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
used time: Finished in 19.68 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 01000100
pattern: 01001000
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

patches are written to file
running tests...
used time: Finished in 17.59 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 01001000
pattern: 01010000
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

patches are written to file
running tests...
used time: Finished in 16.79 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 01010000
pattern: 01100000
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

patches are written to file
running tests...
used time: Finished in 20.34 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 01100000
pattern: 10000001
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000001
pattern: 10000010
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000010
pattern: 10000100
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000100
pattern: 10001000
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10001000
pattern: 10010000
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10010000
pattern: 10100000
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10100000
pattern: 11000000
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

patches are written to file
running tests...
used time: Finished in 17.50 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 11000000
pattern: 00000111
try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00000111
pattern: 00001011
try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001011
pattern: 00001101
try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001101
pattern: 00001110
try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001110
pattern: 00010011
try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010011
pattern: 00010101
try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010101
pattern: 00010110
try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010110
pattern: 00011001
try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011001
pattern: 00011010
try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011010
pattern: 00011100
try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011100
pattern: 00100011
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100011
pattern: 00100101
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100101
pattern: 00100110
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100110
pattern: 00101001
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101001
pattern: 00101010
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101010
pattern: 00101100
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101100
pattern: 00110001
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110001
pattern: 00110010
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110010
pattern: 00110100
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110100
pattern: 00111000
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00111000
pattern: 01000011
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 21.45 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 01000011
pattern: 01000101
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000101
pattern: 01000110
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01000110
pattern: 01001001
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01001001
pattern: 01001010
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01001010
pattern: 01001100
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
used time: Finished in 19.22 seconds
Failing tests: 12
	org.apache.commons.lang.time.DateUtilsTest::testTruncate
	org.apache.commons.lang.time.DateUtilsTest::testRound
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_12
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_6
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Includes new failing tests, set to unusable
processed: 01001100
pattern: 01010001
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01010001
pattern: 01010010
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01010010
pattern: 01010100
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
used time: Finished in 21.40 seconds
Failing tests: 12
	org.apache.commons.lang.time.DateUtilsTest::testTruncate
	org.apache.commons.lang.time.DateUtilsTest::testRound
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_12
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_6
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Includes new failing tests, set to unusable
processed: 01010100
pattern: 01011000
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

patches are written to file
running tests...
used time: Finished in 18.90 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 01011000
pattern: 01100001
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01100001
pattern: 01100010
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01100010
pattern: 01100100
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
used time: Finished in 21.49 seconds
Failing tests: 10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_12
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_6
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Includes new failing tests, set to unusable
processed: 01100100
pattern: 01101000
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

patches are written to file
running tests...
used time: Finished in 19.41 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 01101000
pattern: 01110000
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

patches are written to file
running tests...
used time: Finished in 21.04 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 01110000
pattern: 10000011
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 21.61 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 10000011
pattern: 10000101
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000101
pattern: 10000110
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000110
pattern: 10001001
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10001001
pattern: 10001010
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10001010
pattern: 10001100
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10001100
pattern: 10010001
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10010001
pattern: 10010010
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10010010
pattern: 10010100
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10010100
pattern: 10011000
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10011000
pattern: 10100001
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10100001
pattern: 10100010
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10100010
pattern: 10100100
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10100100
pattern: 10101000
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10101000
pattern: 10110000
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10110000
pattern: 11000001
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11000001
pattern: 11000010
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11000010
pattern: 11000100
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
used time: Finished in 18.71 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 11000100
pattern: 11001000
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

patches are written to file
running tests...
used time: Finished in 19.76 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 11001000
pattern: 11010000
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

patches are written to file
running tests...
used time: Finished in 18.90 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 11010000
pattern: 11100000
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

patches are written to file
running tests...
used time: Finished in 19.47 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 11100000
pattern: 00001111
try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00001111
pattern: 00010111
try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00010111
pattern: 00011011
try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011011
pattern: 00011101
try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011101
pattern: 00011110
try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011110
pattern: 00100111
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00100111
pattern: 00101011
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101011
pattern: 00101101
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101101
pattern: 00101110
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101110
pattern: 00110011
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110011
pattern: 00110101
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110101
pattern: 00110110
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110110
pattern: 00111001
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00111001
pattern: 00111010
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00111010
pattern: 00111100
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00111100
pattern: 01000111
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 21.50 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 01000111
pattern: 01001011
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 17.56 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 01001011
pattern: 01001101
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01001101
pattern: 01001110
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01001110
pattern: 01010011
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 19.42 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 01010011
pattern: 01010101
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01010101
pattern: 01010110
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01010110
pattern: 01011001
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01011001
pattern: 01011010
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01011010
pattern: 01011100
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
used time: Finished in 23.36 seconds
Failing tests: 12
	org.apache.commons.lang.time.DateUtilsTest::testTruncate
	org.apache.commons.lang.time.DateUtilsTest::testRound
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_12
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_6
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Includes new failing tests, set to unusable
processed: 01011100
pattern: 01100011
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 19.31 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 01100011
pattern: 01100101
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01100101
pattern: 01100110
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01100110
pattern: 01101001
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01101001
pattern: 01101010
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01101010
pattern: 01101100
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
used time: Finished in 20.21 seconds
Failing tests: 12
	org.apache.commons.lang.time.DateUtilsTest::testTruncate
	org.apache.commons.lang.time.DateUtilsTest::testRound
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_12
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_6
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Includes new failing tests, set to unusable
processed: 01101100
pattern: 01110001
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01110001
pattern: 01110010
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01110010
pattern: 01110100
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
used time: Finished in 20.46 seconds
Failing tests: 10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_12
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_6
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Includes new failing tests, set to unusable
processed: 01110100
pattern: 01111000
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

patches are written to file
running tests...
used time: Finished in 19.86 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 01111000
pattern: 10000111
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10000111
pattern: 10001011
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10001011
pattern: 10001101
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10001101
pattern: 10001110
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10001110
pattern: 10010011
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10010011
pattern: 10010101
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10010101
pattern: 10010110
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10010110
pattern: 10011001
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10011001
pattern: 10011010
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10011010
pattern: 10011100
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10011100
pattern: 10100011
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10100011
pattern: 10100101
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10100101
pattern: 10100110
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10100110
pattern: 10101001
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10101001
pattern: 10101010
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10101010
pattern: 10101100
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10101100
pattern: 10110001
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10110001
pattern: 10110010
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10110010
pattern: 10110100
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10110100
pattern: 10111000
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10111000
pattern: 11000011
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 19.63 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 11000011
pattern: 11000101
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11000101
pattern: 11000110
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11000110
pattern: 11001001
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11001001
pattern: 11001010
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11001010
pattern: 11001100
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
used time: Finished in 19.85 seconds
Failing tests: 10
	org.apache.commons.lang.time.DateUtilsTest::testTruncate
	org.apache.commons.lang.time.DateUtilsTest::testRound
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Includes new failing tests, set to unusable
processed: 11001100
pattern: 11010001
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11010001
pattern: 11010010
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11010010
pattern: 11010100
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
used time: Finished in 20.90 seconds
Failing tests: 10
	org.apache.commons.lang.time.DateUtilsTest::testTruncate
	org.apache.commons.lang.time.DateUtilsTest::testRound
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Includes new failing tests, set to unusable
processed: 11010100
pattern: 11011000
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

patches are written to file
running tests...
used time: Finished in 21.75 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 11011000
pattern: 11100001
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11100001
pattern: 11100010
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11100010
pattern: 11100100
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
used time: Finished in 22.59 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 11100100
pattern: 11101000
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

patches are written to file
running tests...
used time: Finished in 18.92 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 11101000
pattern: 11110000
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

patches are written to file
running tests...
used time: Finished in 22.05 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 11110000
pattern: 00011111
try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00011111
pattern: 00101111
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00101111
pattern: 00110111
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00110111
pattern: 00111011
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00111011
pattern: 00111101
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00111101
pattern: 00111110
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00111110
pattern: 01001111
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 19.31 seconds
Failing tests: 12
	org.apache.commons.lang.time.DateUtilsTest::testTruncate
	org.apache.commons.lang.time.DateUtilsTest::testRound
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_12
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_6
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Includes new failing tests, set to unusable
processed: 01001111
pattern: 01010111
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 24.18 seconds
Failing tests: 12
	org.apache.commons.lang.time.DateUtilsTest::testTruncate
	org.apache.commons.lang.time.DateUtilsTest::testRound
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_12
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_6
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Includes new failing tests, set to unusable
processed: 01010111
pattern: 01011011
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 19.63 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 01011011
pattern: 01011101
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01011101
pattern: 01011110
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01011110
pattern: 01100111
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 21.11 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_12
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_6
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Includes new failing tests, set to unusable
processed: 01100111
pattern: 01101011
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 23.10 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 01101011
pattern: 01101101
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01101101
pattern: 01101110
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01101110
pattern: 01110011
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 21.97 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 01110011
pattern: 01110101
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01110101
pattern: 01110110
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01110110
pattern: 01111001
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01111001
pattern: 01111010
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01111010
pattern: 01111100
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
used time: Finished in 23.57 seconds
Failing tests: 10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_12
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_6
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Includes new failing tests, set to unusable
processed: 01111100
pattern: 10001111
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10001111
pattern: 10010111
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10010111
pattern: 10011011
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10011011
pattern: 10011101
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10011101
pattern: 10011110
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10011110
pattern: 10100111
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10100111
pattern: 10101011
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10101011
pattern: 10101101
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10101101
pattern: 10101110
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10101110
pattern: 10110011
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10110011
pattern: 10110101
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10110101
pattern: 10110110
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10110110
pattern: 10111001
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10111001
pattern: 10111010
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10111010
pattern: 10111100
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10111100
pattern: 11000111
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 21.61 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 11000111
pattern: 11001011
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 20.57 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 11001011
pattern: 11001101
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11001101
pattern: 11001110
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11001110
pattern: 11010011
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 21.41 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 11010011
pattern: 11010101
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11010101
pattern: 11010110
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11010110
pattern: 11011001
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11011001
pattern: 11011010
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11011010
pattern: 11011100
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
used time: Finished in 27.86 seconds
Failing tests: 10
	org.apache.commons.lang.time.DateUtilsTest::testTruncate
	org.apache.commons.lang.time.DateUtilsTest::testRound
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Includes new failing tests, set to unusable
processed: 11011100
pattern: 11100011
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 21.33 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 11100011
pattern: 11100101
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11100101
pattern: 11100110
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11100110
pattern: 11101001
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11101001
pattern: 11101010
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11101010
pattern: 11101100
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
used time: Finished in 20.77 seconds
Failing tests: 10
	org.apache.commons.lang.time.DateUtilsTest::testTruncate
	org.apache.commons.lang.time.DateUtilsTest::testRound
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Includes new failing tests, set to unusable
processed: 11101100
pattern: 11110001
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11110001
pattern: 11110010
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11110010
pattern: 11110100
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
used time: Finished in 19.75 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 11110100
pattern: 11111000
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

patches are written to file
running tests...
used time: Finished in 23.17 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 11111000
pattern: 00111111
try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 00111111
pattern: 01011111
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 22.63 seconds
Failing tests: 12
	org.apache.commons.lang.time.DateUtilsTest::testTruncate
	org.apache.commons.lang.time.DateUtilsTest::testRound
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_12
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_6
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Includes new failing tests, set to unusable
processed: 01011111
pattern: 01101111
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 25.72 seconds
Failing tests: 10
	org.apache.commons.lang.time.DateUtilsTest::testTruncate
	org.apache.commons.lang.time.DateUtilsTest::testRound
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_12
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_6
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Includes new failing tests, set to unusable
processed: 01101111
pattern: 01110111
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 25.56 seconds
Failing tests: 6
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_12
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_6
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Includes new failing tests, set to unusable
processed: 01110111
pattern: 01111011
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 27.16 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 01111011
pattern: 01111101
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01111101
pattern: 01111110
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01111110
pattern: 10011111
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10011111
pattern: 10101111
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10101111
pattern: 10110111
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10110111
pattern: 10111011
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10111011
pattern: 10111101
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10111101
pattern: 10111110
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10111110
pattern: 11001111
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 24.79 seconds
Failing tests: 10
	org.apache.commons.lang.time.DateUtilsTest::testTruncate
	org.apache.commons.lang.time.DateUtilsTest::testRound
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Includes new failing tests, set to unusable
processed: 11001111
pattern: 11010111
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 21.38 seconds
Failing tests: 10
	org.apache.commons.lang.time.DateUtilsTest::testTruncate
	org.apache.commons.lang.time.DateUtilsTest::testRound
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Includes new failing tests, set to unusable
processed: 11010111
pattern: 11011011
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 20.60 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 11011011
pattern: 11011101
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11011101
pattern: 11011110
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11011110
pattern: 11100111
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 23.82 seconds
Failing tests: 6
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix ['org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7', 'org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13']
select new bug
Pattern: 11100111
new failing tests:
org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
Save found bug
processed: 11100111
pattern: 11101011
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 27.63 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 11101011
pattern: 11101101
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11101101
pattern: 11101110
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11101110
pattern: 11110011
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 22.00 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 11110011
pattern: 11110101
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11110101
pattern: 11110110
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11110110
pattern: 11111001
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11111001
pattern: 11111010
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11111010
pattern: 11111100
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

patches are written to file
running tests...
used time: Finished in 25.01 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 11111100
pattern: 01111111
try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 24.63 seconds
Failing tests: 2
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_12
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_6
Includes new failing tests, set to unusable
processed: 01111111
pattern: 10111111
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10111111
pattern: 11011111
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 20.51 seconds
Failing tests: 10
	org.apache.commons.lang.time.DateUtilsTest::testTruncate
	org.apache.commons.lang.time.DateUtilsTest::testRound
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Includes new failing tests, set to unusable
processed: 11011111
pattern: 11101111
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 25.58 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncate
	org.apache.commons.lang.time.DateUtilsTest::testRound
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Includes new failing tests, set to unusable
processed: 11101111
pattern: 11110111
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 25.54 seconds
Failing tests: 4
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix ['org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8', 'org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14']
select new bug
Pattern: 11110111
new failing tests:
org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
Save found bug
processed: 11110111
pattern: 11111011
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 23.71 seconds
Failing tests: 8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8
	org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Can independently fix []
Could not fix independently
processed: 11111011
pattern: 11111101
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11111101
pattern: 11111110
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 11111110
pattern: 11111111
try to fix hunk: 0
insert before 624 with         if (field == Calendar.MILLISECOND) {
            return;
        }

try to fix hunk: 1
insert before 631 with         Date date = val.getTime();
        long time = date.getTime();
        boolean done = false;

try to fix hunk: 2
insert before 633 with         int millisecs = val.get(Calendar.MILLISECOND);
        if (!round || millisecs < 500) {
            time = time - millisecs;
            if (field == Calendar.SECOND) {
                done = true;
            }
        }

try to fix hunk: 3
insert before 635 with         int seconds = val.get(Calendar.SECOND);
        if (!done && (!round || seconds < 30)) {
            time = time - (seconds * 1000L);
            if (field == Calendar.MINUTE) {
                done = true;
            }
        }

try to fix hunk: 4
insert before 637 with         int minutes = val.get(Calendar.MINUTE);
        if (!done && (!round || minutes < 30)) {
            time = time - (minutes * 60000L);
        }

try to fix hunk: 5
insert before 639 with         if (date.getTime() != time) {
            date.setTime(time);
            val.setTime(date);
        }

try to fix hunk: 6
insert before 709 with             if (offset != 0) {

try to fix hunk: 7
insert before 710 with             }

patches are written to file
running tests...
used time: Finished in 21.43 seconds
Failing tests: 0
Can independently fix ['org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16', 'org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10', 'org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15', 'org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9']
select new bug
Pattern: 11111111
new failing tests:
org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16
org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10
org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15
org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9
Save found bug
processed: 11111111
Find 3 new bugs
