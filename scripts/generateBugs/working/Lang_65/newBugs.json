{
    "original": {
        "num_of_hunks": 8,
        "0": {
            "file_name": "src/java/org/apache/commons/lang/time/DateUtils.java",
            "replaced_with": "        if (field == Calendar.MILLISECOND) {\n            return;\n        }\n",
            "patch_type": "insert",
            "next_line_no": 624
        },
        "1": {
            "file_name": "src/java/org/apache/commons/lang/time/DateUtils.java",
            "replaced_with": "        Date date = val.getTime();\n        long time = date.getTime();\n        boolean done = false;\n",
            "patch_type": "insert",
            "next_line_no": 631
        },
        "2": {
            "file_name": "src/java/org/apache/commons/lang/time/DateUtils.java",
            "replaced_with": "        int millisecs = val.get(Calendar.MILLISECOND);\n        if (!round || millisecs < 500) {\n            time = time - millisecs;\n            if (field == Calendar.SECOND) {\n                done = true;\n            }\n        }\n",
            "patch_type": "insert",
            "next_line_no": 633
        },
        "3": {
            "file_name": "src/java/org/apache/commons/lang/time/DateUtils.java",
            "replaced_with": "        int seconds = val.get(Calendar.SECOND);\n        if (!done && (!round || seconds < 30)) {\n            time = time - (seconds * 1000L);\n            if (field == Calendar.MINUTE) {\n                done = true;\n            }\n        }\n",
            "patch_type": "insert",
            "next_line_no": 635
        },
        "4": {
            "file_name": "src/java/org/apache/commons/lang/time/DateUtils.java",
            "replaced_with": "        int minutes = val.get(Calendar.MINUTE);\n        if (!done && (!round || minutes < 30)) {\n            time = time - (minutes * 60000L);\n        }\n",
            "patch_type": "insert",
            "next_line_no": 637
        },
        "5": {
            "file_name": "src/java/org/apache/commons/lang/time/DateUtils.java",
            "replaced_with": "        if (date.getTime() != time) {\n            date.setTime(time);\n            val.setTime(date);\n        }\n",
            "patch_type": "insert",
            "next_line_no": 639
        },
        "6": {
            "file_name": "src/java/org/apache/commons/lang/time/DateUtils.java",
            "replaced_with": "            if (offset != 0) {\n",
            "patch_type": "insert",
            "next_line_no": 709
        },
        "7": {
            "file_name": "src/java/org/apache/commons/lang/time/DateUtils.java",
            "replaced_with": "            }\n",
            "patch_type": "insert",
            "next_line_no": 710
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59"
        ],
        "org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59": {
            "file_path": "src/test/org/apache/commons/lang/time/DateUtilsTest.java",
            "Instance": "Begin: Pos(896, 12)\nEnd: Pos(964, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_65/src/test//org/apache/commons/lang/time/DateUtilsTest.java\nName: testTruncateLang59\nChilds: [StatementAssertion<Begin: Pos(911, 9), End: Pos(911, 99)>,\nStatementAssertion<Begin: Pos(912, 9), End: Pos(912, 102)>,\nStatementAssertion<Begin: Pos(913, 9), End: Pos(913, 105)>,\nStatementAssertion<Begin: Pos(914, 9), End: Pos(914, 108)>,\nStatementAssertion<Begin: Pos(915, 9), End: Pos(915, 111)>,\nStatementAssertion<Begin: Pos(921, 9), End: Pos(921, 104)>,\nStatementAssertion<Begin: Pos(924, 9), End: Pos(925, 102)>,\nStatementAssertion<Begin: Pos(927, 9), End: Pos(928, 97)>,\nStatementAssertion<Begin: Pos(930, 9), End: Pos(931, 97)>,\nStatementAssertion<Begin: Pos(933, 9), End: Pos(934, 102)>,\nStatementAssertion<Begin: Pos(936, 9), End: Pos(937, 95)>,\nStatementAssertion<Begin: Pos(939, 9), End: Pos(940, 95)>,\nStatementAssertion<Begin: Pos(944, 9), End: Pos(945, 99)>,\nStatementAssertion<Begin: Pos(947, 9), End: Pos(948, 94)>,\nStatementAssertion<Begin: Pos(950, 9), End: Pos(951, 94)>,\nStatementAssertion<Begin: Pos(953, 9), End: Pos(954, 99)>,\nStatementAssertion<Begin: Pos(956, 9), End: Pos(957, 92)>,\nStatementAssertion<Begin: Pos(959, 9), End: Pos(960, 92)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_65/src/test//org/apache/commons/lang/time/DateUtilsTest.java",
            "name": "testTruncateLang59",
            "begin": "Pos(896, 12)",
            "end": "Pos(964, 5)",
            "begin_line_no": 896,
            "end_line_no": 964,
            "child": [
                "Begin: Pos(911, 9)\nEnd: Pos(911, 99)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(912, 9)\nEnd: Pos(912, 102)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(913, 9)\nEnd: Pos(913, 105)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(914, 9)\nEnd: Pos(914, 108)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(915, 9)\nEnd: Pos(915, 111)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(921, 9)\nEnd: Pos(921, 104)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(924, 9)\nEnd: Pos(925, 102)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(927, 9)\nEnd: Pos(928, 97)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(930, 9)\nEnd: Pos(931, 97)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(933, 9)\nEnd: Pos(934, 102)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(936, 9)\nEnd: Pos(937, 95)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(939, 9)\nEnd: Pos(940, 95)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(944, 9)\nEnd: Pos(945, 99)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(947, 9)\nEnd: Pos(948, 94)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(950, 9)\nEnd: Pos(951, 94)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(953, 9)\nEnd: Pos(954, 99)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(956, 9)\nEnd: Pos(957, 92)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(959, 9)\nEnd: Pos(960, 92)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testTruncateLang59$catena_0() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "    public void testTruncateLang59$catena_1() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "    public void testTruncateLang59$catena_2() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "    public void testTruncateLang59$catena_3() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "    public void testTruncateLang59$catena_4() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));         /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "    public void testTruncateLang59$catena_5() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "    public void testTruncateLang59$catena_6() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "    public void testTruncateLang59$catena_7() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "    public void testTruncateLang59$catena_8() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "    public void testTruncateLang59$catena_9() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "    public void testTruncateLang59$catena_10() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "    public void testTruncateLang59$catena_11() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "    public void testTruncateLang59$catena_12() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "    public void testTruncateLang59$catena_13() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "    public void testTruncateLang59$catena_14() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "    public void testTruncateLang59$catena_15() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "    public void testTruncateLang59$catena_16() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "    public void testTruncateLang59$catena_17() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }"
            ],
            "func": {
                "0": "    public void testTruncateLang59$catena_0() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "1": "    public void testTruncateLang59$catena_1() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "2": "    public void testTruncateLang59$catena_2() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "3": "    public void testTruncateLang59$catena_3() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "4": "    public void testTruncateLang59$catena_4() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));         /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "5": "    public void testTruncateLang59$catena_5() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "6": "    public void testTruncateLang59$catena_6() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "7": "    public void testTruncateLang59$catena_7() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "8": "    public void testTruncateLang59$catena_8() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "9": "    public void testTruncateLang59$catena_9() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "10": "    public void testTruncateLang59$catena_10() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "11": "    public void testTruncateLang59$catena_11() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         /***** ORIGINAL ASSERTION IS HERE *****/\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "12": "    public void testTruncateLang59$catena_12() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "13": "    public void testTruncateLang59$catena_13() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "14": "    public void testTruncateLang59$catena_14() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "15": "    public void testTruncateLang59$catena_15() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "16": "    public void testTruncateLang59$catena_16() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }",
                "17": "    public void testTruncateLang59$catena_17() throws Exception {\n\n        // Set TimeZone to Mountain Time\n        TimeZone MST_MDT = TimeZone.getTimeZone(\"MST7MDT\");\n        TimeZone.setDefault(MST_MDT);\n        DateFormat format = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS z\");\n        format.setTimeZone(MST_MDT);\n\n        Date oct31_01MDT = new Date(1099206000000L); \n\n        Date oct31MDT             = new Date(oct31_01MDT.getTime()       - 3600000L); // - 1 hour\n        Date oct31_01_02MDT       = new Date(oct31_01MDT.getTime()       + 120000L);  // + 2 minutes\n        Date oct31_01_02_03MDT    = new Date(oct31_01_02MDT.getTime()    + 3000L);    // + 3 seconds\n        Date oct31_01_02_03_04MDT = new Date(oct31_01_02_03MDT.getTime() + 4L);       // + 4 milliseconds\n\n        try{ assertEquals(\"Check 00:00:00.000\", \"2004-10-31 00:00:00.000 MDT\", format.format(oct31MDT));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:00:00.000\", \"2004-10-31 01:00:00.000 MDT\", format.format(oct31_01MDT));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:00.000\", \"2004-10-31 01:02:00.000 MDT\", format.format(oct31_01_02MDT));          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.000\", \"2004-10-31 01:02:03.000 MDT\", format.format(oct31_01_02_03MDT));       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Check 01:02:03.004\", \"2004-10-31 01:02:03.004 MDT\", format.format(oct31_01_02_03_04MDT));    }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ------- Demonstrate Problem -------\n        Calendar gval = Calendar.getInstance();\n        gval.setTime(new Date(oct31_01MDT.getTime()));\n        gval.set(Calendar.MINUTE, gval.get(Calendar.MINUTE)); // set minutes to the same value\n        try{ assertEquals(\"Demonstrate Problem\", gval.getTime().getTime(), oct31_01MDT.getTime() + 3600000L);           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // ---------- Test Truncate ----------\n        try{ assertEquals(\"Truncate Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.SECOND));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.MINUTE));                       }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.HOUR));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Truncate Calendar.DATE\",\n                            oct31MDT, DateUtils.truncate(oct31_01_02_03_04MDT, Calendar.DATE));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n\n\n        // ---------- Test Round (down) ----------\n        try{ assertEquals(\"Round Calendar.MILLISECOND\",\n                oct31_01_02_03_04MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MILLISECOND));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.SECOND\",\n                   oct31_01_02_03MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.SECOND));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.MINUTE\",\n                      oct31_01_02MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.MINUTE));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR_OF_DAY\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR_OF_DAY));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(\"Round Calendar.HOUR\",\n                         oct31_01MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.HOUR));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(\"Round Calendar.DATE\",\n                            oct31MDT, DateUtils.round(oct31_01_02_03_04MDT, Calendar.DATE));                            /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // restore default time zone\n        TimeZone.setDefault(defaultZone);\n    }"
            }
        }
    },
    "11100111": {
        "failing_tests": [
            "org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_7",
            "org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_13"
        ]
    },
    "11110111": {
        "failing_tests": [
            "org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_8",
            "org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_14"
        ]
    },
    "11111111": {
        "failing_tests": [
            "org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_16",
            "org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_10",
            "org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_15",
            "org.apache.commons.lang.time.DateUtilsTest::testTruncateLang59$catena_9"
        ]
    }
}