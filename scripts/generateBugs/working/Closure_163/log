---
Begin generate bug_id: Closure_163
num_of_hunks: 51
NOTICE: may not contains full fix patterns for hunks are too much (51 hunks)
timeout for running: 3600
use working dir: ./working/data/Closure_163
Try to checkout Closure_163
build dir: ['./working/data/Closure_163/build/classes', './working/data/Closure_163/build/test']
init FileManager
trace file: src/com/google/javascript/jscomp/AnalyzePrototypeProperties.java
trace file: src/com/google/javascript/jscomp/CrossModuleMethodMotion.java
trying to replace old failing tests
new test num: 0
ori test num: 3
pattern: 000000000000000000000000000000000000000000000000000
patches are written to file
running tests...
used time: Finished in 231.94 seconds
Failing tests: 3
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600b
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600e
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600
processed: 000000000000000000000000000000000000000000000000000
pattern: 100000000000000000000000000000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
patches are written to file
running tests...
used time: Finished in 211.89 seconds
Failing tests: 70
	com.google.javascript.jscomp.CommandLineRunnerTest::testGetMsgWiring
	com.google.javascript.jscomp.CommandLineRunnerTest::testGoogAssertStripping
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue601b
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue601c
	com.google.javascript.jscomp.CommandLineRunnerTest::testReflectedMethods
	com.google.javascript.jscomp.CommandLineRunnerTest::testCheckGlobalThisOnWithAdvancedMode
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue504
	com.google.javascript.jscomp.CommandLineRunnerTest::testDebugFlag3
	com.google.javascript.jscomp.CommandLineRunnerTest::testDebugFlag4
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testInnerFunctionClosureVariableReads
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeRecursiveMethod
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsUsedInTwoModules
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testNoClosureVariableReads1
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testNoClosureVariableReads2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testGlobalFunctionsInGraph
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsInRightOrder2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testCantMovePrototypeProp
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testTwoMethods2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeMethod1
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeMethod2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeMethod3
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsUsedInTwoModules2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testClosureVariableReads1
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testClosureVariableReads2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600b
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600c
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600d
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600e
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsInRightOrder
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testUsingAnonymousObjectsToDefeatRemoval
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing1
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing2
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing3
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing4
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing5
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing6
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing7
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testMethodsFromExternsFileNotExported
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGetterBaseline
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testExternMethodsFromExternsFile
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGetter1
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGetter2
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph2
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph3
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph4
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph5
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph6
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph7
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testNeverRemoveImplicitlyUsedProperties
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAnalyzePrototypeProperties
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testExportedMethodsByNamingConventionAlwaysExported
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testExportedMethodsByNamingConvention
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testPropertiesDefinedWithGetElem
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testPropertyDefinedInBranch
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testStatementRestriction
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testPropertyReferenceGraph
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeCascadedInline
	com.google.javascript.jscomp.SpecializeModuleTest::testDontSpecializeAliasedFunctions_inline
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeRemoveUnusedProperties
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInlineWithMultipleDependents
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeDevirtualizePrototypeMethods
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInlineWithNamespaces
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeDevirtualizePrototypeMethodsWithInline
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInline
	com.google.javascript.jscomp.SpecializeModuleTest::testDontSpecializeAliasedFunctions_remove_unused_properties
	com.google.javascript.jscomp.SpecializeModuleTest::testDontSpecializeLocalNonAnonymousFunctions
	com.google.javascript.jscomp.SpecializeModuleTest::testAddDummyVarsForRemovedFunctions
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInlineWithRegularFunctions
Includes new failing tests, set to unusable
processed: 100000000000000000000000000000000000000000000000000
pattern: 010000000000000000000000000000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000000000000000000000000000000000000000
pattern: 001000000000000000000000000000000000000000000000000
try to fix hunk: 2
insert before 212 with           symbolStack.push(new NameContext(anonymousNode, t.getScope()));
        }
      } else {
        Preconditions.checkState(t.inGlobalScope());
        symbolStack.push(new NameContext(globalNode, t.getScope()));
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001000000000000000000000000000000000000000000000000
pattern: 000100000000000000000000000000000000000000000000000
try to fix hunk: 3
replace from 216 with range 1 to
      symbolStack.pop();

patches are written to file
running tests...
used time: Finished in 208.15 seconds
Failing tests: 69
	com.google.javascript.jscomp.CommandLineRunnerTest::testGetMsgWiring
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue601b
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue601c
	com.google.javascript.jscomp.CommandLineRunnerTest::testReflectedMethods
	com.google.javascript.jscomp.CommandLineRunnerTest::testCheckGlobalThisOnWithAdvancedMode
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue504
	com.google.javascript.jscomp.CommandLineRunnerTest::testDebugFlag3
	com.google.javascript.jscomp.CommandLineRunnerTest::testDebugFlag4
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testInnerFunctionClosureVariableReads
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeRecursiveMethod
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsUsedInTwoModules
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testNoClosureVariableReads1
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testNoClosureVariableReads2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testGlobalFunctionsInGraph
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsInRightOrder2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testCantMovePrototypeProp
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testTwoMethods2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeMethod1
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeMethod2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeMethod3
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsUsedInTwoModules2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testClosureVariableReads1
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testClosureVariableReads2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600b
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600c
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600d
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600e
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsInRightOrder
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testUsingAnonymousObjectsToDefeatRemoval
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing1
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing2
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing3
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing4
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing5
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing6
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing7
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testMethodsFromExternsFileNotExported
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGetterBaseline
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testExternMethodsFromExternsFile
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGetter1
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGetter2
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph2
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph3
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph4
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph5
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph6
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph7
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testNeverRemoveImplicitlyUsedProperties
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAnalyzePrototypeProperties
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testExportedMethodsByNamingConventionAlwaysExported
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testExportedMethodsByNamingConvention
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testPropertiesDefinedWithGetElem
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testPropertyDefinedInBranch
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testStatementRestriction
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testPropertyReferenceGraph
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeCascadedInline
	com.google.javascript.jscomp.SpecializeModuleTest::testDontSpecializeAliasedFunctions_inline
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeRemoveUnusedProperties
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInlineWithMultipleDependents
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeDevirtualizePrototypeMethods
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInlineWithNamespaces
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeDevirtualizePrototypeMethodsWithInline
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInline
	com.google.javascript.jscomp.SpecializeModuleTest::testDontSpecializeAliasedFunctions_remove_unused_properties
	com.google.javascript.jscomp.SpecializeModuleTest::testDontSpecializeLocalNonAnonymousFunctions
	com.google.javascript.jscomp.SpecializeModuleTest::testAddDummyVarsForRemovedFunctions
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInlineWithRegularFunctions
Includes new failing tests, set to unusable
processed: 000100000000000000000000000000000000000000000000000
pattern: 000010000000000000000000000000000000000000000000000
try to fix hunk: 4
replace from 222 with range 10 to
      String propName = processNonFunctionPrototypeAssign(n, parent);
      if (propName != null) {
        symbolStack.push(
            new NameContext(
                getNameInfoForName(propName, PROPERTY), null));

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000010000000000000000000000000000000000000000000000
pattern: 000001000000000000000000000000000000000000000000000
try to fix hunk: 5
insert before 241 with         if (n.isQualifiedName()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000001000000000000000000000000000000000000000000000
pattern: 000000100000000000000000000000000000000000000000000
try to fix hunk: 6
replace from 242 with range 1 to
            if (processPrototypeRef(t, n)) {
              return;
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000100000000000000000000000000000000000000000000
pattern: 000000010000000000000000000000000000000000000000000
try to fix hunk: 7
insert before 245 with             return;

patches are written to file
running tests...
used time: Finished in 219.35 seconds
Failing tests: 3
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600b
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600e
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600
No new failing tests but only 1 hunk
processed: 000000010000000000000000000000000000000000000000000
pattern: 000000001000000000000000000000000000000000000000000
try to fix hunk: 8
replace from 247 with range 1 to
            if (n.getParent().isAssign() && n.getNext() != null) {
              String rValueName = getPrototypePropertyNameFromRValue(n);
              if (rValueName != null) {
                return;
              }
            }
          }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000001000000000000000000000000000000000000000000
pattern: 000000000100000000000000000000000000000000000000000
try to fix hunk: 9
replace from 250 with range 1 to
        addSymbolUse(propName, t.getModule(), PROPERTY);
      } else if (n.isObjectLit()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000100000000000000000000000000000000000000000
pattern: 000000000010000000000000000000000000000000000000000
try to fix hunk: 10
replace from 254 with range 4 to
        String lValueName = NodeUtil.getBestLValueName(
            NodeUtil.getBestLValue(n));
        if (lValueName != null && lValueName.endsWith(".prototype")) {
          return;
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000010000000000000000000000000000000000000000
pattern: 000000000001000000000000000000000000000000000000000
try to fix hunk: 11
replace from 278 with range 2 to
                if (!processGlobalFunctionDeclaration(t, n, var)) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000001000000000000000000000000000000000000000
pattern: 000000000000100000000000000000000000000000000000000
try to fix hunk: 12
replace from 304 with range 3 to
      if (processNonFunctionPrototypeAssign(n, parent) != null) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000100000000000000000000000000000000000000
pattern: 000000000000010000000000000000000000000000000000000
try to fix hunk: 13
insert before 330 with     private String processNonFunctionPrototypeAssign(Node n, Node parent) {
      if (isAssignRValue(n, parent) && !n.isFunction()) {
        return getPrototypePropertyNameFromRValue(n);
      }
      return null;
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000010000000000000000000000000000000000000
pattern: 000000000000001000000000000000000000000000000000000
try to fix hunk: 14
insert before 338 with       Scope s = t.getScope();
      if (!(s.isGlobal() ||
            s.getDepth() == 1 && s.getRootNode() == n)) {
        return false;
      }

patches are written to file
running tests...
used time: Finished in 212.40 seconds
Failing tests: 3
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600b
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600e
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600
No new failing tests but only 1 hunk
processed: 000000000000001000000000000000000000000000000000000
pattern: 000000000000000100000000000000000000000000000000000
try to fix hunk: 15
replace from 339 with range 4 to
      return NodeUtil.isFunctionDeclaration(n) ||
          n.isFunction() && n.getParent().isName();

patches are written to file
running tests...
used time: Finished in 210.85 seconds
Failing tests: 3
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600b
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600e
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600
No new failing tests but only 1 hunk
processed: 000000000000000100000000000000000000000000000000000
pattern: 000000000000000010000000000000000000000000000000000
try to fix hunk: 16
replace from 348 with range 7 to
    private boolean isAssignRValue(Node n, Node parent) {
      return parent != null && parent.isAssign() && parent.getFirstChild() != n;
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000010000000000000000000000000000000000
pattern: 000000000000000001000000000000000000000000000000000
try to fix hunk: 17
replace from 363 with range 2 to
    private String getPrototypePropertyNameFromRValue(Node rValue) {
      Node lValue = NodeUtil.getBestLValue(rValue);
      if (lValue == null ||
          lValue.getParent() == null ||
          lValue.getParent().getParent() == null ||
          !(NodeUtil.isObjectLitKey(lValue, lValue.getParent()) ||
            NodeUtil.isExprAssign(lValue.getParent().getParent()))) {
        return null;
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000001000000000000000000000000000000000
pattern: 000000000000000000100000000000000000000000000000000
try to fix hunk: 18
replace from 366 with range 5 to
      String lValueName =
          NodeUtil.getBestLValueName(NodeUtil.getBestLValue(rValue));
      if (lValueName == null) {
        return null;
      }
      int lastDot = lValueName.lastIndexOf('.');
      if (lastDot == -1) {
        return null;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000100000000000000000000000000000000
pattern: 000000000000000000010000000000000000000000000000000
try to fix hunk: 19
insert before 373 with       String firstPart = lValueName.substring(0, lastDot);
      if (!firstPart.endsWith(".prototype")) {
        return null;
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000010000000000000000000000000000000
pattern: 000000000000000000001000000000000000000000000000000
try to fix hunk: 20
replace from 374 with range 1 to
      return lValueName.substring(lastDot + 1);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000001000000000000000000000000000000
pattern: 000000000000000000000100000000000000000000000000000
try to fix hunk: 21
replace from 382 with range 1 to
        Node nameNode, Var v) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000100000000000000000000000000000
pattern: 000000000000000000000010000000000000000000000000000
try to fix hunk: 22
insert before 384 with       Node parent = nameNode.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000010000000000000000000000000000
pattern: 000000000000000000000001000000000000000000000000000
try to fix hunk: 23
replace from 392 with range 1 to
            new GlobalFunction(nameNode, v, t.getModule()));

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000001000000000000000000000000000
pattern: 000000000000000000000000100000000000000000000000000
try to fix hunk: 24
replace from 412 with range 1 to
    private boolean processPrototypeRef(NodeTraversal t, Node ref) {
      Node root = NodeUtil.getRootOfQualifiedName(ref);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000100000000000000000000000000
pattern: 000000000000000000000000010000000000000000000000000
try to fix hunk: 25
insert before 414 with       Node n = ref.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000010000000000000000000000000
pattern: 000000000000000000000000001000000000000000000000000
try to fix hunk: 26
insert before 427 with                 t.getScope().getVar(root.getString()),

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000001000000000000000000000000
pattern: 000000000000000000000000000100000000000000000000000
try to fix hunk: 27
insert before 429 with             return true;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000000100000000000000000000000
pattern: 000000000000000000000000000010000000000000000000000
try to fix hunk: 28
insert before 442 with                   t.getScope().getVar(root.getString()),

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000000010000000000000000000000
pattern: 000000000000000000000000000001000000000000000000000
try to fix hunk: 29
insert before 445 with             return true;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000000001000000000000000000000
pattern: 000000000000000000000000000000100000000000000000000
try to fix hunk: 30
insert before 448 with       return false;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000000000100000000000000000000
pattern: 000000000000000000000000000000010000000000000000000
try to fix hunk: 31
insert before 499 with     Var getRootVar();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000000000010000000000000000000
pattern: 000000000000000000000000000000001000000000000000000
try to fix hunk: 32
insert before 516 with     private final Var var;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000000000001000000000000000000
pattern: 000000000000000000000000000000000100000000000000000
try to fix hunk: 33
replace from 518 with range 1 to
    GlobalFunction(Node nameNode, Var var, JSModule module) {
      Node parent = nameNode.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000000000000100000000000000000
pattern: 000000000000000000000000000000000010000000000000000
try to fix hunk: 34
insert before 523 with       this.var = var;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000000000000010000000000000000
pattern: 000000000000000000000000000000000001000000000000000
try to fix hunk: 35
insert before 527 with     public Var getRootVar() {
      return var;
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000000000000001000000000000000
pattern: 000000000000000000000000000000000000100000000000000
try to fix hunk: 36
insert before 528 with     @Override

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000000000000000100000000000000
pattern: 000000000000000000000000000000000000010000000000000
try to fix hunk: 37
insert before 576 with     private final Var rootVar;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000000000000000010000000000000
pattern: 000000000000000000000000000000000000001000000000000
try to fix hunk: 38
replace from 581 with range 1 to
    AssignmentProperty(Node node, Var rootVar, JSModule module) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000000000000000001000000000000
pattern: 000000000000000000000000000000000000000100000000000
try to fix hunk: 39
insert before 583 with       this.rootVar = rootVar;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000000000000000000100000000000
pattern: 000000000000000000000000000000000000000010000000000
try to fix hunk: 40
insert before 587 with     public Var getRootVar() {
      return rootVar;
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000000000000000000010000000000
pattern: 000000000000000000000000000000000000000001000000000
try to fix hunk: 41
insert before 588 with     @Override

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000000000000000000001000000000
pattern: 000000000000000000000000000000000000000000100000000
try to fix hunk: 42
insert before 623 with     private final Var rootVar;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000000000000000000000100000000
pattern: 000000000000000000000000000000000000000000010000000
try to fix hunk: 43
replace from 626 with range 1 to
        Var rootVar, JSModule module) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000000000000000000000010000000
pattern: 000000000000000000000000000000000000000000001000000
try to fix hunk: 44
insert before 631 with       this.rootVar = rootVar;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000000000000000000000001000000
pattern: 000000000000000000000000000000000000000000000100000
try to fix hunk: 45
insert before 635 with     public Var getRootVar() {
      return rootVar;
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000000000000000000000000100000
pattern: 000000000000000000000000000000000000000000000010000
try to fix hunk: 46
insert before 636 with     @Override

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000000000000000000000000010000
pattern: 000000000000000000000000000000000000000000000001000
try to fix hunk: 47
replace from 665 with range 1 to
    final Scope scope;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000000000000000000000000001000
pattern: 000000000000000000000000000000000000000000000000100
try to fix hunk: 48
replace from 667 with range 1 to
    NameContext(NameInfo name, Scope scope) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000000000000000000000000000100
pattern: 000000000000000000000000000000000000000000000000010
try to fix hunk: 49
insert before 669 with       this.scope = scope;

patches are written to file
running tests...
used time: Finished in 215.26 seconds
Failing tests: 3
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600b
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600e
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600
No new failing tests but only 1 hunk
processed: 000000000000000000000000000000000000000000000000010
pattern: 000000000000000000000000000000000000000000000000001
try to fix hunk: 50
insert before 141 with         if (!(prop.getRootVar() != null && prop.getRootVar().isGlobal())) {
          continue;
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000000000000000000000000000000000000000000000000001
pattern: 110000000000000000000000000000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110000000000000000000000000000000000000000000000000
pattern: 101000000000000000000000000000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 2
insert before 212 with           symbolStack.push(new NameContext(anonymousNode, t.getScope()));
        }
      } else {
        Preconditions.checkState(t.inGlobalScope());
        symbolStack.push(new NameContext(globalNode, t.getScope()));
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101000000000000000000000000000000000000000000000000
pattern: 100100000000000000000000000000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 3
replace from 216 with range 1 to
      symbolStack.pop();

patches are written to file
running tests...
used time: Finished in 208.79 seconds
Failing tests: 70
	com.google.javascript.jscomp.CommandLineRunnerTest::testGetMsgWiring
	com.google.javascript.jscomp.CommandLineRunnerTest::testGoogAssertStripping
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue601b
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue601c
	com.google.javascript.jscomp.CommandLineRunnerTest::testReflectedMethods
	com.google.javascript.jscomp.CommandLineRunnerTest::testCheckGlobalThisOnWithAdvancedMode
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue504
	com.google.javascript.jscomp.CommandLineRunnerTest::testDebugFlag3
	com.google.javascript.jscomp.CommandLineRunnerTest::testDebugFlag4
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testInnerFunctionClosureVariableReads
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeRecursiveMethod
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsUsedInTwoModules
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testNoClosureVariableReads1
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testNoClosureVariableReads2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testGlobalFunctionsInGraph
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsInRightOrder2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testCantMovePrototypeProp
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testTwoMethods2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeMethod1
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeMethod2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeMethod3
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsUsedInTwoModules2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testClosureVariableReads1
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testClosureVariableReads2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600b
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600c
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600d
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600e
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsInRightOrder
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testUsingAnonymousObjectsToDefeatRemoval
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing1
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing2
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing3
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing4
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing5
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing6
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing7
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testMethodsFromExternsFileNotExported
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGetterBaseline
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testExternMethodsFromExternsFile
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGetter1
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGetter2
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph2
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph3
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph4
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph5
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph6
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph7
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testNeverRemoveImplicitlyUsedProperties
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAnalyzePrototypeProperties
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testExportedMethodsByNamingConventionAlwaysExported
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testExportedMethodsByNamingConvention
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testPropertiesDefinedWithGetElem
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testPropertyDefinedInBranch
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testStatementRestriction
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testPropertyReferenceGraph
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeCascadedInline
	com.google.javascript.jscomp.SpecializeModuleTest::testDontSpecializeAliasedFunctions_inline
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeRemoveUnusedProperties
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInlineWithMultipleDependents
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeDevirtualizePrototypeMethods
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInlineWithNamespaces
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeDevirtualizePrototypeMethodsWithInline
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInline
	com.google.javascript.jscomp.SpecializeModuleTest::testDontSpecializeAliasedFunctions_remove_unused_properties
	com.google.javascript.jscomp.SpecializeModuleTest::testDontSpecializeLocalNonAnonymousFunctions
	com.google.javascript.jscomp.SpecializeModuleTest::testAddDummyVarsForRemovedFunctions
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInlineWithRegularFunctions
Includes new failing tests, set to unusable
processed: 100100000000000000000000000000000000000000000000000
pattern: 100010000000000000000000000000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 4
replace from 222 with range 10 to
      String propName = processNonFunctionPrototypeAssign(n, parent);
      if (propName != null) {
        symbolStack.push(
            new NameContext(
                getNameInfoForName(propName, PROPERTY), null));

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100010000000000000000000000000000000000000000000000
pattern: 100001000000000000000000000000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 5
insert before 241 with         if (n.isQualifiedName()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100001000000000000000000000000000000000000000000000
pattern: 100000100000000000000000000000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 6
replace from 242 with range 1 to
            if (processPrototypeRef(t, n)) {
              return;
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000100000000000000000000000000000000000000000000
pattern: 100000010000000000000000000000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 7
insert before 245 with             return;

patches are written to file
running tests...
used time: Finished in 217.91 seconds
Failing tests: 70
	com.google.javascript.jscomp.CommandLineRunnerTest::testGetMsgWiring
	com.google.javascript.jscomp.CommandLineRunnerTest::testGoogAssertStripping
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue601b
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue601c
	com.google.javascript.jscomp.CommandLineRunnerTest::testReflectedMethods
	com.google.javascript.jscomp.CommandLineRunnerTest::testCheckGlobalThisOnWithAdvancedMode
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue504
	com.google.javascript.jscomp.CommandLineRunnerTest::testDebugFlag3
	com.google.javascript.jscomp.CommandLineRunnerTest::testDebugFlag4
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testInnerFunctionClosureVariableReads
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeRecursiveMethod
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsUsedInTwoModules
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testNoClosureVariableReads1
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testNoClosureVariableReads2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testGlobalFunctionsInGraph
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsInRightOrder2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testCantMovePrototypeProp
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testTwoMethods2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeMethod1
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeMethod2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeMethod3
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsUsedInTwoModules2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testClosureVariableReads1
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testClosureVariableReads2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600b
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600c
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600d
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600e
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsInRightOrder
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testUsingAnonymousObjectsToDefeatRemoval
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing1
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing2
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing3
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing4
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing5
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing6
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing7
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testMethodsFromExternsFileNotExported
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGetterBaseline
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testExternMethodsFromExternsFile
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGetter1
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGetter2
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph2
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph3
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph4
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph5
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph6
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph7
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testNeverRemoveImplicitlyUsedProperties
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAnalyzePrototypeProperties
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testExportedMethodsByNamingConventionAlwaysExported
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testExportedMethodsByNamingConvention
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testPropertiesDefinedWithGetElem
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testPropertyDefinedInBranch
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testStatementRestriction
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testPropertyReferenceGraph
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeCascadedInline
	com.google.javascript.jscomp.SpecializeModuleTest::testDontSpecializeAliasedFunctions_inline
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeRemoveUnusedProperties
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInlineWithMultipleDependents
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeDevirtualizePrototypeMethods
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInlineWithNamespaces
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeDevirtualizePrototypeMethodsWithInline
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInline
	com.google.javascript.jscomp.SpecializeModuleTest::testDontSpecializeAliasedFunctions_remove_unused_properties
	com.google.javascript.jscomp.SpecializeModuleTest::testDontSpecializeLocalNonAnonymousFunctions
	com.google.javascript.jscomp.SpecializeModuleTest::testAddDummyVarsForRemovedFunctions
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInlineWithRegularFunctions
Includes new failing tests, set to unusable
processed: 100000010000000000000000000000000000000000000000000
pattern: 100000001000000000000000000000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 8
replace from 247 with range 1 to
            if (n.getParent().isAssign() && n.getNext() != null) {
              String rValueName = getPrototypePropertyNameFromRValue(n);
              if (rValueName != null) {
                return;
              }
            }
          }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000001000000000000000000000000000000000000000000
pattern: 100000000100000000000000000000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 9
replace from 250 with range 1 to
        addSymbolUse(propName, t.getModule(), PROPERTY);
      } else if (n.isObjectLit()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000100000000000000000000000000000000000000000
pattern: 100000000010000000000000000000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 10
replace from 254 with range 4 to
        String lValueName = NodeUtil.getBestLValueName(
            NodeUtil.getBestLValue(n));
        if (lValueName != null && lValueName.endsWith(".prototype")) {
          return;
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000010000000000000000000000000000000000000000
pattern: 100000000001000000000000000000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 11
replace from 278 with range 2 to
                if (!processGlobalFunctionDeclaration(t, n, var)) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000001000000000000000000000000000000000000000
pattern: 100000000000100000000000000000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 12
replace from 304 with range 3 to
      if (processNonFunctionPrototypeAssign(n, parent) != null) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000100000000000000000000000000000000000000
pattern: 100000000000010000000000000000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 13
insert before 330 with     private String processNonFunctionPrototypeAssign(Node n, Node parent) {
      if (isAssignRValue(n, parent) && !n.isFunction()) {
        return getPrototypePropertyNameFromRValue(n);
      }
      return null;
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000010000000000000000000000000000000000000
pattern: 100000000000001000000000000000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 14
insert before 338 with       Scope s = t.getScope();
      if (!(s.isGlobal() ||
            s.getDepth() == 1 && s.getRootNode() == n)) {
        return false;
      }

patches are written to file
running tests...
used time: Finished in 217.92 seconds
Failing tests: 70
	com.google.javascript.jscomp.CommandLineRunnerTest::testGetMsgWiring
	com.google.javascript.jscomp.CommandLineRunnerTest::testGoogAssertStripping
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue601b
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue601c
	com.google.javascript.jscomp.CommandLineRunnerTest::testReflectedMethods
	com.google.javascript.jscomp.CommandLineRunnerTest::testCheckGlobalThisOnWithAdvancedMode
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue504
	com.google.javascript.jscomp.CommandLineRunnerTest::testDebugFlag3
	com.google.javascript.jscomp.CommandLineRunnerTest::testDebugFlag4
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testInnerFunctionClosureVariableReads
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeRecursiveMethod
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsUsedInTwoModules
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testNoClosureVariableReads1
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testNoClosureVariableReads2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testGlobalFunctionsInGraph
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsInRightOrder2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testCantMovePrototypeProp
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testTwoMethods2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeMethod1
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeMethod2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeMethod3
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsUsedInTwoModules2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testClosureVariableReads1
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testClosureVariableReads2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600b
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600c
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600d
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600e
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsInRightOrder
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testUsingAnonymousObjectsToDefeatRemoval
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing1
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing2
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing3
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing4
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing5
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing6
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing7
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testMethodsFromExternsFileNotExported
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGetterBaseline
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testExternMethodsFromExternsFile
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGetter1
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGetter2
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph2
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph3
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph4
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph5
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph6
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph7
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testNeverRemoveImplicitlyUsedProperties
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAnalyzePrototypeProperties
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testExportedMethodsByNamingConventionAlwaysExported
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testExportedMethodsByNamingConvention
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testPropertiesDefinedWithGetElem
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testPropertyDefinedInBranch
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testStatementRestriction
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testPropertyReferenceGraph
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeCascadedInline
	com.google.javascript.jscomp.SpecializeModuleTest::testDontSpecializeAliasedFunctions_inline
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeRemoveUnusedProperties
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInlineWithMultipleDependents
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeDevirtualizePrototypeMethods
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInlineWithNamespaces
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeDevirtualizePrototypeMethodsWithInline
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInline
	com.google.javascript.jscomp.SpecializeModuleTest::testDontSpecializeAliasedFunctions_remove_unused_properties
	com.google.javascript.jscomp.SpecializeModuleTest::testDontSpecializeLocalNonAnonymousFunctions
	com.google.javascript.jscomp.SpecializeModuleTest::testAddDummyVarsForRemovedFunctions
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInlineWithRegularFunctions
Includes new failing tests, set to unusable
processed: 100000000000001000000000000000000000000000000000000
pattern: 100000000000000100000000000000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 15
replace from 339 with range 4 to
      return NodeUtil.isFunctionDeclaration(n) ||
          n.isFunction() && n.getParent().isName();

patches are written to file
running tests...
used time: Finished in 219.01 seconds
Failing tests: 70
	com.google.javascript.jscomp.CommandLineRunnerTest::testGetMsgWiring
	com.google.javascript.jscomp.CommandLineRunnerTest::testGoogAssertStripping
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue601b
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue601c
	com.google.javascript.jscomp.CommandLineRunnerTest::testReflectedMethods
	com.google.javascript.jscomp.CommandLineRunnerTest::testCheckGlobalThisOnWithAdvancedMode
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue504
	com.google.javascript.jscomp.CommandLineRunnerTest::testDebugFlag3
	com.google.javascript.jscomp.CommandLineRunnerTest::testDebugFlag4
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testInnerFunctionClosureVariableReads
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeRecursiveMethod
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsUsedInTwoModules
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testNoClosureVariableReads1
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testNoClosureVariableReads2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testGlobalFunctionsInGraph
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsInRightOrder2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testCantMovePrototypeProp
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testTwoMethods2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeMethod1
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeMethod2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeMethod3
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsUsedInTwoModules2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testClosureVariableReads1
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testClosureVariableReads2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600b
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600c
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600d
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600e
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsInRightOrder
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testUsingAnonymousObjectsToDefeatRemoval
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing1
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing2
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing3
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing4
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing5
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing6
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing7
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testMethodsFromExternsFileNotExported
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGetterBaseline
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testExternMethodsFromExternsFile
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGetter1
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGetter2
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph2
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph3
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph4
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph5
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph6
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph7
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testNeverRemoveImplicitlyUsedProperties
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAnalyzePrototypeProperties
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testExportedMethodsByNamingConventionAlwaysExported
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testExportedMethodsByNamingConvention
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testPropertiesDefinedWithGetElem
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testPropertyDefinedInBranch
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testStatementRestriction
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testPropertyReferenceGraph
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeCascadedInline
	com.google.javascript.jscomp.SpecializeModuleTest::testDontSpecializeAliasedFunctions_inline
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeRemoveUnusedProperties
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInlineWithMultipleDependents
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeDevirtualizePrototypeMethods
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInlineWithNamespaces
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeDevirtualizePrototypeMethodsWithInline
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInline
	com.google.javascript.jscomp.SpecializeModuleTest::testDontSpecializeAliasedFunctions_remove_unused_properties
	com.google.javascript.jscomp.SpecializeModuleTest::testDontSpecializeLocalNonAnonymousFunctions
	com.google.javascript.jscomp.SpecializeModuleTest::testAddDummyVarsForRemovedFunctions
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInlineWithRegularFunctions
Includes new failing tests, set to unusable
processed: 100000000000000100000000000000000000000000000000000
pattern: 100000000000000010000000000000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 16
replace from 348 with range 7 to
    private boolean isAssignRValue(Node n, Node parent) {
      return parent != null && parent.isAssign() && parent.getFirstChild() != n;
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000010000000000000000000000000000000000
pattern: 100000000000000001000000000000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 17
replace from 363 with range 2 to
    private String getPrototypePropertyNameFromRValue(Node rValue) {
      Node lValue = NodeUtil.getBestLValue(rValue);
      if (lValue == null ||
          lValue.getParent() == null ||
          lValue.getParent().getParent() == null ||
          !(NodeUtil.isObjectLitKey(lValue, lValue.getParent()) ||
            NodeUtil.isExprAssign(lValue.getParent().getParent()))) {
        return null;
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000001000000000000000000000000000000000
pattern: 100000000000000000100000000000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 18
replace from 366 with range 5 to
      String lValueName =
          NodeUtil.getBestLValueName(NodeUtil.getBestLValue(rValue));
      if (lValueName == null) {
        return null;
      }
      int lastDot = lValueName.lastIndexOf('.');
      if (lastDot == -1) {
        return null;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000100000000000000000000000000000000
pattern: 100000000000000000010000000000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 19
insert before 373 with       String firstPart = lValueName.substring(0, lastDot);
      if (!firstPart.endsWith(".prototype")) {
        return null;
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000010000000000000000000000000000000
pattern: 100000000000000000001000000000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 20
replace from 374 with range 1 to
      return lValueName.substring(lastDot + 1);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000001000000000000000000000000000000
pattern: 100000000000000000000100000000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 21
replace from 382 with range 1 to
        Node nameNode, Var v) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000100000000000000000000000000000
pattern: 100000000000000000000010000000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 22
insert before 384 with       Node parent = nameNode.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000010000000000000000000000000000
pattern: 100000000000000000000001000000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 23
replace from 392 with range 1 to
            new GlobalFunction(nameNode, v, t.getModule()));

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000001000000000000000000000000000
pattern: 100000000000000000000000100000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 24
replace from 412 with range 1 to
    private boolean processPrototypeRef(NodeTraversal t, Node ref) {
      Node root = NodeUtil.getRootOfQualifiedName(ref);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000100000000000000000000000000
pattern: 100000000000000000000000010000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 25
insert before 414 with       Node n = ref.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000010000000000000000000000000
pattern: 100000000000000000000000001000000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 26
insert before 427 with                 t.getScope().getVar(root.getString()),

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000001000000000000000000000000
pattern: 100000000000000000000000000100000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 27
insert before 429 with             return true;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000000100000000000000000000000
pattern: 100000000000000000000000000010000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 28
insert before 442 with                   t.getScope().getVar(root.getString()),

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000000010000000000000000000000
pattern: 100000000000000000000000000001000000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 29
insert before 445 with             return true;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000000001000000000000000000000
pattern: 100000000000000000000000000000100000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 30
insert before 448 with       return false;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000000000100000000000000000000
pattern: 100000000000000000000000000000010000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 31
insert before 499 with     Var getRootVar();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000000000010000000000000000000
pattern: 100000000000000000000000000000001000000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 32
insert before 516 with     private final Var var;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000000000001000000000000000000
pattern: 100000000000000000000000000000000100000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 33
replace from 518 with range 1 to
    GlobalFunction(Node nameNode, Var var, JSModule module) {
      Node parent = nameNode.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000000000000100000000000000000
pattern: 100000000000000000000000000000000010000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 34
insert before 523 with       this.var = var;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000000000000010000000000000000
pattern: 100000000000000000000000000000000001000000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 35
insert before 527 with     public Var getRootVar() {
      return var;
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000000000000001000000000000000
pattern: 100000000000000000000000000000000000100000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 36
insert before 528 with     @Override

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000000000000000100000000000000
pattern: 100000000000000000000000000000000000010000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 37
insert before 576 with     private final Var rootVar;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000000000000000010000000000000
pattern: 100000000000000000000000000000000000001000000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 38
replace from 581 with range 1 to
    AssignmentProperty(Node node, Var rootVar, JSModule module) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000000000000000001000000000000
pattern: 100000000000000000000000000000000000000100000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 39
insert before 583 with       this.rootVar = rootVar;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000000000000000000100000000000
pattern: 100000000000000000000000000000000000000010000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 40
insert before 587 with     public Var getRootVar() {
      return rootVar;
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000000000000000000010000000000
pattern: 100000000000000000000000000000000000000001000000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 41
insert before 588 with     @Override

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000000000000000000001000000000
pattern: 100000000000000000000000000000000000000000100000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 42
insert before 623 with     private final Var rootVar;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000000000000000000000100000000
pattern: 100000000000000000000000000000000000000000010000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 43
replace from 626 with range 1 to
        Var rootVar, JSModule module) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000000000000000000000010000000
pattern: 100000000000000000000000000000000000000000001000000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 44
insert before 631 with       this.rootVar = rootVar;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000000000000000000000001000000
pattern: 100000000000000000000000000000000000000000000100000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 45
insert before 635 with     public Var getRootVar() {
      return rootVar;
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000000000000000000000000100000
pattern: 100000000000000000000000000000000000000000000010000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 46
insert before 636 with     @Override

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000000000000000000000000010000
pattern: 100000000000000000000000000000000000000000000001000
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 47
replace from 665 with range 1 to
    final Scope scope;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000000000000000000000000001000
pattern: 100000000000000000000000000000000000000000000000100
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 48
replace from 667 with range 1 to
    NameContext(NameInfo name, Scope scope) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000000000000000000000000000100
pattern: 100000000000000000000000000000000000000000000000010
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 49
insert before 669 with       this.scope = scope;

patches are written to file
running tests...
used time: Finished in 213.27 seconds
Failing tests: 70
	com.google.javascript.jscomp.CommandLineRunnerTest::testGetMsgWiring
	com.google.javascript.jscomp.CommandLineRunnerTest::testGoogAssertStripping
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue601b
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue601c
	com.google.javascript.jscomp.CommandLineRunnerTest::testReflectedMethods
	com.google.javascript.jscomp.CommandLineRunnerTest::testCheckGlobalThisOnWithAdvancedMode
	com.google.javascript.jscomp.CommandLineRunnerTest::testIssue504
	com.google.javascript.jscomp.CommandLineRunnerTest::testDebugFlag3
	com.google.javascript.jscomp.CommandLineRunnerTest::testDebugFlag4
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testInnerFunctionClosureVariableReads
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeRecursiveMethod
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsUsedInTwoModules
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testNoClosureVariableReads1
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testNoClosureVariableReads2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testGlobalFunctionsInGraph
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsInRightOrder2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testCantMovePrototypeProp
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testTwoMethods2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeMethod1
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeMethod2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMovePrototypeMethod3
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsUsedInTwoModules2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testClosureVariableReads1
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testClosureVariableReads2
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600b
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600c
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600d
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600e
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testIssue600
	com.google.javascript.jscomp.CrossModuleMethodMotionTest::testMoveMethodsInRightOrder
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testUsingAnonymousObjectsToDefeatRemoval
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing1
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing2
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing3
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing4
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing5
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing6
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAliasing7
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testMethodsFromExternsFileNotExported
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGetterBaseline
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testExternMethodsFromExternsFile
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGetter1
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGetter2
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph2
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph3
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph4
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph5
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph6
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testGlobalFunctionsInGraph7
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testNeverRemoveImplicitlyUsedProperties
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testAnalyzePrototypeProperties
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testExportedMethodsByNamingConventionAlwaysExported
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testExportedMethodsByNamingConvention
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testPropertiesDefinedWithGetElem
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testPropertyDefinedInBranch
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testStatementRestriction
	com.google.javascript.jscomp.RemoveUnusedPrototypePropertiesTest::testPropertyReferenceGraph
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeCascadedInline
	com.google.javascript.jscomp.SpecializeModuleTest::testDontSpecializeAliasedFunctions_inline
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeRemoveUnusedProperties
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInlineWithMultipleDependents
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeDevirtualizePrototypeMethods
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInlineWithNamespaces
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeDevirtualizePrototypeMethodsWithInline
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInline
	com.google.javascript.jscomp.SpecializeModuleTest::testDontSpecializeAliasedFunctions_remove_unused_properties
	com.google.javascript.jscomp.SpecializeModuleTest::testDontSpecializeLocalNonAnonymousFunctions
	com.google.javascript.jscomp.SpecializeModuleTest::testAddDummyVarsForRemovedFunctions
	com.google.javascript.jscomp.SpecializeModuleTest::testSpecializeInlineWithRegularFunctions
Includes new failing tests, set to unusable
processed: 100000000000000000000000000000000000000000000000010
pattern: 100000000000000000000000000000000000000000000000001
try to fix hunk: 0
delete from 201 with range 3
try to fix hunk: 50
insert before 141 with         if (!(prop.getRootVar() != null && prop.getRootVar().isGlobal())) {
          continue;
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000000000000000000000000000000000000000000000001
pattern: 011000000000000000000000000000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 2
insert before 212 with           symbolStack.push(new NameContext(anonymousNode, t.getScope()));
        }
      } else {
        Preconditions.checkState(t.inGlobalScope());
        symbolStack.push(new NameContext(globalNode, t.getScope()));
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011000000000000000000000000000000000000000000000000
pattern: 010100000000000000000000000000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 3
replace from 216 with range 1 to
      symbolStack.pop();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010100000000000000000000000000000000000000000000000
pattern: 010010000000000000000000000000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 4
replace from 222 with range 10 to
      String propName = processNonFunctionPrototypeAssign(n, parent);
      if (propName != null) {
        symbolStack.push(
            new NameContext(
                getNameInfoForName(propName, PROPERTY), null));

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010010000000000000000000000000000000000000000000000
pattern: 010001000000000000000000000000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 5
insert before 241 with         if (n.isQualifiedName()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010001000000000000000000000000000000000000000000000
pattern: 010000100000000000000000000000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 6
replace from 242 with range 1 to
            if (processPrototypeRef(t, n)) {
              return;
            }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000100000000000000000000000000000000000000000000
pattern: 010000010000000000000000000000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 7
insert before 245 with             return;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000010000000000000000000000000000000000000000000
pattern: 010000001000000000000000000000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 8
replace from 247 with range 1 to
            if (n.getParent().isAssign() && n.getNext() != null) {
              String rValueName = getPrototypePropertyNameFromRValue(n);
              if (rValueName != null) {
                return;
              }
            }
          }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000001000000000000000000000000000000000000000000
pattern: 010000000100000000000000000000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 9
replace from 250 with range 1 to
        addSymbolUse(propName, t.getModule(), PROPERTY);
      } else if (n.isObjectLit()) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000100000000000000000000000000000000000000000
pattern: 010000000010000000000000000000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 10
replace from 254 with range 4 to
        String lValueName = NodeUtil.getBestLValueName(
            NodeUtil.getBestLValue(n));
        if (lValueName != null && lValueName.endsWith(".prototype")) {
          return;
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000010000000000000000000000000000000000000000
pattern: 010000000001000000000000000000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 11
replace from 278 with range 2 to
                if (!processGlobalFunctionDeclaration(t, n, var)) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000001000000000000000000000000000000000000000
pattern: 010000000000100000000000000000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 12
replace from 304 with range 3 to
      if (processNonFunctionPrototypeAssign(n, parent) != null) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000100000000000000000000000000000000000000
pattern: 010000000000010000000000000000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 13
insert before 330 with     private String processNonFunctionPrototypeAssign(Node n, Node parent) {
      if (isAssignRValue(n, parent) && !n.isFunction()) {
        return getPrototypePropertyNameFromRValue(n);
      }
      return null;
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000010000000000000000000000000000000000000
pattern: 010000000000001000000000000000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 14
insert before 338 with       Scope s = t.getScope();
      if (!(s.isGlobal() ||
            s.getDepth() == 1 && s.getRootNode() == n)) {
        return false;
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000001000000000000000000000000000000000000
pattern: 010000000000000100000000000000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 15
replace from 339 with range 4 to
      return NodeUtil.isFunctionDeclaration(n) ||
          n.isFunction() && n.getParent().isName();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000100000000000000000000000000000000000
pattern: 010000000000000010000000000000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 16
replace from 348 with range 7 to
    private boolean isAssignRValue(Node n, Node parent) {
      return parent != null && parent.isAssign() && parent.getFirstChild() != n;
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000010000000000000000000000000000000000
pattern: 010000000000000001000000000000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 17
replace from 363 with range 2 to
    private String getPrototypePropertyNameFromRValue(Node rValue) {
      Node lValue = NodeUtil.getBestLValue(rValue);
      if (lValue == null ||
          lValue.getParent() == null ||
          lValue.getParent().getParent() == null ||
          !(NodeUtil.isObjectLitKey(lValue, lValue.getParent()) ||
            NodeUtil.isExprAssign(lValue.getParent().getParent()))) {
        return null;
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000001000000000000000000000000000000000
pattern: 010000000000000000100000000000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 18
replace from 366 with range 5 to
      String lValueName =
          NodeUtil.getBestLValueName(NodeUtil.getBestLValue(rValue));
      if (lValueName == null) {
        return null;
      }
      int lastDot = lValueName.lastIndexOf('.');
      if (lastDot == -1) {
        return null;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000000100000000000000000000000000000000
pattern: 010000000000000000010000000000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 19
insert before 373 with       String firstPart = lValueName.substring(0, lastDot);
      if (!firstPart.endsWith(".prototype")) {
        return null;
      }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000000010000000000000000000000000000000
pattern: 010000000000000000001000000000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 20
replace from 374 with range 1 to
      return lValueName.substring(lastDot + 1);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000000001000000000000000000000000000000
pattern: 010000000000000000000100000000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 21
replace from 382 with range 1 to
        Node nameNode, Var v) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000000000100000000000000000000000000000
pattern: 010000000000000000000010000000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 22
insert before 384 with       Node parent = nameNode.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000000000010000000000000000000000000000
pattern: 010000000000000000000001000000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 23
replace from 392 with range 1 to
            new GlobalFunction(nameNode, v, t.getModule()));

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000000000001000000000000000000000000000
pattern: 010000000000000000000000100000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 24
replace from 412 with range 1 to
    private boolean processPrototypeRef(NodeTraversal t, Node ref) {
      Node root = NodeUtil.getRootOfQualifiedName(ref);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000000000000100000000000000000000000000
pattern: 010000000000000000000000010000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 25
insert before 414 with       Node n = ref.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000000000000010000000000000000000000000
pattern: 010000000000000000000000001000000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 26
insert before 427 with                 t.getScope().getVar(root.getString()),

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000000000000001000000000000000000000000
pattern: 010000000000000000000000000100000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 27
insert before 429 with             return true;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000000000000000100000000000000000000000
pattern: 010000000000000000000000000010000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 28
insert before 442 with                   t.getScope().getVar(root.getString()),

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000000000000000010000000000000000000000
pattern: 010000000000000000000000000001000000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 29
insert before 445 with             return true;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000000000000000001000000000000000000000
pattern: 010000000000000000000000000000100000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 30
insert before 448 with       return false;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000000000000000000100000000000000000000
pattern: 010000000000000000000000000000010000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 31
insert before 499 with     Var getRootVar();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000000000000000000010000000000000000000
pattern: 010000000000000000000000000000001000000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 32
insert before 516 with     private final Var var;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000000000000000000001000000000000000000
pattern: 010000000000000000000000000000000100000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 33
replace from 518 with range 1 to
    GlobalFunction(Node nameNode, Var var, JSModule module) {
      Node parent = nameNode.getParent();

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000000000000000000000100000000000000000
pattern: 010000000000000000000000000000000010000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 34
insert before 523 with       this.var = var;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000000000000000000000010000000000000000
pattern: 010000000000000000000000000000000001000000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 35
insert before 527 with     public Var getRootVar() {
      return var;
    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000000000000000000000001000000000000000
pattern: 010000000000000000000000000000000000100000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 36
insert before 528 with     @Override

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000000000000000000000000100000000000000
pattern: 010000000000000000000000000000000000010000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 37
insert before 576 with     private final Var rootVar;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000000000000000000000000010000000000000
pattern: 010000000000000000000000000000000000001000000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 38
replace from 581 with range 1 to
    AssignmentProperty(Node node, Var rootVar, JSModule module) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000000000000000000000000000000000001000000000000
pattern: 010000000000000000000000000000000000000100000000000
try to fix hunk: 1
replace from 206 with range 1 to
      Node n = t.getCurrentNode();
      if (n.isFunction()) {
        String propName = getPrototypePropertyNameFromRValue(n);
        if (propName != null) {
          symbolStack.push(
              new NameContext(
                  getNameInfoForName(propName, PROPERTY),
                  t.getScope()));
        } else if (isGlobalFunctionDeclaration(t, n)) {
          Node parent = n.getParent();
          String name = parent.isName() ?
              parent.getString() /* VAR */ :
              n.getFirstChild().getString() /* named function */;
          symbolStack.push(
              new NameContext(getNameInfoForName(name, VAR), t.getScope()));
        } else {

try to fix hunk: 39
insert before 583 with       this.rootVar = rootVar;

patches are written to file
running tests...
EXCEPTION: Inside Exception generator.run() timeout
Traceback (most recent call last):
  File "run.py", line 30, in task
    generator.run()
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 83, in run
    self._run()
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 109, in _run
    self.taskSingleHunk(task)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 138, in taskSingleHunk
    failure = util.get_failing_tests(self.path, self.build_dir)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/util.py", line 46, in get_failing_tests
    result = runCommand(['defects4j', 'test', '-w', '{}'.format(path)], timeout=timeout)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/util.py", line 9, in runCommand
    finished = subprocess.run(cmd, capture_output=True, cwd=cwd, timeout=timeout)
  File "/usr/lib/python3.8/subprocess.py", line 495, in run
    stdout, stderr = process.communicate(input, timeout=timeout)
  File "/usr/lib/python3.8/subprocess.py", line 1028, in communicate
    stdout, stderr = self._communicate(input, endtime, timeout)
  File "/usr/lib/python3.8/subprocess.py", line 1868, in _communicate
    ready = selector.select(timeout)
  File "/usr/lib/python3.8/selectors.py", line 415, in select
    fd_event_list = self._selector.poll(timeout)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 69, in handler
    _raise_exception(timeout_exception, exception_message)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 47, in _raise_exception
    raise exception(exception_message)
TimeoutError: generator.run() timeout

