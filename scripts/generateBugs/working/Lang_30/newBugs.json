{
    "original": {
        "num_of_hunks": 20,
        "0": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "replaced_with": "        int csLast = csLen - 1;\n",
            "patch_type": "insert",
            "next_line_no": 1376
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "replaced_with": "        int searchLast = searchLen - 1;\n",
            "patch_type": "insert",
            "next_line_no": 1377
        },
        "2": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "replaced_with": "                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n",
            "patch_type": "insert",
            "next_line_no": 1381
        },
        "3": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "replaced_with": "                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return i;\n                        }\n                    } else {\n",
            "patch_type": "insert",
            "next_line_no": 1382
        },
        "4": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "replaced_with": "                    }\n",
            "patch_type": "insert",
            "next_line_no": 1383
        },
        "5": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "from_line_no": 1443,
            "to_line_no": 1443,
            "replaced_with": "    public static boolean containsAny(String cs, char[] searchChars) {\n",
            "replaced": "    public static boolean containsAny(CharSequence cs, char[] searchChars) {\n",
            "patch_type": "replace",
            "next_line_no": 1444
        },
        "6": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "from_line_no": 1455,
            "to_line_no": 1455,
            "replaced_with": "                    if (Character.isHighSurrogate(ch)) {\n                        if (j == searchLast) {\n",
            "replaced": "                    if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n",
            "patch_type": "replace",
            "next_line_no": 1456
        },
        "7": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "from_line_no": 1457,
            "to_line_no": 1457,
            "replaced_with": "                            return true;\n                        }\n                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n",
            "replaced": "                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n",
            "patch_type": "replace",
            "next_line_no": 1458
        },
        "8": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "from_line_no": 1497,
            "to_line_no": 1497,
            "replaced_with": "    public static boolean containsAny(String cs, String searchChars) {\n",
            "replaced": "    public static boolean containsAny(CharSequence cs, String searchChars) {\n",
            "patch_type": "replace",
            "next_line_no": 1498
        },
        "9": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "replaced_with": "        int csLast = csLen - 1;\n",
            "patch_type": "insert",
            "next_line_no": 1533
        },
        "10": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "replaced_with": "        int searchLast = searchLen - 1;\n",
            "patch_type": "insert",
            "next_line_no": 1534
        },
        "11": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "replaced_with": "                    if (i < csLast && j < searchLast && Character.isHighSurrogate(ch)) {\n                        if (searchChars[j + 1] == cs.charAt(i + 1)) {\n                            continue outer;\n                        }\n                    } else {\n",
            "patch_type": "insert",
            "next_line_no": 1539
        },
        "12": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "replaced_with": "                    }\n",
            "patch_type": "insert",
            "next_line_no": 1540
        },
        "13": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "from_line_no": 1576,
            "to_line_no": 1576,
            "replaced_with": "            boolean chFound = searchChars.indexOf(ch) >= 0;\n            if (i + 1 < strLen && Character.isHighSurrogate(ch)) {\n                char ch2 = str.charAt(i + 1);\n                if (chFound && searchChars.indexOf(ch2) < 0) {\n",
            "replaced": "            if (searchChars.indexOf(ch) < 0) {\n",
            "patch_type": "replace",
            "next_line_no": 1577
        },
        "14": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "replaced_with": "                }\n            } else {\n                if (!chFound) {\n                    return i;\n                }\n",
            "patch_type": "insert",
            "next_line_no": 1578
        },
        "15": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "replaced_with": "        int csLast = csLen - 1;\n",
            "patch_type": "insert",
            "next_line_no": 1678
        },
        "16": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "replaced_with": "        int searchLast = searchLen - 1;\n",
            "patch_type": "insert",
            "next_line_no": 1679
        },
        "17": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "replaced_with": "                    if (Character.isHighSurrogate(ch)) {\n                        if (j == searchLast) {\n",
            "patch_type": "insert",
            "next_line_no": 1683
        },
        "18": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "replaced_with": "                            return false;\n                        }\n                        if (i < csLast && searchChars[j + 1] == cs.charAt(i + 1)) {\n                            return false;\n                        }\n                    } else {\n",
            "patch_type": "insert",
            "next_line_no": 1684
        },
        "19": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "replaced_with": "                    }\n",
            "patch_type": "insert",
            "next_line_no": 1686
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_CharArrayWithSupplementaryChars",
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_StringWithSupplementaryChars",
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringCharArrayWithBadSupplementaryChars",
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringStringWithSupplementaryChars",
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringWithBadSupplementaryChars",
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringCharArrayWithSupplementaryChars",
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringCharArrayWithSupplementaryChars",
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_StringWithBadSupplementaryChars",
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringStringWithSupplementaryChars",
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_CharArrayWithBadSupplementaryChars"
        ],
        "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_CharArrayWithSupplementaryChars": {
            "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "Instance": "Begin: Pos(318, 12)\nEnd: Pos(329, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\nName: testContainsNone_CharArrayWithSupplementaryChars\nChilds: [StatementAssertion<Begin: Pos(319, 9), End: Pos(319, 105)>,\nStatementAssertion<Begin: Pos(320, 9), End: Pos(320, 105)>,\nStatementAssertion<Begin: Pos(321, 9), End: Pos(321, 92)>,\nStatementAssertion<Begin: Pos(323, 9), End: Pos(323, 57)>,\nStatementAssertion<Begin: Pos(324, 9), End: Pos(324, 66)>,\nStatementAssertion<Begin: Pos(325, 9), End: Pos(325, 67)>,\nStatementAssertion<Begin: Pos(327, 9), End: Pos(327, 91)>,\nStatementAssertion<Begin: Pos(328, 9), End: Pos(328, 91)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "name": "testContainsNone_CharArrayWithSupplementaryChars",
            "begin": "Pos(318, 12)",
            "end": "Pos(329, 5)",
            "begin_line_no": 318,
            "end_line_no": 329,
            "child": [
                "Begin: Pos(319, 9)\nEnd: Pos(319, 105)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(320, 9)\nEnd: Pos(320, 105)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(321, 9)\nEnd: Pos(321, 92)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(323, 9)\nEnd: Pos(323, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(324, 9)\nEnd: Pos(324, 66)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(325, 9)\nEnd: Pos(325, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(327, 9)\nEnd: Pos(327, 91)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(328, 9)\nEnd: Pos(328, 91)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testContainsNone_CharArrayWithSupplementaryChars$catena_0() {\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsNone_CharArrayWithSupplementaryChars$catena_1() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsNone_CharArrayWithSupplementaryChars$catena_2() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));                      /***** ORIGINAL ASSERTION IS HERE *****/\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsNone_CharArrayWithSupplementaryChars$catena_3() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        assertEquals(-1, CharU20000.indexOf(CharU20001));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsNone_CharArrayWithSupplementaryChars$catena_4() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsNone_CharArrayWithSupplementaryChars$catena_5() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsNone_CharArrayWithSupplementaryChars$catena_6() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsNone_CharArrayWithSupplementaryChars$catena_7() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));                       /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testContainsNone_CharArrayWithSupplementaryChars$catena_0() {\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testContainsNone_CharArrayWithSupplementaryChars$catena_1() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testContainsNone_CharArrayWithSupplementaryChars$catena_2() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));                      /***** ORIGINAL ASSERTION IS HERE *****/\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testContainsNone_CharArrayWithSupplementaryChars$catena_3() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        assertEquals(-1, CharU20000.indexOf(CharU20001));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void testContainsNone_CharArrayWithSupplementaryChars$catena_4() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void testContainsNone_CharArrayWithSupplementaryChars$catena_5() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    public void testContainsNone_CharArrayWithSupplementaryChars$catena_6() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "7": "    public void testContainsNone_CharArrayWithSupplementaryChars$catena_7() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000.toCharArray()));                       /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_StringWithSupplementaryChars": {
            "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "Instance": "Begin: Pos(372, 12)\nEnd: Pos(383, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\nName: testContainsNone_StringWithSupplementaryChars\nChilds: [StatementAssertion<Begin: Pos(373, 9), End: Pos(373, 91)>,\nStatementAssertion<Begin: Pos(374, 9), End: Pos(374, 91)>,\nStatementAssertion<Begin: Pos(375, 9), End: Pos(375, 78)>,\nStatementAssertion<Begin: Pos(377, 9), End: Pos(377, 57)>,\nStatementAssertion<Begin: Pos(378, 9), End: Pos(378, 66)>,\nStatementAssertion<Begin: Pos(379, 9), End: Pos(379, 67)>,\nStatementAssertion<Begin: Pos(381, 9), End: Pos(381, 77)>,\nStatementAssertion<Begin: Pos(382, 9), End: Pos(382, 77)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "name": "testContainsNone_StringWithSupplementaryChars",
            "begin": "Pos(372, 12)",
            "end": "Pos(383, 5)",
            "begin_line_no": 372,
            "end_line_no": 383,
            "child": [
                "Begin: Pos(373, 9)\nEnd: Pos(373, 91)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(374, 9)\nEnd: Pos(374, 91)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(375, 9)\nEnd: Pos(375, 78)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(377, 9)\nEnd: Pos(377, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(378, 9)\nEnd: Pos(378, 66)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(379, 9)\nEnd: Pos(379, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(381, 9)\nEnd: Pos(381, 77)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(382, 9)\nEnd: Pos(382, 77)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testContainsNone_StringWithSupplementaryChars$catena_0() {\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsNone_StringWithSupplementaryChars$catena_1() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsNone_StringWithSupplementaryChars$catena_2() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));                              /***** ORIGINAL ASSERTION IS HERE *****/\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsNone_StringWithSupplementaryChars$catena_3() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        assertEquals(-1, CharU20000.indexOf(CharU20001));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsNone_StringWithSupplementaryChars$catena_4() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsNone_StringWithSupplementaryChars$catena_5() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsNone_StringWithSupplementaryChars$catena_6() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsNone_StringWithSupplementaryChars$catena_7() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));                               /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testContainsNone_StringWithSupplementaryChars$catena_0() {\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testContainsNone_StringWithSupplementaryChars$catena_1() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testContainsNone_StringWithSupplementaryChars$catena_2() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));                              /***** ORIGINAL ASSERTION IS HERE *****/\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testContainsNone_StringWithSupplementaryChars$catena_3() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        assertEquals(-1, CharU20000.indexOf(CharU20001));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void testContainsNone_StringWithSupplementaryChars$catena_4() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void testContainsNone_StringWithSupplementaryChars$catena_5() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    public void testContainsNone_StringWithSupplementaryChars$catena_6() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "7": "    public void testContainsNone_StringWithSupplementaryChars$catena_7() {\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20000));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000 + CharU20001, CharU20001));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20000, CharU20000));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Sanity check:\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        // Test:\n        try{ assertEquals(true, StringUtils.containsNone(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharU20000));                               /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringCharArrayWithBadSupplementaryChars": {
            "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "Instance": "Begin: Pos(133, 12)\nEnd: Pos(142, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\nName: testContainsAny_StringCharArrayWithBadSupplementaryChars\nChilds: [StatementAssertion<Begin: Pos(135, 9), End: Pos(135, 98)>,\nStatementAssertion<Begin: Pos(136, 9), End: Pos(136, 114)>,\nStatementAssertion<Begin: Pos(137, 9), End: Pos(137, 63)>,\nStatementAssertion<Begin: Pos(138, 9), End: Pos(138, 97)>,\nStatementAssertion<Begin: Pos(139, 9), End: Pos(139, 98)>,\nStatementAssertion<Begin: Pos(140, 9), End: Pos(140, 62)>,\nStatementAssertion<Begin: Pos(141, 9), End: Pos(141, 96)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "name": "testContainsAny_StringCharArrayWithBadSupplementaryChars",
            "begin": "Pos(133, 12)",
            "end": "Pos(142, 5)",
            "begin_line_no": 133,
            "end_line_no": 142,
            "child": [
                "Begin: Pos(135, 9)\nEnd: Pos(135, 98)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(136, 9)\nEnd: Pos(136, 114)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(137, 9)\nEnd: Pos(137, 63)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(138, 9)\nEnd: Pos(138, 97)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(139, 9)\nEnd: Pos(139, 98)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(140, 9)\nEnd: Pos(140, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(141, 9)\nEnd: Pos(141, 96)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testContainsAny_StringCharArrayWithBadSupplementaryChars$catena_0() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsAny_StringCharArrayWithBadSupplementaryChars$catena_1() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsAny_StringCharArrayWithBadSupplementaryChars$catena_2() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsAny_StringCharArrayWithBadSupplementaryChars$catena_3() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsAny_StringCharArrayWithBadSupplementaryChars$catena_4() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsAny_StringCharArrayWithBadSupplementaryChars$catena_5() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsAny_StringCharArrayWithBadSupplementaryChars$catena_6() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testContainsAny_StringCharArrayWithBadSupplementaryChars$catena_0() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testContainsAny_StringCharArrayWithBadSupplementaryChars$catena_1() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testContainsAny_StringCharArrayWithBadSupplementaryChars$catena_2() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testContainsAny_StringCharArrayWithBadSupplementaryChars$catena_3() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void testContainsAny_StringCharArrayWithBadSupplementaryChars$catena_4() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void testContainsAny_StringCharArrayWithBadSupplementaryChars$catena_5() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    public void testContainsAny_StringCharArrayWithBadSupplementaryChars$catena_6() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(\"abc\" + CharUSuppCharHigh + \"xyz\", CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001.toCharArray()));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh.toCharArray()));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow.toCharArray()));                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringStringWithSupplementaryChars": {
            "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "Instance": "Begin: Pos(615, 12)\nEnd: Pos(620, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\nName: testIndexOfAnyBut_StringStringWithSupplementaryChars\nChilds: [StatementAssertion<Begin: Pos(616, 9), End: Pos(616, 88)>,\nStatementAssertion<Begin: Pos(617, 9), End: Pos(617, 88)>,\nStatementAssertion<Begin: Pos(618, 9), End: Pos(618, 76)>,\nStatementAssertion<Begin: Pos(619, 9), End: Pos(619, 75)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "name": "testIndexOfAnyBut_StringStringWithSupplementaryChars",
            "begin": "Pos(615, 12)",
            "end": "Pos(620, 5)",
            "begin_line_no": 615,
            "end_line_no": 620,
            "child": [
                "Begin: Pos(616, 9)\nEnd: Pos(616, 88)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(617, 9)\nEnd: Pos(617, 88)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(618, 9)\nEnd: Pos(618, 76)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(619, 9)\nEnd: Pos(619, 75)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testIndexOfAnyBut_StringStringWithSupplementaryChars$catena_0() {\n        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
                "    public void testIndexOfAnyBut_StringStringWithSupplementaryChars$catena_1() {\n        try{ assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
                "    public void testIndexOfAnyBut_StringStringWithSupplementaryChars$catena_2() {\n        try{ assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
                "    public void testIndexOfAnyBut_StringStringWithSupplementaryChars$catena_3() {\n        try{ assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));                         /***** ORIGINAL ASSERTION IS HERE *****/        \n    }"
            ],
            "func": {
                "0": "    public void testIndexOfAnyBut_StringStringWithSupplementaryChars$catena_0() {\n        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
                "1": "    public void testIndexOfAnyBut_StringStringWithSupplementaryChars$catena_1() {\n        try{ assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
                "2": "    public void testIndexOfAnyBut_StringStringWithSupplementaryChars$catena_2() {\n        try{ assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
                "3": "    public void testIndexOfAnyBut_StringStringWithSupplementaryChars$catena_3() {\n        try{ assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001));                         /***** ORIGINAL ASSERTION IS HERE *****/        \n    }"
            }
        },
        "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringWithBadSupplementaryChars": {
            "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "Instance": "Begin: Pos(182, 12)\nEnd: Pos(190, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\nName: testContainsAny_StringWithBadSupplementaryChars\nChilds: [StatementAssertion<Begin: Pos(184, 9), End: Pos(184, 84)>,\nStatementAssertion<Begin: Pos(185, 9), End: Pos(185, 63)>,\nStatementAssertion<Begin: Pos(186, 9), End: Pos(186, 83)>,\nStatementAssertion<Begin: Pos(187, 9), End: Pos(187, 84)>,\nStatementAssertion<Begin: Pos(188, 9), End: Pos(188, 62)>,\nStatementAssertion<Begin: Pos(189, 9), End: Pos(189, 82)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "name": "testContainsAny_StringWithBadSupplementaryChars",
            "begin": "Pos(182, 12)",
            "end": "Pos(190, 5)",
            "begin_line_no": 182,
            "end_line_no": 190,
            "child": [
                "Begin: Pos(184, 9)\nEnd: Pos(184, 84)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(185, 9)\nEnd: Pos(185, 63)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(186, 9)\nEnd: Pos(186, 83)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(187, 9)\nEnd: Pos(187, 84)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(188, 9)\nEnd: Pos(188, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(189, 9)\nEnd: Pos(189, 82)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testContainsAny_StringWithBadSupplementaryChars$catena_0() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsAny_StringWithBadSupplementaryChars$catena_1() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsAny_StringWithBadSupplementaryChars$catena_2() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsAny_StringWithBadSupplementaryChars$catena_3() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsAny_StringWithBadSupplementaryChars$catena_4() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsAny_StringWithBadSupplementaryChars$catena_5() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));                          /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testContainsAny_StringWithBadSupplementaryChars$catena_0() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testContainsAny_StringWithBadSupplementaryChars$catena_1() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testContainsAny_StringWithBadSupplementaryChars$catena_2() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testContainsAny_StringWithBadSupplementaryChars$catena_3() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void testContainsAny_StringWithBadSupplementaryChars$catena_4() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));                     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void testContainsAny_StringWithBadSupplementaryChars$catena_5() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(true, StringUtils.containsAny(CharU20001, CharUSuppCharLow));                          /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringCharArrayWithSupplementaryChars": {
            "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "Instance": "Begin: Pos(526, 12)\nEnd: Pos(531, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\nName: testIndexOfAny_StringCharArrayWithSupplementaryChars\nChilds: [StatementAssertion<Begin: Pos(527, 9), End: Pos(527, 99)>,\nStatementAssertion<Begin: Pos(528, 9), End: Pos(528, 99)>,\nStatementAssertion<Begin: Pos(529, 9), End: Pos(529, 86)>,\nStatementAssertion<Begin: Pos(530, 9), End: Pos(530, 87)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "name": "testIndexOfAny_StringCharArrayWithSupplementaryChars",
            "begin": "Pos(526, 12)",
            "end": "Pos(531, 5)",
            "begin_line_no": 526,
            "end_line_no": 531,
            "child": [
                "Begin: Pos(527, 9)\nEnd: Pos(527, 99)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(528, 9)\nEnd: Pos(528, 99)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(529, 9)\nEnd: Pos(529, 86)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(530, 9)\nEnd: Pos(530, 87)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testIndexOfAny_StringCharArrayWithSupplementaryChars$catena_0() {\n        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));            }catch(Throwable __SHOULD_BE_IGNORED){}    \n    }",
                "    public void testIndexOfAny_StringCharArrayWithSupplementaryChars$catena_1() {\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));            }catch(Throwable __SHOULD_BE_IGNORED){}    \n    }",
                "    public void testIndexOfAny_StringCharArrayWithSupplementaryChars$catena_2() {\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));            }catch(Throwable __SHOULD_BE_IGNORED){}    \n    }",
                "    public void testIndexOfAny_StringCharArrayWithSupplementaryChars$catena_3() {\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));                 /***** ORIGINAL ASSERTION IS HERE *****/    \n    }"
            ],
            "func": {
                "0": "    public void testIndexOfAny_StringCharArrayWithSupplementaryChars$catena_0() {\n        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));            }catch(Throwable __SHOULD_BE_IGNORED){}    \n    }",
                "1": "    public void testIndexOfAny_StringCharArrayWithSupplementaryChars$catena_1() {\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));            }catch(Throwable __SHOULD_BE_IGNORED){}    \n    }",
                "2": "    public void testIndexOfAny_StringCharArrayWithSupplementaryChars$catena_2() {\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));            }catch(Throwable __SHOULD_BE_IGNORED){}    \n    }",
                "3": "    public void testIndexOfAny_StringCharArrayWithSupplementaryChars$catena_3() {\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000.toCharArray()));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001.toCharArray()));                 /***** ORIGINAL ASSERTION IS HERE *****/    \n    }"
            }
        },
        "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringCharArrayWithSupplementaryChars": {
            "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "Instance": "Begin: Pos(592, 12)\nEnd: Pos(597, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\nName: testIndexOfAnyBut_StringCharArrayWithSupplementaryChars\nChilds: [StatementAssertion<Begin: Pos(593, 9), End: Pos(593, 102)>,\nStatementAssertion<Begin: Pos(594, 9), End: Pos(594, 102)>,\nStatementAssertion<Begin: Pos(595, 9), End: Pos(595, 90)>,\nStatementAssertion<Begin: Pos(596, 9), End: Pos(596, 89)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "name": "testIndexOfAnyBut_StringCharArrayWithSupplementaryChars",
            "begin": "Pos(592, 12)",
            "end": "Pos(597, 5)",
            "begin_line_no": 592,
            "end_line_no": 597,
            "child": [
                "Begin: Pos(593, 9)\nEnd: Pos(593, 102)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(594, 9)\nEnd: Pos(594, 102)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(595, 9)\nEnd: Pos(595, 90)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(596, 9)\nEnd: Pos(596, 89)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars$catena_0() {\n        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray()));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));         }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
                "    public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars$catena_1() {\n        try{ assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray()));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));         }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
                "    public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars$catena_2() {\n        try{ assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray()));                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));         }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
                "    public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars$catena_3() {\n        try{ assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray()));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));              /***** ORIGINAL ASSERTION IS HERE *****/        \n    }"
            ],
            "func": {
                "0": "    public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars$catena_0() {\n        assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray()));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));         }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
                "1": "    public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars$catena_1() {\n        try{ assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray()));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));         }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
                "2": "    public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars$catena_2() {\n        try{ assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray()));                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));         }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
                "3": "    public void testIndexOfAnyBut_StringCharArrayWithSupplementaryChars$catena_3() {\n        try{ assertEquals(2, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20000.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAnyBut(CharU20000 + CharU20001, CharU20001.toCharArray()));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, StringUtils.indexOfAnyBut(CharU20000, CharU20000.toCharArray()));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, StringUtils.indexOfAnyBut(CharU20000, CharU20001.toCharArray()));              /***** ORIGINAL ASSERTION IS HERE *****/        \n    }"
            }
        },
        "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_StringWithBadSupplementaryChars": {
            "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "Instance": "Begin: Pos(358, 12)\nEnd: Pos(367, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\nName: testContainsNone_StringWithBadSupplementaryChars\nChilds: [StatementAssertion<Begin: Pos(360, 9), End: Pos(360, 84)>,\nStatementAssertion<Begin: Pos(361, 9), End: Pos(361, 63)>,\nStatementAssertion<Begin: Pos(362, 9), End: Pos(362, 83)>,\nStatementAssertion<Begin: Pos(363, 9), End: Pos(363, 64)>,\nStatementAssertion<Begin: Pos(364, 9), End: Pos(364, 84)>,\nStatementAssertion<Begin: Pos(365, 9), End: Pos(365, 62)>,\nStatementAssertion<Begin: Pos(366, 9), End: Pos(366, 84)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "name": "testContainsNone_StringWithBadSupplementaryChars",
            "begin": "Pos(358, 12)",
            "end": "Pos(367, 5)",
            "begin_line_no": 358,
            "end_line_no": 367,
            "child": [
                "Begin: Pos(360, 9)\nEnd: Pos(360, 84)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(361, 9)\nEnd: Pos(361, 63)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(362, 9)\nEnd: Pos(362, 83)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(363, 9)\nEnd: Pos(363, 64)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(364, 9)\nEnd: Pos(364, 84)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(365, 9)\nEnd: Pos(365, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(366, 9)\nEnd: Pos(366, 84)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testContainsNone_StringWithBadSupplementaryChars$catena_0() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));           }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
                "    public void testContainsNone_StringWithBadSupplementaryChars$catena_1() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));           }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
                "    public void testContainsNone_StringWithBadSupplementaryChars$catena_2() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));           }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
                "    public void testContainsNone_StringWithBadSupplementaryChars$catena_3() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));           }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
                "    public void testContainsNone_StringWithBadSupplementaryChars$catena_4() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));           }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
                "    public void testContainsNone_StringWithBadSupplementaryChars$catena_5() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));           }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
                "    public void testContainsNone_StringWithBadSupplementaryChars$catena_6() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));                /***** ORIGINAL ASSERTION IS HERE *****/        \n    }"
            ],
            "func": {
                "0": "    public void testContainsNone_StringWithBadSupplementaryChars$catena_0() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));           }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
                "1": "    public void testContainsNone_StringWithBadSupplementaryChars$catena_1() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));           }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
                "2": "    public void testContainsNone_StringWithBadSupplementaryChars$catena_2() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));           }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
                "3": "    public void testContainsNone_StringWithBadSupplementaryChars$catena_3() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));           }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
                "4": "    public void testContainsNone_StringWithBadSupplementaryChars$catena_4() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));           }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
                "5": "    public void testContainsNone_StringWithBadSupplementaryChars$catena_5() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));           }catch(Throwable __SHOULD_BE_IGNORED){}        \n    }",
                "6": "    public void testContainsNone_StringWithBadSupplementaryChars$catena_6() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow));                /***** ORIGINAL ASSERTION IS HERE *****/        \n    }"
            }
        },
        "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAny_StringStringWithSupplementaryChars": {
            "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "Instance": "Begin: Pos(569, 12)\nEnd: Pos(574, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\nName: testIndexOfAny_StringStringWithSupplementaryChars\nChilds: [StatementAssertion<Begin: Pos(570, 9), End: Pos(570, 85)>,\nStatementAssertion<Begin: Pos(571, 9), End: Pos(571, 85)>,\nStatementAssertion<Begin: Pos(572, 9), End: Pos(572, 72)>,\nStatementAssertion<Begin: Pos(573, 9), End: Pos(573, 73)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "name": "testIndexOfAny_StringStringWithSupplementaryChars",
            "begin": "Pos(569, 12)",
            "end": "Pos(574, 5)",
            "begin_line_no": 569,
            "end_line_no": 574,
            "child": [
                "Begin: Pos(570, 9)\nEnd: Pos(570, 85)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(571, 9)\nEnd: Pos(571, 85)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(572, 9)\nEnd: Pos(572, 72)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(573, 9)\nEnd: Pos(573, 73)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testIndexOfAny_StringStringWithSupplementaryChars$catena_0() {\n        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}    \n    }",
                "    public void testIndexOfAny_StringStringWithSupplementaryChars$catena_1() {\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}    \n    }",
                "    public void testIndexOfAny_StringStringWithSupplementaryChars$catena_2() {\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}    \n    }",
                "    public void testIndexOfAny_StringStringWithSupplementaryChars$catena_3() {\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));                               /***** ORIGINAL ASSERTION IS HERE *****/    \n    }"
            ],
            "func": {
                "0": "    public void testIndexOfAny_StringStringWithSupplementaryChars$catena_0() {\n        assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}    \n    }",
                "1": "    public void testIndexOfAny_StringStringWithSupplementaryChars$catena_1() {\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}    \n    }",
                "2": "    public void testIndexOfAny_StringStringWithSupplementaryChars$catena_2() {\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));                          }catch(Throwable __SHOULD_BE_IGNORED){}    \n    }",
                "3": "    public void testIndexOfAny_StringStringWithSupplementaryChars$catena_3() {\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20000));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(2, StringUtils.indexOfAny(CharU20000 + CharU20001, CharU20001));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, StringUtils.indexOfAny(CharU20000, CharU20000));                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, StringUtils.indexOfAny(CharU20000, CharU20001));                               /***** ORIGINAL ASSERTION IS HERE *****/    \n    }"
            }
        },
        "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsNone_CharArrayWithBadSupplementaryChars": {
            "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "Instance": "Begin: Pos(304, 12)\nEnd: Pos(313, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\nName: testContainsNone_CharArrayWithBadSupplementaryChars\nChilds: [StatementAssertion<Begin: Pos(306, 9), End: Pos(306, 98)>,\nStatementAssertion<Begin: Pos(307, 9), End: Pos(307, 63)>,\nStatementAssertion<Begin: Pos(308, 9), End: Pos(308, 97)>,\nStatementAssertion<Begin: Pos(309, 9), End: Pos(309, 64)>,\nStatementAssertion<Begin: Pos(310, 9), End: Pos(310, 98)>,\nStatementAssertion<Begin: Pos(311, 9), End: Pos(311, 62)>,\nStatementAssertion<Begin: Pos(312, 9), End: Pos(312, 98)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_30/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "name": "testContainsNone_CharArrayWithBadSupplementaryChars",
            "begin": "Pos(304, 12)",
            "end": "Pos(313, 5)",
            "begin_line_no": 304,
            "end_line_no": 313,
            "child": [
                "Begin: Pos(306, 9)\nEnd: Pos(306, 98)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(307, 9)\nEnd: Pos(307, 63)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(308, 9)\nEnd: Pos(308, 97)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(309, 9)\nEnd: Pos(309, 64)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(310, 9)\nEnd: Pos(310, 98)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(311, 9)\nEnd: Pos(311, 62)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(312, 9)\nEnd: Pos(312, 98)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testContainsNone_CharArrayWithBadSupplementaryChars$catena_0() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsNone_CharArrayWithBadSupplementaryChars$catena_1() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsNone_CharArrayWithBadSupplementaryChars$catena_2() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsNone_CharArrayWithBadSupplementaryChars$catena_3() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsNone_CharArrayWithBadSupplementaryChars$catena_4() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsNone_CharArrayWithBadSupplementaryChars$catena_5() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testContainsNone_CharArrayWithBadSupplementaryChars$catena_6() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));          /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testContainsNone_CharArrayWithBadSupplementaryChars$catena_0() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testContainsNone_CharArrayWithBadSupplementaryChars$catena_1() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testContainsNone_CharArrayWithBadSupplementaryChars$catena_2() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testContainsNone_CharArrayWithBadSupplementaryChars$catena_3() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void testContainsNone_CharArrayWithBadSupplementaryChars$catena_4() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void testContainsNone_CharArrayWithBadSupplementaryChars$catena_5() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    public void testContainsNone_CharArrayWithBadSupplementaryChars$catena_6() {\n        // Test edge case: 1/2 of a (broken) supplementary char\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharHigh, CharU20001.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharUSuppCharLow.indexOf(CharU20001));                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharUSuppCharLow, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, CharU20001.indexOf(CharUSuppCharHigh));                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(true, StringUtils.containsNone(CharU20001, CharUSuppCharHigh.toCharArray()));     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, CharU20001.indexOf(CharUSuppCharLow));                                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(false, StringUtils.containsNone(CharU20001, CharUSuppCharLow.toCharArray()));          /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "00000011000000000000": {
        "failing_tests": [
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringWithBadSupplementaryChars$catena_2",
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringCharArrayWithBadSupplementaryChars$catena_3"
        ]
    },
    "00000000000001100000": {
        "failing_tests": [
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringStringWithSupplementaryChars$catena_3",
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringStringWithSupplementaryChars$catena_0",
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testIndexOfAnyBut_StringStringWithSupplementaryChars$catena_1"
        ]
    }
}