{
    "original": {
        "num_of_hunks": 4,
        "0": {
            "file_name": "src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
            "replaced_with": "        Set<Integer> basicRows = new HashSet<Integer>();\n",
            "patch_type": "insert",
            "next_line_no": 329
        },
        "1": {
            "file_name": "src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
            "replaced_with": "            if (basicRows.contains(basicRow)) {\n",
            "patch_type": "insert",
            "next_line_no": 331
        },
        "2": {
            "file_name": "src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
            "replaced_with": "                coefficients[i] = 0;\n            } else {\n                basicRows.add(basicRow);\n",
            "patch_type": "insert",
            "next_line_no": 333
        },
        "3": {
            "file_name": "src/java/org/apache/commons/math/optimization/linear/SimplexTableau.java",
            "from_line_no": 336,
            "to_line_no": 341,
            "replaced": "            if (basicRow != null) {\n                for (int j = getNumObjectiveFunctions(); j < getNumObjectiveFunctions() + i; j++) {\n                    if (tableau.getEntry(basicRow, j) == 1) {\n                         coefficients[i] = 0;\n                    }\n                }\n",
            "patch_type": "delete",
            "next_line_no": 342
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.optimization.linear.SimplexSolverTest::testMath272"
        ],
        "org.apache.commons.math.optimization.linear.SimplexSolverTest::testMath272": {
            "file_path": "src/test/org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
            "Instance": "Begin: Pos(34, 5)\nEnd: Pos(49, 7)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_88/src/test//org/apache/commons/math/optimization/linear/SimplexSolverTest.java\nName: testMath272\nChilds: [StatementAssertion<Begin: Pos(45, 9), End: Pos(45, 60)>,\nStatementAssertion<Begin: Pos(46, 9), End: Pos(46, 60)>,\nStatementAssertion<Begin: Pos(47, 9), End: Pos(47, 60)>,\nStatementAssertion<Begin: Pos(48, 9), End: Pos(48, 57)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_88/src/test//org/apache/commons/math/optimization/linear/SimplexSolverTest.java",
            "name": "testMath272",
            "begin": "Pos(34, 5)",
            "end": "Pos(49, 7)",
            "begin_line_no": 34,
            "end_line_no": 49,
            "child": [
                "Begin: Pos(45, 9)\nEnd: Pos(45, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(46, 9)\nEnd: Pos(46, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(47, 9)\nEnd: Pos(47, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(48, 9)\nEnd: Pos(48, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testMath272$catena_0() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 2, 1 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 1, 0 }, Relationship.GEQ,  1));\n        constraints.add(new LinearConstraint(new double[] { 1, 0, 1 }, Relationship.GEQ,  1));\n        constraints.add(new LinearConstraint(new double[] { 0, 1, 0 }, Relationship.GEQ,  1));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n        \n        assertEquals(0.0, solution.getPoint()[0], .0000001);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1.0, solution.getPoint()[1], .0000001);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.0, solution.getPoint()[2], .0000001);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3.0, solution.getValue(), .0000001);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n      }",
                "    @Test\n    public void testMath272$catena_1() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 2, 1 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 1, 0 }, Relationship.GEQ,  1));\n        constraints.add(new LinearConstraint(new double[] { 1, 0, 1 }, Relationship.GEQ,  1));\n        constraints.add(new LinearConstraint(new double[] { 0, 1, 0 }, Relationship.GEQ,  1));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n        \n        try{ assertEquals(0.0, solution.getPoint()[0], .0000001);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1.0, solution.getPoint()[1], .0000001);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1.0, solution.getPoint()[2], .0000001);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3.0, solution.getValue(), .0000001);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n      }",
                "    @Test\n    public void testMath272$catena_2() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 2, 1 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 1, 0 }, Relationship.GEQ,  1));\n        constraints.add(new LinearConstraint(new double[] { 1, 0, 1 }, Relationship.GEQ,  1));\n        constraints.add(new LinearConstraint(new double[] { 0, 1, 0 }, Relationship.GEQ,  1));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n        \n        try{ assertEquals(0.0, solution.getPoint()[0], .0000001);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.0, solution.getPoint()[1], .0000001);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1.0, solution.getPoint()[2], .0000001);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3.0, solution.getValue(), .0000001);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n      }",
                "    @Test\n    public void testMath272$catena_3() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 2, 1 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 1, 0 }, Relationship.GEQ,  1));\n        constraints.add(new LinearConstraint(new double[] { 1, 0, 1 }, Relationship.GEQ,  1));\n        constraints.add(new LinearConstraint(new double[] { 0, 1, 0 }, Relationship.GEQ,  1));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n        \n        try{ assertEquals(0.0, solution.getPoint()[0], .0000001);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.0, solution.getPoint()[1], .0000001);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.0, solution.getPoint()[2], .0000001);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3.0, solution.getValue(), .0000001);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n      }"
            ],
            "func": {
                "0": "    @Test\n    public void testMath272$catena_0() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 2, 1 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 1, 0 }, Relationship.GEQ,  1));\n        constraints.add(new LinearConstraint(new double[] { 1, 0, 1 }, Relationship.GEQ,  1));\n        constraints.add(new LinearConstraint(new double[] { 0, 1, 0 }, Relationship.GEQ,  1));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n        \n        assertEquals(0.0, solution.getPoint()[0], .0000001);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1.0, solution.getPoint()[1], .0000001);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.0, solution.getPoint()[2], .0000001);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3.0, solution.getValue(), .0000001);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n      }",
                "1": "    @Test\n    public void testMath272$catena_1() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 2, 1 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 1, 0 }, Relationship.GEQ,  1));\n        constraints.add(new LinearConstraint(new double[] { 1, 0, 1 }, Relationship.GEQ,  1));\n        constraints.add(new LinearConstraint(new double[] { 0, 1, 0 }, Relationship.GEQ,  1));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n        \n        try{ assertEquals(0.0, solution.getPoint()[0], .0000001);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1.0, solution.getPoint()[1], .0000001);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1.0, solution.getPoint()[2], .0000001);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(3.0, solution.getValue(), .0000001);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n      }",
                "2": "    @Test\n    public void testMath272$catena_2() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 2, 1 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 1, 0 }, Relationship.GEQ,  1));\n        constraints.add(new LinearConstraint(new double[] { 1, 0, 1 }, Relationship.GEQ,  1));\n        constraints.add(new LinearConstraint(new double[] { 0, 1, 0 }, Relationship.GEQ,  1));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n        \n        try{ assertEquals(0.0, solution.getPoint()[0], .0000001);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.0, solution.getPoint()[1], .0000001);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1.0, solution.getPoint()[2], .0000001);                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(3.0, solution.getValue(), .0000001);                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n      }",
                "3": "    @Test\n    public void testMath272$catena_3() throws OptimizationException {\n        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[] { 2, 2, 1 }, 0);\n        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();\n        constraints.add(new LinearConstraint(new double[] { 1, 1, 0 }, Relationship.GEQ,  1));\n        constraints.add(new LinearConstraint(new double[] { 1, 0, 1 }, Relationship.GEQ,  1));\n        constraints.add(new LinearConstraint(new double[] { 0, 1, 0 }, Relationship.GEQ,  1));\n\n        SimplexSolver solver = new SimplexSolver();\n        RealPointValuePair solution = solver.optimize(f, constraints, GoalType.MINIMIZE, true);\n        \n        try{ assertEquals(0.0, solution.getPoint()[0], .0000001);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.0, solution.getPoint()[1], .0000001);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1.0, solution.getPoint()[2], .0000001);                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(3.0, solution.getValue(), .0000001);                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n      }"
            }
        }
    },
    "1111": {
        "failing_tests": [
            "org.apache.commons.math.optimization.linear.SimplexSolverTest::testMath272$catena_2",
            "org.apache.commons.math.optimization.linear.SimplexSolverTest::testMath272$catena_3"
        ]
    }
}