---
Begin generate bug_id: Closure_3
num_of_hunks: 3
timeout for running: 3600
use working dir: ./working/data/Closure_3
Try to checkout Closure_3
build dir: ['./working/data/Closure_3/build/classes', './working/data/Closure_3/build/test']
init FileManager
trace file: src/com/google/javascript/jscomp/FlowSensitiveInlineVariables.java
trying to replace old failing tests
new test num: 0
ori test num: 3
pattern: 000
patches are written to file
running tests...
used time: Finished in 294.39 seconds
Failing tests: 3
	com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testDoNotInlineCatchExpression1a
	com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testDoNotInlineCatchExpression1
	com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testDoNotInlineCatchExpression3
processed: 000
pattern: 001
try to fix hunk: 2
insert before 375 with                   case Token.NAME:
                    Var var = scope.getOwnSlot(input.getString());
                    if (var != null
                        && var.getParentNode().isCatch()) {
                      return true;
                    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001
pattern: 010
try to fix hunk: 1
replace from 280 with range 1 to
    private boolean canInline(final Scope scope) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010
pattern: 100
try to fix hunk: 0
replace from 155 with range 1 to
      if (c.canInline(t.getScope())) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100
pattern: 011
try to fix hunk: 1
replace from 280 with range 1 to
    private boolean canInline(final Scope scope) {

try to fix hunk: 2
insert before 375 with                   case Token.NAME:
                    Var var = scope.getOwnSlot(input.getString());
                    if (var != null
                        && var.getParentNode().isCatch()) {
                      return true;
                    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011
pattern: 101
try to fix hunk: 0
replace from 155 with range 1 to
      if (c.canInline(t.getScope())) {

try to fix hunk: 2
insert before 375 with                   case Token.NAME:
                    Var var = scope.getOwnSlot(input.getString());
                    if (var != null
                        && var.getParentNode().isCatch()) {
                      return true;
                    }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101
pattern: 110
try to fix hunk: 0
replace from 155 with range 1 to
      if (c.canInline(t.getScope())) {

try to fix hunk: 1
replace from 280 with range 1 to
    private boolean canInline(final Scope scope) {

patches are written to file
running tests...
used time: Finished in 271.93 seconds
Failing tests: 3
	com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testDoNotInlineCatchExpression1a
	com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testDoNotInlineCatchExpression1
	com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testDoNotInlineCatchExpression3
Can independently fix []
Could not fix independently
processed: 110
pattern: 111
try to fix hunk: 0
replace from 155 with range 1 to
      if (c.canInline(t.getScope())) {

try to fix hunk: 1
replace from 280 with range 1 to
    private boolean canInline(final Scope scope) {

try to fix hunk: 2
insert before 375 with                   case Token.NAME:
                    Var var = scope.getOwnSlot(input.getString());
                    if (var != null
                        && var.getParentNode().isCatch()) {
                      return true;
                    }

patches are written to file
running tests...
used time: Finished in 266.04 seconds
Failing tests: 0
Can independently fix ['com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testDoNotInlineCatchExpression1a', 'com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testDoNotInlineCatchExpression3', 'com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testDoNotInlineCatchExpression1']
select new bug
Pattern: 111
new failing tests:
com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testDoNotInlineCatchExpression1a
com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testDoNotInlineCatchExpression3
com.google.javascript.jscomp.FlowSensitiveInlineVariablesTest::testDoNotInlineCatchExpression1
Save found bug
processed: 111
Find 1 new bugs
