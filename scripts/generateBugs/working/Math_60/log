---
Begin generate bug_id: Math_60
num_of_hunks: 2
timeout for running: 3600
use working dir: ./working/data/Math_60
Try to checkout Math_60
build dir: ['./working/data/Math_60/target/classes', './working/data/Math_60/target/test-classes']
init FileManager
trace file: src/main/java/org/apache/commons/math/distribution/NormalDistributionImpl.java
trying to replace old failing tests
edit: replace from 157 range 23 at src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java
to
    public void testExtremeValues$catena_0() throws Exception {
        NormalDistribution distribution = new NormalDistributionImpl(0, 1);
        for (int i = 0; i < 100; i++) { // make sure no convergence exception
            double lowerTail = distribution.cumulativeProbability(-i);
            double upperTail = distribution.cumulativeProbability(i);
            if (i < 9) { // make sure not top-coded 
                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned
                // TODO: once MATH-364 is resolved, replace 9 with 30
                assertTrue(lowerTail > 0.0d);                                                               /***** ORIGINAL ASSERTION IS HERE *****/
                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            }
            else { // make sure top coding not reversed
                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
            }
        }
        
        try{ assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}
        
   }     public void testExtremeValues$catena_1() throws Exception {
        NormalDistribution distribution = new NormalDistributionImpl(0, 1);
        for (int i = 0; i < 100; i++) { // make sure no convergence exception
            double lowerTail = distribution.cumulativeProbability(-i);
            double upperTail = distribution.cumulativeProbability(i);
            if (i < 9) { // make sure not top-coded 
                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned
                // TODO: once MATH-364 is resolved, replace 9 with 30
                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
                assertTrue(upperTail < 1.0d);                                                               /***** ORIGINAL ASSERTION IS HERE *****/
            }
            else { // make sure top coding not reversed
                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
            }
        }
        
        try{ assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}
        
   }     public void testExtremeValues$catena_2() throws Exception {
        NormalDistribution distribution = new NormalDistributionImpl(0, 1);
        for (int i = 0; i < 100; i++) { // make sure no convergence exception
            double lowerTail = distribution.cumulativeProbability(-i);
            double upperTail = distribution.cumulativeProbability(i);
            if (i < 9) { // make sure not top-coded 
                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned
                // TODO: once MATH-364 is resolved, replace 9 with 30
                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            }
            else { // make sure top coding not reversed
                assertTrue(lowerTail < 0.00001);                                                            /***** ORIGINAL ASSERTION IS HERE *****/
                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
            }
        }
        
        try{ assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}
        
   }     public void testExtremeValues$catena_3() throws Exception {
        NormalDistribution distribution = new NormalDistributionImpl(0, 1);
        for (int i = 0; i < 100; i++) { // make sure no convergence exception
            double lowerTail = distribution.cumulativeProbability(-i);
            double upperTail = distribution.cumulativeProbability(i);
            if (i < 9) { // make sure not top-coded 
                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned
                // TODO: once MATH-364 is resolved, replace 9 with 30
                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            }
            else { // make sure top coding not reversed
                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
                assertTrue(upperTail > 0.99999);                                                            /***** ORIGINAL ASSERTION IS HERE *****/
            }
        }
        
        try{ assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}
        
   }     public void testExtremeValues$catena_4() throws Exception {
        NormalDistribution distribution = new NormalDistributionImpl(0, 1);
        for (int i = 0; i < 100; i++) { // make sure no convergence exception
            double lowerTail = distribution.cumulativeProbability(-i);
            double upperTail = distribution.cumulativeProbability(i);
            if (i < 9) { // make sure not top-coded 
                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned
                // TODO: once MATH-364 is resolved, replace 9 with 30
                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            }
            else { // make sure top coding not reversed
                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
            }
        }
        
        assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                           /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}
        
   }     public void testExtremeValues$catena_5() throws Exception {
        NormalDistribution distribution = new NormalDistributionImpl(0, 1);
        for (int i = 0; i < 100; i++) { // make sure no convergence exception
            double lowerTail = distribution.cumulativeProbability(-i);
            double upperTail = distribution.cumulativeProbability(i);
            if (i < 9) { // make sure not top-coded 
                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned
                // TODO: once MATH-364 is resolved, replace 9 with 30
                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            }
            else { // make sure top coding not reversed
                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
            }
        }
        
        try{ assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                      }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                          /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}
        
   }     public void testExtremeValues$catena_6() throws Exception {
        NormalDistribution distribution = new NormalDistributionImpl(0, 1);
        for (int i = 0; i < 100; i++) { // make sure no convergence exception
            double lowerTail = distribution.cumulativeProbability(-i);
            double upperTail = distribution.cumulativeProbability(i);
            if (i < 9) { // make sure not top-coded 
                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned
                // TODO: once MATH-364 is resolved, replace 9 with 30
                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            }
            else { // make sure top coding not reversed
                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
            }
        }
        
        try{ assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                     }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}
        
   }     public void testExtremeValues$catena_7() throws Exception {
        NormalDistribution distribution = new NormalDistributionImpl(0, 1);
        for (int i = 0; i < 100; i++) { // make sure no convergence exception
            double lowerTail = distribution.cumulativeProbability(-i);
            double upperTail = distribution.cumulativeProbability(i);
            if (i < 9) { // make sure not top-coded 
                // For i = 10, due to bad tail precision in erf (MATH-364), 1 is returned
                // TODO: once MATH-364 is resolved, replace 9 with 30
                try{ assertTrue(lowerTail > 0.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
                try{ assertTrue(upperTail < 1.0d);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
            }
            else { // make sure top coding not reversed
                try{ assertTrue(lowerTail < 0.00001);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
                try{ assertTrue(upperTail > 0.99999);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}
            }
        }
        
        try{ assertEquals(distribution.cumulativeProbability(Double.MAX_VALUE), 1, 0);                      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(distribution.cumulativeProbability(-Double.MAX_VALUE), 0, 0);                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals(distribution.cumulativeProbability(Double.POSITIVE_INFINITY), 1, 0);              }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals(distribution.cumulativeProbability(Double.NEGATIVE_INFINITY), 0, 0);                   /***** ORIGINAL ASSERTION IS HERE *****/
        
   }
trace file: src/test/java/org/apache/commons/math/distribution/NormalDistributionTest.java
new test num: 8
ori test num: 0
pattern: 00
patches are written to file
running tests...
used time: Finished in 165.03 seconds
Failing tests: 4
	org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_4
	org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_5
	org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_6
	org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_7
processed: 00
pattern: 01
try to fix hunk: 1
delete from 129 with range 9
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 01
pattern: 10
try to fix hunk: 0
replace from 126 with range 1 to
        if (FastMath.abs(dev) > 40 * standardDeviation) { 
            return dev < 0 ? 0.0d : 1.0d;
        }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 10
pattern: 11
try to fix hunk: 0
replace from 126 with range 1 to
        if (FastMath.abs(dev) > 40 * standardDeviation) { 
            return dev < 0 ? 0.0d : 1.0d;
        }

try to fix hunk: 1
delete from 129 with range 9
patches are written to file
running tests...
used time: Finished in 149.71 seconds
Failing tests: 0
Can independently fix ['org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_7', 'org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_6', 'org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_5', 'org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_4']
select new bug
Pattern: 11
new failing tests:
org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_7
org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_6
org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_5
org.apache.commons.math.distribution.NormalDistributionTest::testExtremeValues$catena_4
Save found bug
processed: 11
Find 1 new bugs
