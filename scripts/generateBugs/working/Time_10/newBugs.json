{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java",
            "replaced_with": "    private static final long START_1972 = 2L * 365L * 86400L * 1000L;\n",
            "patch_type": "insert",
            "next_line_no": 52
        },
        "1": {
            "file_name": "src/main/java/org/joda/time/base/BaseSingleFieldPeriod.java",
            "from_line_no": 104,
            "to_line_no": 104,
            "replaced_with": "        int[] values = chrono.get(zeroInstance, chrono.set(start, START_1972), chrono.set(end, START_1972));\n",
            "replaced": "        int[] values = chrono.get(zeroInstance, chrono.set(start, 0L), chrono.set(end, 0L));\n",
            "patch_type": "replace",
            "next_line_no": 105
        }
    },
    "method": {
        "failing_tests": [
            "org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay",
            "org.joda.time.TestMonths::testFactory_monthsBetween_RPartial_MonthDay"
        ],
        "org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay": {
            "file_path": "src/test/java/org/joda/time/TestDays.java",
            "Instance": "Begin: Pos(123, 12)\nEnd: Pos(138, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Time_10/src/test/java//org/joda/time/TestDays.java\nName: testFactory_daysBetween_RPartial_MonthDay\nChilds: [StatementAssertion<Begin: Pos(129, 9), End: Pos(129, 67)>,\nStatementAssertion<Begin: Pos(130, 9), End: Pos(130, 67)>,\nStatementAssertion<Begin: Pos(131, 9), End: Pos(131, 66)>,\nStatementAssertion<Begin: Pos(132, 9), End: Pos(132, 66)>,\nStatementAssertion<Begin: Pos(134, 9), End: Pos(134, 68)>,\nStatementAssertion<Begin: Pos(135, 9), End: Pos(135, 68)>,\nStatementAssertion<Begin: Pos(136, 9), End: Pos(136, 66)>,\nStatementAssertion<Begin: Pos(137, 9), End: Pos(137, 67)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Time_10/src/test/java//org/joda/time/TestDays.java",
            "name": "testFactory_daysBetween_RPartial_MonthDay",
            "begin": "Pos(123, 12)",
            "end": "Pos(138, 5)",
            "begin_line_no": 123,
            "end_line_no": 138,
            "child": [
                "Begin: Pos(129, 9)\nEnd: Pos(129, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(130, 9)\nEnd: Pos(130, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(131, 9)\nEnd: Pos(131, 66)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(132, 9)\nEnd: Pos(132, 66)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(134, 9)\nEnd: Pos(134, 68)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(135, 9)\nEnd: Pos(135, 68)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(136, 9)\nEnd: Pos(136, 66)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(137, 9)\nEnd: Pos(137, 67)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testFactory_daysBetween_RPartial_MonthDay$catena_0() {\n        MonthDay start1 = new MonthDay(2, 1);\n        MonthDay start2 = new MonthDay(2, 28);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        \n        assertEquals(27, Days.daysBetween(start1, end1).getDays());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(28, Days.daysBetween(start1, end2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, Days.daysBetween(start2, end2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testFactory_daysBetween_RPartial_MonthDay$catena_1() {\n        MonthDay start1 = new MonthDay(2, 1);\n        MonthDay start2 = new MonthDay(2, 28);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        \n        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(28, Days.daysBetween(start1, end2).getDays());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, Days.daysBetween(start2, end2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testFactory_daysBetween_RPartial_MonthDay$catena_2() {\n        MonthDay start1 = new MonthDay(2, 1);\n        MonthDay start2 = new MonthDay(2, 28);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        \n        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(28, Days.daysBetween(start1, end2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, Days.daysBetween(start2, end1).getDays());                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, Days.daysBetween(start2, end2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testFactory_daysBetween_RPartial_MonthDay$catena_3() {\n        MonthDay start1 = new MonthDay(2, 1);\n        MonthDay start2 = new MonthDay(2, 28);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        \n        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(28, Days.daysBetween(start1, end2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, Days.daysBetween(start2, end2).getDays());                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testFactory_daysBetween_RPartial_MonthDay$catena_4() {\n        MonthDay start1 = new MonthDay(2, 1);\n        MonthDay start2 = new MonthDay(2, 28);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        \n        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(28, Days.daysBetween(start1, end2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, Days.daysBetween(start2, end2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testFactory_daysBetween_RPartial_MonthDay$catena_5() {\n        MonthDay start1 = new MonthDay(2, 1);\n        MonthDay start2 = new MonthDay(2, 28);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        \n        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(28, Days.daysBetween(start1, end2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, Days.daysBetween(start2, end2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testFactory_daysBetween_RPartial_MonthDay$catena_6() {\n        MonthDay start1 = new MonthDay(2, 1);\n        MonthDay start2 = new MonthDay(2, 28);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        \n        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(28, Days.daysBetween(start1, end2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, Days.daysBetween(start2, end2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, Days.daysBetween(end1, start2).getDays());                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testFactory_daysBetween_RPartial_MonthDay$catena_7() {\n        MonthDay start1 = new MonthDay(2, 1);\n        MonthDay start2 = new MonthDay(2, 28);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        \n        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(28, Days.daysBetween(start1, end2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, Days.daysBetween(start2, end2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testFactory_daysBetween_RPartial_MonthDay$catena_0() {\n        MonthDay start1 = new MonthDay(2, 1);\n        MonthDay start2 = new MonthDay(2, 28);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        \n        assertEquals(27, Days.daysBetween(start1, end1).getDays());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(28, Days.daysBetween(start1, end2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, Days.daysBetween(start2, end2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testFactory_daysBetween_RPartial_MonthDay$catena_1() {\n        MonthDay start1 = new MonthDay(2, 1);\n        MonthDay start2 = new MonthDay(2, 28);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        \n        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(28, Days.daysBetween(start1, end2).getDays());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, Days.daysBetween(start2, end2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testFactory_daysBetween_RPartial_MonthDay$catena_2() {\n        MonthDay start1 = new MonthDay(2, 1);\n        MonthDay start2 = new MonthDay(2, 28);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        \n        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(28, Days.daysBetween(start1, end2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, Days.daysBetween(start2, end1).getDays());                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, Days.daysBetween(start2, end2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testFactory_daysBetween_RPartial_MonthDay$catena_3() {\n        MonthDay start1 = new MonthDay(2, 1);\n        MonthDay start2 = new MonthDay(2, 28);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        \n        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(28, Days.daysBetween(start1, end2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, Days.daysBetween(start2, end2).getDays());                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void testFactory_daysBetween_RPartial_MonthDay$catena_4() {\n        MonthDay start1 = new MonthDay(2, 1);\n        MonthDay start2 = new MonthDay(2, 28);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        \n        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(28, Days.daysBetween(start1, end2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, Days.daysBetween(start2, end2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void testFactory_daysBetween_RPartial_MonthDay$catena_5() {\n        MonthDay start1 = new MonthDay(2, 1);\n        MonthDay start2 = new MonthDay(2, 28);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        \n        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(28, Days.daysBetween(start1, end2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, Days.daysBetween(start2, end2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    public void testFactory_daysBetween_RPartial_MonthDay$catena_6() {\n        MonthDay start1 = new MonthDay(2, 1);\n        MonthDay start2 = new MonthDay(2, 28);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        \n        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(28, Days.daysBetween(start1, end2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, Days.daysBetween(start2, end2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, Days.daysBetween(end1, start2).getDays());                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "7": "    public void testFactory_daysBetween_RPartial_MonthDay$catena_7() {\n        MonthDay start1 = new MonthDay(2, 1);\n        MonthDay start2 = new MonthDay(2, 28);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        \n        try{ assertEquals(27, Days.daysBetween(start1, end1).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(28, Days.daysBetween(start1, end2).getDays());                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(start2, end1).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, Days.daysBetween(start2, end2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(-27, Days.daysBetween(end1, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-28, Days.daysBetween(end2, start1).getDays());                                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Days.daysBetween(end1, start2).getDays());                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, Days.daysBetween(end2, start2).getDays());                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.joda.time.TestMonths::testFactory_monthsBetween_RPartial_MonthDay": {
            "file_path": "src/test/java/org/joda/time/TestMonths.java",
            "Instance": "Begin: Pos(130, 12)\nEnd: Pos(143, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Time_10/src/test/java//org/joda/time/TestMonths.java\nName: testFactory_monthsBetween_RPartial_MonthDay\nChilds: [StatementAssertion<Begin: Pos(136, 9), End: Pos(136, 71)>,\nStatementAssertion<Begin: Pos(137, 9), End: Pos(137, 71)>,\nStatementAssertion<Begin: Pos(138, 9), End: Pos(138, 71)>,\nStatementAssertion<Begin: Pos(140, 9), End: Pos(140, 71)>,\nStatementAssertion<Begin: Pos(141, 9), End: Pos(141, 71)>,\nStatementAssertion<Begin: Pos(142, 9), End: Pos(142, 72)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Time_10/src/test/java//org/joda/time/TestMonths.java",
            "name": "testFactory_monthsBetween_RPartial_MonthDay",
            "begin": "Pos(130, 12)",
            "end": "Pos(143, 5)",
            "begin_line_no": 130,
            "end_line_no": 143,
            "child": [
                "Begin: Pos(136, 9)\nEnd: Pos(136, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(137, 9)\nEnd: Pos(137, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(138, 9)\nEnd: Pos(138, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(140, 9)\nEnd: Pos(140, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(141, 9)\nEnd: Pos(141, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(142, 9)\nEnd: Pos(142, 72)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testFactory_monthsBetween_RPartial_MonthDay$catena_0() {\n        MonthDay start = new MonthDay(2, 1);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        MonthDay end3 = new MonthDay(3, 1);\n        \n        assertEquals(0, Months.monthsBetween(start, end1).getMonths());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, Months.monthsBetween(start, end2).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, Months.monthsBetween(start, end3).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(0, Months.monthsBetween(end1, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Months.monthsBetween(end2, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, Months.monthsBetween(end3, start).getMonths());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testFactory_monthsBetween_RPartial_MonthDay$catena_1() {\n        MonthDay start = new MonthDay(2, 1);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        MonthDay end3 = new MonthDay(3, 1);\n        \n        try{ assertEquals(0, Months.monthsBetween(start, end1).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, Months.monthsBetween(start, end2).getMonths());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, Months.monthsBetween(start, end3).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(0, Months.monthsBetween(end1, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Months.monthsBetween(end2, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, Months.monthsBetween(end3, start).getMonths());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testFactory_monthsBetween_RPartial_MonthDay$catena_2() {\n        MonthDay start = new MonthDay(2, 1);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        MonthDay end3 = new MonthDay(3, 1);\n        \n        try{ assertEquals(0, Months.monthsBetween(start, end1).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Months.monthsBetween(start, end2).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, Months.monthsBetween(start, end3).getMonths());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        try{ assertEquals(0, Months.monthsBetween(end1, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Months.monthsBetween(end2, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, Months.monthsBetween(end3, start).getMonths());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testFactory_monthsBetween_RPartial_MonthDay$catena_3() {\n        MonthDay start = new MonthDay(2, 1);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        MonthDay end3 = new MonthDay(3, 1);\n        \n        try{ assertEquals(0, Months.monthsBetween(start, end1).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Months.monthsBetween(start, end2).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, Months.monthsBetween(start, end3).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        assertEquals(0, Months.monthsBetween(end1, start).getMonths());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, Months.monthsBetween(end2, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, Months.monthsBetween(end3, start).getMonths());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testFactory_monthsBetween_RPartial_MonthDay$catena_4() {\n        MonthDay start = new MonthDay(2, 1);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        MonthDay end3 = new MonthDay(3, 1);\n        \n        try{ assertEquals(0, Months.monthsBetween(start, end1).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Months.monthsBetween(start, end2).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, Months.monthsBetween(start, end3).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(0, Months.monthsBetween(end1, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, Months.monthsBetween(end2, start).getMonths());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, Months.monthsBetween(end3, start).getMonths());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testFactory_monthsBetween_RPartial_MonthDay$catena_5() {\n        MonthDay start = new MonthDay(2, 1);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        MonthDay end3 = new MonthDay(3, 1);\n        \n        try{ assertEquals(0, Months.monthsBetween(start, end1).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Months.monthsBetween(start, end2).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, Months.monthsBetween(start, end3).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(0, Months.monthsBetween(end1, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Months.monthsBetween(end2, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, Months.monthsBetween(end3, start).getMonths());                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testFactory_monthsBetween_RPartial_MonthDay$catena_0() {\n        MonthDay start = new MonthDay(2, 1);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        MonthDay end3 = new MonthDay(3, 1);\n        \n        assertEquals(0, Months.monthsBetween(start, end1).getMonths());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, Months.monthsBetween(start, end2).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, Months.monthsBetween(start, end3).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(0, Months.monthsBetween(end1, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Months.monthsBetween(end2, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, Months.monthsBetween(end3, start).getMonths());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testFactory_monthsBetween_RPartial_MonthDay$catena_1() {\n        MonthDay start = new MonthDay(2, 1);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        MonthDay end3 = new MonthDay(3, 1);\n        \n        try{ assertEquals(0, Months.monthsBetween(start, end1).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, Months.monthsBetween(start, end2).getMonths());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, Months.monthsBetween(start, end3).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(0, Months.monthsBetween(end1, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Months.monthsBetween(end2, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, Months.monthsBetween(end3, start).getMonths());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testFactory_monthsBetween_RPartial_MonthDay$catena_2() {\n        MonthDay start = new MonthDay(2, 1);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        MonthDay end3 = new MonthDay(3, 1);\n        \n        try{ assertEquals(0, Months.monthsBetween(start, end1).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Months.monthsBetween(start, end2).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, Months.monthsBetween(start, end3).getMonths());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        try{ assertEquals(0, Months.monthsBetween(end1, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Months.monthsBetween(end2, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, Months.monthsBetween(end3, start).getMonths());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testFactory_monthsBetween_RPartial_MonthDay$catena_3() {\n        MonthDay start = new MonthDay(2, 1);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        MonthDay end3 = new MonthDay(3, 1);\n        \n        try{ assertEquals(0, Months.monthsBetween(start, end1).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Months.monthsBetween(start, end2).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, Months.monthsBetween(start, end3).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        assertEquals(0, Months.monthsBetween(end1, start).getMonths());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(0, Months.monthsBetween(end2, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(-1, Months.monthsBetween(end3, start).getMonths());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void testFactory_monthsBetween_RPartial_MonthDay$catena_4() {\n        MonthDay start = new MonthDay(2, 1);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        MonthDay end3 = new MonthDay(3, 1);\n        \n        try{ assertEquals(0, Months.monthsBetween(start, end1).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Months.monthsBetween(start, end2).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, Months.monthsBetween(start, end3).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(0, Months.monthsBetween(end1, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(0, Months.monthsBetween(end2, start).getMonths());                                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(-1, Months.monthsBetween(end3, start).getMonths());                               }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void testFactory_monthsBetween_RPartial_MonthDay$catena_5() {\n        MonthDay start = new MonthDay(2, 1);\n        MonthDay end1 = new MonthDay(2, 28);\n        MonthDay end2 = new MonthDay(2, 29);\n        MonthDay end3 = new MonthDay(3, 1);\n        \n        try{ assertEquals(0, Months.monthsBetween(start, end1).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Months.monthsBetween(start, end2).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, Months.monthsBetween(start, end3).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        try{ assertEquals(0, Months.monthsBetween(end1, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(0, Months.monthsBetween(end2, start).getMonths());                                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(-1, Months.monthsBetween(end3, start).getMonths());                                    /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "11": {
        "failing_tests": [
            "org.joda.time.TestMonths::testFactory_monthsBetween_RPartial_MonthDay$catena_4",
            "org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay$catena_3",
            "org.joda.time.TestMonths::testFactory_monthsBetween_RPartial_MonthDay$catena_1",
            "org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay$catena_5",
            "org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay$catena_7",
            "org.joda.time.TestDays::testFactory_daysBetween_RPartial_MonthDay$catena_1"
        ]
    }
}