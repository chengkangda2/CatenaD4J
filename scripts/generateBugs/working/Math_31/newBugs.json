{
    "original": {
        "num_of_hunks": 4,
        "0": {
            "file_name": "src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
            "from_line_no": 134,
            "to_line_no": 135,
            "replaced": "        double p0 = 1.0;\n        double q1 = 1.0;\n",
            "patch_type": "delete",
            "next_line_no": 136
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
            "from_line_no": 143,
            "to_line_no": 166,
            "replaced_with": "            double dN = a + b * dPrev;\n            if (Precision.equals(dN, 0.0, small)) {\n                dN = small;\n            }\n            double cN = a + b / cPrev;\n            if (Precision.equals(cN, 0.0, small)) {\n                cN = small;\n",
            "replaced": "            double cN = a * hPrev + b * p0;\n            double q2 = a * q1 + b * dPrev;\n            if (Double.isInfinite(cN) || Double.isInfinite(q2)) {\n                double scaleFactor = 1d;\n                double lastScaleFactor = 1d;\n                final int maxPower = 5;\n                final double scale = FastMath.max(a,b);\n                if (scale <= 0) {  // Can't scale\n                    throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);\n                }\n                for (int i = 0; i < maxPower; i++) {\n                    lastScaleFactor = scaleFactor;\n                    scaleFactor *= scale;\n                    if (a != 0.0 && a > b) {\n                        cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);\n                        q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);\n                    } else if (b != 0) {\n                        cN = (a / scaleFactor * hPrev) + p0 / lastScaleFactor;\n                        q2 = (a / scaleFactor * q1) + dPrev / lastScaleFactor;\n                    }\n                    if (!(Double.isInfinite(cN) || Double.isInfinite(q2))) {\n                        break;\n                    }\n                }\n",
            "patch_type": "replace",
            "next_line_no": 167
        },
        "2": {
            "file_name": "src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
            "from_line_no": 169,
            "to_line_no": 170,
            "replaced_with": "            dN = 1 / dN;\n            final double deltaN = cN * dN;\n            hN = hPrev * deltaN;\n",
            "replaced": "            final double deltaN = cN / q2 / cPrev;\n            hN = cPrev * deltaN;\n",
            "patch_type": "replace",
            "next_line_no": 171
        },
        "3": {
            "file_name": "src/main/java/org/apache/commons/math3/util/ContinuedFraction.java",
            "from_line_no": 185,
            "to_line_no": 189,
            "replaced_with": "            dPrev = dN;\n            cPrev = cN;\n            hPrev = hN;\n",
            "replaced": "            dPrev = q1;\n            cPrev = cN / q2;\n            p0 = hPrev;\n            hPrev = cN;\n            q1 = q2;\n",
            "patch_type": "replace",
            "next_line_no": 190
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math3.distribution.BinomialDistributionTest::testMath718",
            "org.apache.commons.math3.distribution.FDistributionTest::testMath785"
        ],
        "org.apache.commons.math3.distribution.BinomialDistributionTest::testMath718": {
            "file_path": "src/test/java/org/apache/commons/math3/distribution/BinomialDistributionTest.java",
            "Instance": "Begin: Pos(132, 5)\nEnd: Pos(144, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_31/src/test/java//org/apache/commons/math3/distribution/BinomialDistributionTest.java\nName: testMath718\nChilds: [StatementAssertion<Begin: Pos(141, 13), End: Pos(141, 47)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_31/src/test/java//org/apache/commons/math3/distribution/BinomialDistributionTest.java",
            "name": "testMath718",
            "begin": "Pos(132, 5)",
            "end": "Pos(144, 5)",
            "begin_line_no": 132,
            "end_line_no": 144,
            "child": [
                "Begin: Pos(141, 13)\nEnd: Pos(141, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.apache.commons.math3.distribution.FDistributionTest::testMath785": {
            "file_path": "src/test/java/org/apache/commons/math3/distribution/FDistributionTest.java",
            "Instance": "Begin: Pos(146, 5)\nEnd: Pos(158, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_31/src/test/java//org/apache/commons/math3/distribution/FDistributionTest.java\nName: testMath785\nChilds: [StatementAssertion<Begin: Pos(154, 13), End: Pos(154, 44)>,\nStatementAssertion<Begin: Pos(156, 13), End: Pos(156, 79)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_31/src/test/java//org/apache/commons/math3/distribution/FDistributionTest.java",
            "name": "testMath785",
            "begin": "Pos(146, 5)",
            "end": "Pos(158, 5)",
            "begin_line_no": 146,
            "end_line_no": 158,
            "child": [
                "Begin: Pos(154, 13)\nEnd: Pos(154, 44)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(156, 13)\nEnd: Pos(156, 79)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testMath785$catena_0() {\n        // this test was failing due to inaccurate results from ContinuedFraction.\n\n        try {\n            double prob = 0.01;\n            FDistribution f = new FDistribution(200000, 200000);\n            double result = f.inverseCumulativeProbability(prob);\n            Assert.assertTrue(result < 1.0);                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (Exception e) {\n            try{ Assert.fail(\"Failing to calculate inverse cumulative probability\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    @Test\n    public void testMath785$catena_1() {\n        // this test was failing due to inaccurate results from ContinuedFraction.\n\n        try {\n            double prob = 0.01;\n            FDistribution f = new FDistribution(200000, 200000);\n            double result = f.inverseCumulativeProbability(prob);\n            try{ Assert.assertTrue(result < 1.0);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (Exception e) {\n            Assert.fail(\"Failing to calculate inverse cumulative probability\");                             /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testMath785$catena_0() {\n        // this test was failing due to inaccurate results from ContinuedFraction.\n\n        try {\n            double prob = 0.01;\n            FDistribution f = new FDistribution(200000, 200000);\n            double result = f.inverseCumulativeProbability(prob);\n            Assert.assertTrue(result < 1.0);                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (Exception e) {\n            try{ Assert.fail(\"Failing to calculate inverse cumulative probability\");                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "1": "    @Test\n    public void testMath785$catena_1() {\n        // this test was failing due to inaccurate results from ContinuedFraction.\n\n        try {\n            double prob = 0.01;\n            FDistribution f = new FDistribution(200000, 200000);\n            double result = f.inverseCumulativeProbability(prob);\n            try{ Assert.assertTrue(result < 1.0);                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (Exception e) {\n            Assert.fail(\"Failing to calculate inverse cumulative probability\");                             /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }"
            }
        }
    },
    "0111": {
        "failing_tests": [
            "org.apache.commons.math3.distribution.FDistributionTest::testMath785$catena_1",
            "org.apache.commons.math3.distribution.BinomialDistributionTest::testMath718"
        ]
    }
}