{
    "original": {
        "num_of_hunks": 3,
        "0": {
            "file_name": "src/main/java/org/joda/time/Partial.java",
            "replaced_with": "                if (loopUnitField.isSupported() == false) {\n                    if (lastUnitField.isSupported()) {\n                        throw new IllegalArgumentException(\"Types array must be in order largest-smallest: \" +\n                                        types[i - 1].getName() + \" < \" + loopType.getName());\n                    } else {\n                        throw new IllegalArgumentException(\"Types array must not contain duplicate unsupported: \" +\n                                        types[i - 1].getName() + \" and \" + loopType.getName());\n                    }\n                }\n",
            "patch_type": "insert",
            "next_line_no": 217
        },
        "1": {
            "file_name": "src/main/java/org/joda/time/Partial.java",
            "from_line_no": 221,
            "to_line_no": 221,
            "replaced_with": "                } else if (compare == 0 && lastUnitField.equals(loopUnitField)) {\n",
            "replaced": "                } else if (compare == 0) {\n",
            "patch_type": "replace",
            "next_line_no": 222
        },
        "2": {
            "file_name": "src/main/java/org/joda/time/field/UnsupportedDurationField.java",
            "from_line_no": 227,
            "to_line_no": 229,
            "replaced": "        if (durationField.isSupported()) {\n            return 1;\n        }\n",
            "patch_type": "delete",
            "next_line_no": 230
        }
    },
    "method": {
        "failing_tests": [
            "org.joda.time.TestPartial_Constructors::testConstructorEx7_TypeArray_intArray"
        ],
        "org.joda.time.TestPartial_Constructors::testConstructorEx7_TypeArray_intArray": {
            "file_path": "src/test/java/org/joda/time/TestPartial_Constructors.java",
            "Instance": "Begin: Pos(260, 12)\nEnd: Pos(315, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Time_1/src/test/java//org/joda/time/TestPartial_Constructors.java\nName: testConstructorEx7_TypeArray_intArray\nChilds: [StatementAssertion<Begin: Pos(266, 13), End: Pos(266, 19)>,\nStatementAssertion<Begin: Pos(268, 13), End: Pos(268, 78)>,\nStatementAssertion<Begin: Pos(275, 13), End: Pos(275, 19)>,\nStatementAssertion<Begin: Pos(277, 13), End: Pos(277, 78)>,\nStatementAssertion<Begin: Pos(284, 13), End: Pos(284, 19)>,\nStatementAssertion<Begin: Pos(286, 13), End: Pos(286, 78)>,\nStatementAssertion<Begin: Pos(293, 13), End: Pos(293, 19)>,\nStatementAssertion<Begin: Pos(295, 13), End: Pos(295, 78)>,\nStatementAssertion<Begin: Pos(302, 13), End: Pos(302, 19)>,\nStatementAssertion<Begin: Pos(304, 13), End: Pos(304, 78)>,\nStatementAssertion<Begin: Pos(311, 13), End: Pos(311, 19)>,\nStatementAssertion<Begin: Pos(313, 13), End: Pos(313, 78)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Time_1/src/test/java//org/joda/time/TestPartial_Constructors.java",
            "name": "testConstructorEx7_TypeArray_intArray",
            "begin": "Pos(260, 12)",
            "end": "Pos(315, 5)",
            "begin_line_no": 260,
            "end_line_no": 315,
            "child": [
                "Begin: Pos(266, 13)\nEnd: Pos(266, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(268, 13)\nEnd: Pos(268, 78)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(275, 13)\nEnd: Pos(275, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(277, 13)\nEnd: Pos(277, 78)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(284, 13)\nEnd: Pos(284, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(286, 13)\nEnd: Pos(286, 78)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(293, 13)\nEnd: Pos(293, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(295, 13)\nEnd: Pos(295, 78)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(302, 13)\nEnd: Pos(302, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(304, 13)\nEnd: Pos(304, 78)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(311, 13)\nEnd: Pos(311, 19)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(313, 13)\nEnd: Pos(313, 78)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testConstructorEx7_TypeArray_intArray$catena_0() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    public void testConstructorEx7_TypeArray_intArray$catena_1() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                              /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    public void testConstructorEx7_TypeArray_intArray$catena_2() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    public void testConstructorEx7_TypeArray_intArray$catena_3() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                              /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    public void testConstructorEx7_TypeArray_intArray$catena_4() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    public void testConstructorEx7_TypeArray_intArray$catena_5() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                              /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    public void testConstructorEx7_TypeArray_intArray$catena_6() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    public void testConstructorEx7_TypeArray_intArray$catena_7() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                              /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    public void testConstructorEx7_TypeArray_intArray$catena_8() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    public void testConstructorEx7_TypeArray_intArray$catena_9() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                              /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    public void testConstructorEx7_TypeArray_intArray$catena_10() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "    public void testConstructorEx7_TypeArray_intArray$catena_11() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                              /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }"
            ],
            "func": {
                "0": "    public void testConstructorEx7_TypeArray_intArray$catena_0() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "1": "    public void testConstructorEx7_TypeArray_intArray$catena_1() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                              /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "2": "    public void testConstructorEx7_TypeArray_intArray$catena_2() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "3": "    public void testConstructorEx7_TypeArray_intArray$catena_3() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                              /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "4": "    public void testConstructorEx7_TypeArray_intArray$catena_4() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "5": "    public void testConstructorEx7_TypeArray_intArray$catena_5() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                              /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "6": "    public void testConstructorEx7_TypeArray_intArray$catena_6() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "7": "    public void testConstructorEx7_TypeArray_intArray$catena_7() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                              /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "8": "    public void testConstructorEx7_TypeArray_intArray$catena_8() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "9": "    public void testConstructorEx7_TypeArray_intArray$catena_9() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                              /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "10": "    public void testConstructorEx7_TypeArray_intArray$catena_10() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            fail();                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n    }",
                "11": "    public void testConstructorEx7_TypeArray_intArray$catena_11() throws Throwable {\n        int[] values = new int[] {1, 1, 1};\n        DateTimeFieldType[] types = new DateTimeFieldType[] {\n            DateTimeFieldType.dayOfMonth(), DateTimeFieldType.year(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.era(), DateTimeFieldType.monthOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.era() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.year(), DateTimeFieldType.dayOfMonth(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            try{ assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        }\n        \n        types = new DateTimeFieldType[] {\n            DateTimeFieldType.yearOfEra(), DateTimeFieldType.year(), DateTimeFieldType.dayOfYear() };\n        try {\n            new Partial(types, values);\n            try{ fail();                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (IllegalArgumentException ex) {\n            assertMessageContains(ex, \"must be in order\", \"largest-smallest\");                              /***** ORIGINAL ASSERTION IS HERE *****/\n        }\n    }"
            }
        }
    }
}