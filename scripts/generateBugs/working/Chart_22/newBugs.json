{
    "original": {
        "num_of_hunks": 7,
        "0": {
            "file_name": "source/org/jfree/data/KeyedObjects2D.java",
            "from_line_no": 231,
            "to_line_no": 231,
            "replaced": "        if (row >= 0) {\n",
            "patch_type": "delete",
            "next_line_no": 232
        },
        "1": {
            "file_name": "source/org/jfree/data/KeyedObjects2D.java",
            "from_line_no": 233,
            "to_line_no": 233,
            "replaced_with": "        int index = rowData.getIndex(columnKey);\n        if (index >= 0) {\n            return rowData.getObject(index);\n",
            "replaced": "            return rowData.getObject(columnKey);\n",
            "patch_type": "replace",
            "next_line_no": 234
        },
        "2": {
            "file_name": "source/org/jfree/data/KeyedObjects2D.java",
            "replaced_with": "        allNull = true;\n",
            "patch_type": "insert",
            "next_line_no": 318
        },
        "3": {
            "file_name": "source/org/jfree/data/KeyedObjects2D.java",
            "replaced_with": "        for (int item = 0, itemCount = this.rows.size(); item < itemCount; \n             item++) {\n            row = (KeyedObjects) this.rows.get(item);\n            int columnIndex = row.getIndex(columnKey);\n            if (columnIndex >= 0 && row.getObject(columnIndex) != null) {\n                allNull = false;\n                break;\n            }\n        }\n",
            "patch_type": "insert",
            "next_line_no": 319
        },
        "4": {
            "file_name": "source/org/jfree/data/KeyedObjects2D.java",
            "replaced_with": "        if (allNull) {\n            for (int item = 0, itemCount = this.rows.size(); item < itemCount; \n                 item++) {\n                row = (KeyedObjects) this.rows.get(item);\n                int columnIndex = row.getIndex(columnKey);\n                if (columnIndex >= 0) {\n                    row.removeValue(columnIndex);\n                }\n            }\n            this.columnKeys.remove(columnKey);\n        }\n",
            "patch_type": "insert",
            "next_line_no": 320
        },
        "5": {
            "file_name": "source/org/jfree/data/KeyedObjects2D.java",
            "replaced_with": "        if (index < 0) {\n            throw new UnknownKeyException(\"Row key (\" + rowKey \n                    + \") not recognised.\");\n        }\n",
            "patch_type": "insert",
            "next_line_no": 345
        },
        "6": {
            "file_name": "source/org/jfree/data/KeyedObjects2D.java",
            "from_line_no": 378,
            "to_line_no": 378,
            "replaced_with": "            int i = rowData.getIndex(columnKey);\n            if (i >= 0) {\n                rowData.removeValue(i);\n            }\n",
            "replaced": "                rowData.removeValue(columnKey);\n",
            "patch_type": "replace",
            "next_line_no": 379
        }
    },
    "method": {
        "failing_tests": [
            "org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey",
            "org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue",
            "org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey",
            "org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex",
            "org.jfree.data.junit.KeyedObjects2DTests::testSetObject",
            "org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey"
        ],
        "org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey": {
            "file_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
            "Instance": "Begin: Pos(387, 12)\nEnd: Pos(414, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java\nName: testRemoveColumnByKey\nChilds: [StatementAssertion<Begin: Pos(392, 9), End: Pos(392, 47)>,\nStatementAssertion<Begin: Pos(393, 9), End: Pos(393, 51)>,\nStatementAssertion<Begin: Pos(403, 9), End: Pos(403, 25)>,\nStatementAssertion<Begin: Pos(413, 9), End: Pos(413, 25)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java",
            "name": "testRemoveColumnByKey",
            "begin": "Pos(387, 12)",
            "end": "Pos(414, 5)",
            "begin_line_no": 387,
            "end_line_no": 414,
            "child": [
                "Begin: Pos(392, 9)\nEnd: Pos(392, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(393, 9)\nEnd: Pos(393, 51)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(403, 9)\nEnd: Pos(403, 25)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(413, 9)\nEnd: Pos(413, 25)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testRemoveColumnByKey$catena_0() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(\"C2\");\n        assertEquals(1, data.getColumnCount());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Obj1\", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try unknown column key\n        boolean pass = false;\n        try {\n            data.removeColumn(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null column key\n        pass = false;\n        try {\n            data.removeColumn(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testRemoveColumnByKey$catena_1() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(\"C2\");\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Obj1\", data.getObject(0, 0));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // try unknown column key\n        boolean pass = false;\n        try {\n            data.removeColumn(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null column key\n        pass = false;\n        try {\n            data.removeColumn(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testRemoveColumnByKey$catena_2() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(\"C2\");\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj1\", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try unknown column key\n        boolean pass = false;\n        try {\n            data.removeColumn(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // try null column key\n        pass = false;\n        try {\n            data.removeColumn(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testRemoveColumnByKey$catena_3() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(\"C2\");\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj1\", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try unknown column key\n        boolean pass = false;\n        try {\n            data.removeColumn(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null column key\n        pass = false;\n        try {\n            data.removeColumn(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testRemoveColumnByKey$catena_0() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(\"C2\");\n        assertEquals(1, data.getColumnCount());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Obj1\", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try unknown column key\n        boolean pass = false;\n        try {\n            data.removeColumn(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null column key\n        pass = false;\n        try {\n            data.removeColumn(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testRemoveColumnByKey$catena_1() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(\"C2\");\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Obj1\", data.getObject(0, 0));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // try unknown column key\n        boolean pass = false;\n        try {\n            data.removeColumn(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null column key\n        pass = false;\n        try {\n            data.removeColumn(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testRemoveColumnByKey$catena_2() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(\"C2\");\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj1\", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try unknown column key\n        boolean pass = false;\n        try {\n            data.removeColumn(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // try null column key\n        pass = false;\n        try {\n            data.removeColumn(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testRemoveColumnByKey$catena_3() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(\"C2\");\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj1\", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try unknown column key\n        boolean pass = false;\n        try {\n            data.removeColumn(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null column key\n        pass = false;\n        try {\n            data.removeColumn(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue": {
            "file_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
            "Instance": "Begin: Pos(419, 12)\nEnd: Pos(427, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java\nName: testRemoveValue\nChilds: [StatementAssertion<Begin: Pos(424, 9), End: Pos(424, 44)>,\nStatementAssertion<Begin: Pos(425, 9), End: Pos(425, 47)>,\nStatementAssertion<Begin: Pos(426, 9), End: Pos(426, 51)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java",
            "name": "testRemoveValue",
            "begin": "Pos(419, 12)",
            "end": "Pos(427, 5)",
            "begin_line_no": 419,
            "end_line_no": 427,
            "child": [
                "Begin: Pos(424, 9)\nEnd: Pos(424, 44)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(425, 9)\nEnd: Pos(425, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(426, 9)\nEnd: Pos(426, 51)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testRemoveValue$catena_0() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeObject(\"R2\", \"C2\");\n        assertEquals(1, data.getRowCount());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj1\", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testRemoveValue$catena_1() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeObject(\"R2\", \"C2\");\n        try{ assertEquals(1, data.getRowCount());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, data.getColumnCount());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Obj1\", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testRemoveValue$catena_2() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeObject(\"R2\", \"C2\");\n        try{ assertEquals(1, data.getRowCount());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Obj1\", data.getObject(0, 0));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testRemoveValue$catena_0() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeObject(\"R2\", \"C2\");\n        assertEquals(1, data.getRowCount());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj1\", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testRemoveValue$catena_1() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeObject(\"R2\", \"C2\");\n        try{ assertEquals(1, data.getRowCount());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(1, data.getColumnCount());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Obj1\", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testRemoveValue$catena_2() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeObject(\"R2\", \"C2\");\n        try{ assertEquals(1, data.getRowCount());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Obj1\", data.getObject(0, 0));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey": {
            "file_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
            "Instance": "Begin: Pos(205, 12)\nEnd: Pos(250, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java\nName: testGetValueByKey\nChilds: [StatementAssertion<Begin: Pos(209, 9), End: Pos(209, 57)>,\nStatementAssertion<Begin: Pos(210, 9), End: Pos(210, 57)>,\nStatementAssertion<Begin: Pos(211, 9), End: Pos(211, 47)>,\nStatementAssertion<Begin: Pos(212, 9), End: Pos(212, 47)>,\nStatementAssertion<Begin: Pos(222, 9), End: Pos(222, 25)>,\nStatementAssertion<Begin: Pos(231, 9), End: Pos(231, 25)>,\nStatementAssertion<Begin: Pos(240, 9), End: Pos(240, 25)>,\nStatementAssertion<Begin: Pos(249, 9), End: Pos(249, 25)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java",
            "name": "testGetValueByKey",
            "begin": "Pos(205, 12)",
            "end": "Pos(250, 5)",
            "begin_line_no": 205,
            "end_line_no": 250,
            "child": [
                "Begin: Pos(209, 9)\nEnd: Pos(209, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(210, 9)\nEnd: Pos(210, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(211, 9)\nEnd: Pos(211, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(212, 9)\nEnd: Pos(212, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(222, 9)\nEnd: Pos(222, 25)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(231, 9)\nEnd: Pos(231, 25)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(240, 9)\nEnd: Pos(240, 25)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(249, 9)\nEnd: Pos(249, 25)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testGetValueByKey$catena_0() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testGetValueByKey$catena_1() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testGetValueByKey$catena_2() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNull(data.getObject(\"R1\", \"C2\"));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testGetValueByKey$catena_3() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNull(data.getObject(\"R2\", \"C1\"));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testGetValueByKey$catena_4() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testGetValueByKey$catena_5() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testGetValueByKey$catena_6() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testGetValueByKey$catena_7() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testGetValueByKey$catena_0() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testGetValueByKey$catena_1() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testGetValueByKey$catena_2() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNull(data.getObject(\"R1\", \"C2\"));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testGetValueByKey$catena_3() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNull(data.getObject(\"R2\", \"C1\"));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void testGetValueByKey$catena_4() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void testGetValueByKey$catena_5() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    public void testGetValueByKey$catena_6() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "7": "    public void testGetValueByKey$catena_7() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.addObject(\"Obj1\", \"R1\", \"C1\");\n        data.addObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // check invalid indices\n        boolean pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"XX\", \"C1\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        pass = false;\n        try {\n            data.getObject(\"R1\", \"XX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex": {
            "file_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
            "Instance": "Begin: Pos(323, 12)\nEnd: Pos(350, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java\nName: testRemoveColumnByIndex\nChilds: [StatementAssertion<Begin: Pos(328, 9), End: Pos(328, 47)>,\nStatementAssertion<Begin: Pos(329, 9), End: Pos(329, 51)>,\nStatementAssertion<Begin: Pos(339, 9), End: Pos(339, 25)>,\nStatementAssertion<Begin: Pos(349, 9), End: Pos(349, 25)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java",
            "name": "testRemoveColumnByIndex",
            "begin": "Pos(323, 12)",
            "end": "Pos(350, 5)",
            "begin_line_no": 323,
            "end_line_no": 350,
            "child": [
                "Begin: Pos(328, 9)\nEnd: Pos(328, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(329, 9)\nEnd: Pos(329, 51)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(339, 9)\nEnd: Pos(339, 25)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(349, 9)\nEnd: Pos(349, 25)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testRemoveColumnByIndex$catena_0() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(0);\n        assertEquals(1, data.getColumnCount());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Obj2\", data.getObject(1, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try negative column index\n        boolean pass = false;\n        try {\n            data.removeColumn(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try column index too high\n        pass = false;\n        try {\n            data.removeColumn(data.getColumnCount());\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testRemoveColumnByIndex$catena_1() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(0);\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Obj2\", data.getObject(1, 0));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // try negative column index\n        boolean pass = false;\n        try {\n            data.removeColumn(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try column index too high\n        pass = false;\n        try {\n            data.removeColumn(data.getColumnCount());\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testRemoveColumnByIndex$catena_2() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(0);\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(1, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try negative column index\n        boolean pass = false;\n        try {\n            data.removeColumn(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // try column index too high\n        pass = false;\n        try {\n            data.removeColumn(data.getColumnCount());\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testRemoveColumnByIndex$catena_3() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(0);\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(1, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try negative column index\n        boolean pass = false;\n        try {\n            data.removeColumn(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try column index too high\n        pass = false;\n        try {\n            data.removeColumn(data.getColumnCount());\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testRemoveColumnByIndex$catena_0() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(0);\n        assertEquals(1, data.getColumnCount());                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Obj2\", data.getObject(1, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try negative column index\n        boolean pass = false;\n        try {\n            data.removeColumn(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try column index too high\n        pass = false;\n        try {\n            data.removeColumn(data.getColumnCount());\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testRemoveColumnByIndex$catena_1() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(0);\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Obj2\", data.getObject(1, 0));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // try negative column index\n        boolean pass = false;\n        try {\n            data.removeColumn(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try column index too high\n        pass = false;\n        try {\n            data.removeColumn(data.getColumnCount());\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testRemoveColumnByIndex$catena_2() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(0);\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(1, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try negative column index\n        boolean pass = false;\n        try {\n            data.removeColumn(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // try column index too high\n        pass = false;\n        try {\n            data.removeColumn(data.getColumnCount());\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testRemoveColumnByIndex$catena_3() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeColumn(0);\n        try{ assertEquals(1, data.getColumnCount());                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(1, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try negative column index\n        boolean pass = false;\n        try {\n            data.removeColumn(-1);\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try column index too high\n        pass = false;\n        try {\n            data.removeColumn(data.getColumnCount());\n        }\n        catch (IndexOutOfBoundsException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.jfree.data.junit.KeyedObjects2DTests::testSetObject": {
            "file_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
            "Instance": "Begin: Pos(255, 12)\nEnd: Pos(286, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java\nName: testSetObject\nChilds: [StatementAssertion<Begin: Pos(259, 9), End: Pos(259, 57)>,\nStatementAssertion<Begin: Pos(260, 9), End: Pos(260, 57)>,\nStatementAssertion<Begin: Pos(261, 9), End: Pos(261, 47)>,\nStatementAssertion<Begin: Pos(262, 9), End: Pos(262, 47)>,\nStatementAssertion<Begin: Pos(266, 9), End: Pos(266, 56)>,\nStatementAssertion<Begin: Pos(276, 9), End: Pos(276, 25)>,\nStatementAssertion<Begin: Pos(285, 9), End: Pos(285, 25)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java",
            "name": "testSetObject",
            "begin": "Pos(255, 12)",
            "end": "Pos(286, 5)",
            "begin_line_no": 255,
            "end_line_no": 286,
            "child": [
                "Begin: Pos(259, 9)\nEnd: Pos(259, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(260, 9)\nEnd: Pos(260, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(261, 9)\nEnd: Pos(261, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(262, 9)\nEnd: Pos(262, 47)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(266, 9)\nEnd: Pos(266, 56)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(276, 9)\nEnd: Pos(276, 25)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(285, 9)\nEnd: Pos(285, 25)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testSetObject$catena_0() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // confirm overwriting an existing value\n        data.setObject(\"ABC\", \"R2\", \"C2\");\n        try{ assertEquals(\"ABC\", data.getObject(\"R2\", \"C2\"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null keys\n        boolean pass = false;\n        try {\n            data.setObject(\"X\", null, \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.setObject(\"X\", \"R1\", null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testSetObject$catena_1() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // confirm overwriting an existing value\n        data.setObject(\"ABC\", \"R2\", \"C2\");\n        try{ assertEquals(\"ABC\", data.getObject(\"R2\", \"C2\"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null keys\n        boolean pass = false;\n        try {\n            data.setObject(\"X\", null, \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.setObject(\"X\", \"R1\", null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testSetObject$catena_2() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNull(data.getObject(\"R1\", \"C2\"));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // confirm overwriting an existing value\n        data.setObject(\"ABC\", \"R2\", \"C2\");\n        try{ assertEquals(\"ABC\", data.getObject(\"R2\", \"C2\"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null keys\n        boolean pass = false;\n        try {\n            data.setObject(\"X\", null, \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.setObject(\"X\", \"R1\", null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testSetObject$catena_3() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNull(data.getObject(\"R2\", \"C1\"));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // confirm overwriting an existing value\n        data.setObject(\"ABC\", \"R2\", \"C2\");\n        try{ assertEquals(\"ABC\", data.getObject(\"R2\", \"C2\"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null keys\n        boolean pass = false;\n        try {\n            data.setObject(\"X\", null, \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.setObject(\"X\", \"R1\", null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testSetObject$catena_4() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // confirm overwriting an existing value\n        data.setObject(\"ABC\", \"R2\", \"C2\");\n        assertEquals(\"ABC\", data.getObject(\"R2\", \"C2\"));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // try null keys\n        boolean pass = false;\n        try {\n            data.setObject(\"X\", null, \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.setObject(\"X\", \"R1\", null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testSetObject$catena_5() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // confirm overwriting an existing value\n        data.setObject(\"ABC\", \"R2\", \"C2\");\n        try{ assertEquals(\"ABC\", data.getObject(\"R2\", \"C2\"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null keys\n        boolean pass = false;\n        try {\n            data.setObject(\"X\", null, \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        pass = false;\n        try {\n            data.setObject(\"X\", \"R1\", null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testSetObject$catena_6() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // confirm overwriting an existing value\n        data.setObject(\"ABC\", \"R2\", \"C2\");\n        try{ assertEquals(\"ABC\", data.getObject(\"R2\", \"C2\"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null keys\n        boolean pass = false;\n        try {\n            data.setObject(\"X\", null, \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.setObject(\"X\", \"R1\", null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testSetObject$catena_0() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // confirm overwriting an existing value\n        data.setObject(\"ABC\", \"R2\", \"C2\");\n        try{ assertEquals(\"ABC\", data.getObject(\"R2\", \"C2\"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null keys\n        boolean pass = false;\n        try {\n            data.setObject(\"X\", null, \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.setObject(\"X\", \"R1\", null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testSetObject$catena_1() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // confirm overwriting an existing value\n        data.setObject(\"ABC\", \"R2\", \"C2\");\n        try{ assertEquals(\"ABC\", data.getObject(\"R2\", \"C2\"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null keys\n        boolean pass = false;\n        try {\n            data.setObject(\"X\", null, \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.setObject(\"X\", \"R1\", null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testSetObject$catena_2() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNull(data.getObject(\"R1\", \"C2\"));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // confirm overwriting an existing value\n        data.setObject(\"ABC\", \"R2\", \"C2\");\n        try{ assertEquals(\"ABC\", data.getObject(\"R2\", \"C2\"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null keys\n        boolean pass = false;\n        try {\n            data.setObject(\"X\", null, \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.setObject(\"X\", \"R1\", null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testSetObject$catena_3() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertNull(data.getObject(\"R2\", \"C1\"));                                                             /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // confirm overwriting an existing value\n        data.setObject(\"ABC\", \"R2\", \"C2\");\n        try{ assertEquals(\"ABC\", data.getObject(\"R2\", \"C2\"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null keys\n        boolean pass = false;\n        try {\n            data.setObject(\"X\", null, \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.setObject(\"X\", \"R1\", null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    public void testSetObject$catena_4() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // confirm overwriting an existing value\n        data.setObject(\"ABC\", \"R2\", \"C2\");\n        assertEquals(\"ABC\", data.getObject(\"R2\", \"C2\"));                                                    /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // try null keys\n        boolean pass = false;\n        try {\n            data.setObject(\"X\", null, \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.setObject(\"X\", \"R1\", null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    public void testSetObject$catena_5() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // confirm overwriting an existing value\n        data.setObject(\"ABC\", \"R2\", \"C2\");\n        try{ assertEquals(\"ABC\", data.getObject(\"R2\", \"C2\"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null keys\n        boolean pass = false;\n        try {\n            data.setObject(\"X\", null, \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        pass = false;\n        try {\n            data.setObject(\"X\", \"R1\", null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    public void testSetObject$catena_6() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        try{ assertEquals(\"Obj1\", data.getObject(\"R1\", \"C1\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj2\", data.getObject(\"R2\", \"C2\"));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R1\", \"C2\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertNull(data.getObject(\"R2\", \"C1\"));                                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // confirm overwriting an existing value\n        data.setObject(\"ABC\", \"R2\", \"C2\");\n        try{ assertEquals(\"ABC\", data.getObject(\"R2\", \"C2\"));                                               }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null keys\n        boolean pass = false;\n        try {\n            data.setObject(\"X\", null, \"C1\");\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        pass = false;\n        try {\n            data.setObject(\"X\", \"R1\", null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey": {
            "file_path": "tests/org/jfree/data/junit/KeyedObjects2DTests.java",
            "Instance": "Begin: Pos(355, 12)\nEnd: Pos(382, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java\nName: testRemoveRowByKey\nChilds: [StatementAssertion<Begin: Pos(360, 9), End: Pos(360, 44)>,\nStatementAssertion<Begin: Pos(361, 9), End: Pos(361, 51)>,\nStatementAssertion<Begin: Pos(371, 9), End: Pos(371, 25)>,\nStatementAssertion<Begin: Pos(381, 9), End: Pos(381, 25)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Chart_22/tests//org/jfree/data/junit/KeyedObjects2DTests.java",
            "name": "testRemoveRowByKey",
            "begin": "Pos(355, 12)",
            "end": "Pos(382, 5)",
            "begin_line_no": 355,
            "end_line_no": 382,
            "child": [
                "Begin: Pos(360, 9)\nEnd: Pos(360, 44)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(361, 9)\nEnd: Pos(361, 51)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(371, 9)\nEnd: Pos(371, 25)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(381, 9)\nEnd: Pos(381, 25)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testRemoveRowByKey$catena_0() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeRow(\"R2\");\n        assertEquals(1, data.getRowCount());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Obj1\", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try unknown row key\n        boolean pass = false;\n        try {\n            data.removeRow(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null row key\n        pass = false;\n        try {\n            data.removeRow(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testRemoveRowByKey$catena_1() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeRow(\"R2\");\n        try{ assertEquals(1, data.getRowCount());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Obj1\", data.getObject(0, 0));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // try unknown row key\n        boolean pass = false;\n        try {\n            data.removeRow(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null row key\n        pass = false;\n        try {\n            data.removeRow(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testRemoveRowByKey$catena_2() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeRow(\"R2\");\n        try{ assertEquals(1, data.getRowCount());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj1\", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try unknown row key\n        boolean pass = false;\n        try {\n            data.removeRow(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // try null row key\n        pass = false;\n        try {\n            data.removeRow(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testRemoveRowByKey$catena_3() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeRow(\"R2\");\n        try{ assertEquals(1, data.getRowCount());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj1\", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try unknown row key\n        boolean pass = false;\n        try {\n            data.removeRow(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null row key\n        pass = false;\n        try {\n            data.removeRow(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testRemoveRowByKey$catena_0() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeRow(\"R2\");\n        assertEquals(1, data.getRowCount());                                                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Obj1\", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try unknown row key\n        boolean pass = false;\n        try {\n            data.removeRow(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null row key\n        pass = false;\n        try {\n            data.removeRow(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testRemoveRowByKey$catena_1() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeRow(\"R2\");\n        try{ assertEquals(1, data.getRowCount());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Obj1\", data.getObject(0, 0));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // try unknown row key\n        boolean pass = false;\n        try {\n            data.removeRow(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null row key\n        pass = false;\n        try {\n            data.removeRow(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testRemoveRowByKey$catena_2() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeRow(\"R2\");\n        try{ assertEquals(1, data.getRowCount());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj1\", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try unknown row key\n        boolean pass = false;\n        try {\n            data.removeRow(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        \n        // try null row key\n        pass = false;\n        try {\n            data.removeRow(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testRemoveRowByKey$catena_3() {\n        KeyedObjects2D data = new KeyedObjects2D();\n        data.setObject(\"Obj1\", \"R1\", \"C1\");\n        data.setObject(\"Obj2\", \"R2\", \"C2\");\n        data.removeRow(\"R2\");\n        try{ assertEquals(1, data.getRowCount());                                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Obj1\", data.getObject(0, 0));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try unknown row key\n        boolean pass = false;\n        try {\n            data.removeRow(\"XXX\");\n        }\n        catch (UnknownKeyException e) {\n            pass = true;\n        }\n        try{ assertTrue(pass);                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        \n        // try null row key\n        pass = false;\n        try {\n            data.removeRow(null);\n        }\n        catch (IllegalArgumentException e) {\n            pass = true;\n        }\n        assertTrue(pass);                                                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "0000001": {
        "failing_tests": [
            "org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_2",
            "org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_2",
            "org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_1",
            "org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_1",
            "org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_3",
            "org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_0",
            "org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByKey$catena_0",
            "org.jfree.data.junit.KeyedObjects2DTests::testRemoveColumnByIndex$catena_3"
        ]
    },
    "0000010": {
        "failing_tests": [
            "org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_1",
            "org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_3",
            "org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_2",
            "org.jfree.data.junit.KeyedObjects2DTests::testRemoveRowByKey$catena_0"
        ]
    },
    "0000100": {
        "failing_tests": [
            "org.jfree.data.junit.KeyedObjects2DTests::testRemoveValue$catena_1"
        ]
    },
    "1100000": {
        "failing_tests": [
            "org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_3",
            "org.jfree.data.junit.KeyedObjects2DTests::testSetObject$catena_2",
            "org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_3",
            "org.jfree.data.junit.KeyedObjects2DTests::testGetValueByKey$catena_2"
        ]
    }
}