{
    "original": {
        "num_of_hunks": 3,
        "0": {
            "file_name": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java",
            "from_line_no": 144,
            "to_line_no": 144,
            "replaced_with": "        double ret = 1.0;\n",
            "replaced": "        double ret;\n",
            "patch_type": "replace",
            "next_line_no": 145
        },
        "1": {
            "file_name": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java",
            "replaced_with": "        if (d > 2.0) {\n",
            "patch_type": "insert",
            "next_line_no": 146
        },
        "2": {
            "file_name": "src/java/org/apache/commons/math/distribution/FDistributionImpl.java",
            "replaced_with": "        }\n",
            "patch_type": "insert",
            "next_line_no": 148
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.distribution.FDistributionTest::testSmallDegreesOfFreedom"
        ],
        "org.apache.commons.math.distribution.FDistributionTest::testSmallDegreesOfFreedom": {
            "file_path": "src/test/org/apache/commons/math/distribution/FDistributionTest.java",
            "Instance": "Begin: Pos(109, 12)\nEnd: Pos(121, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_95/src/test//org/apache/commons/math/distribution/FDistributionTest.java\nName: testSmallDegreesOfFreedom\nChilds: [StatementAssertion<Begin: Pos(115, 9), End: Pos(115, 39)>,\nStatementAssertion<Begin: Pos(120, 9), End: Pos(120, 39)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_95/src/test//org/apache/commons/math/distribution/FDistributionTest.java",
            "name": "testSmallDegreesOfFreedom",
            "begin": "Pos(109, 12)",
            "end": "Pos(121, 5)",
            "begin_line_no": 109,
            "end_line_no": 121,
            "child": [
                "Begin: Pos(115, 9)\nEnd: Pos(115, 39)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(120, 9)\nEnd: Pos(120, 39)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testSmallDegreesOfFreedom$catena_0() throws Exception {\n        org.apache.commons.math.distribution.FDistributionImpl fd =\n            new org.apache.commons.math.distribution.FDistributionImpl(\n                1.0, 1.0);\n        double p = fd.cumulativeProbability(0.975);\n        double x = fd.inverseCumulativeProbability(p);\n        assertEquals(0.975, x, 1.0e-5);                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n        fd.setDenominatorDegreesOfFreedom(2.0);\n        p = fd.cumulativeProbability(0.975);\n        x = fd.inverseCumulativeProbability(p);\n        try{ assertEquals(0.975, x, 1.0e-5);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testSmallDegreesOfFreedom$catena_1() throws Exception {\n        org.apache.commons.math.distribution.FDistributionImpl fd =\n            new org.apache.commons.math.distribution.FDistributionImpl(\n                1.0, 1.0);\n        double p = fd.cumulativeProbability(0.975);\n        double x = fd.inverseCumulativeProbability(p);\n        try{ assertEquals(0.975, x, 1.0e-5);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        fd.setDenominatorDegreesOfFreedom(2.0);\n        p = fd.cumulativeProbability(0.975);\n        x = fd.inverseCumulativeProbability(p);\n        assertEquals(0.975, x, 1.0e-5);                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testSmallDegreesOfFreedom$catena_0() throws Exception {\n        org.apache.commons.math.distribution.FDistributionImpl fd =\n            new org.apache.commons.math.distribution.FDistributionImpl(\n                1.0, 1.0);\n        double p = fd.cumulativeProbability(0.975);\n        double x = fd.inverseCumulativeProbability(p);\n        assertEquals(0.975, x, 1.0e-5);                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\n        fd.setDenominatorDegreesOfFreedom(2.0);\n        p = fd.cumulativeProbability(0.975);\n        x = fd.inverseCumulativeProbability(p);\n        try{ assertEquals(0.975, x, 1.0e-5);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testSmallDegreesOfFreedom$catena_1() throws Exception {\n        org.apache.commons.math.distribution.FDistributionImpl fd =\n            new org.apache.commons.math.distribution.FDistributionImpl(\n                1.0, 1.0);\n        double p = fd.cumulativeProbability(0.975);\n        double x = fd.inverseCumulativeProbability(p);\n        try{ assertEquals(0.975, x, 1.0e-5);                                                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        fd.setDenominatorDegreesOfFreedom(2.0);\n        p = fd.cumulativeProbability(0.975);\n        x = fd.inverseCumulativeProbability(p);\n        assertEquals(0.975, x, 1.0e-5);                                                                     /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "111": {
        "failing_tests": [
            "org.apache.commons.math.distribution.FDistributionTest::testSmallDegreesOfFreedom$catena_1",
            "org.apache.commons.math.distribution.FDistributionTest::testSmallDegreesOfFreedom$catena_0"
        ]
    }
}