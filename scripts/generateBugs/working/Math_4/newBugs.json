{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/main/java/org/apache/commons/math3/geometry/euclidean/threed/SubLine.java",
            "replaced_with": "        if (v1D == null) {\n            return null;\n        }\n",
            "patch_type": "insert",
            "next_line_no": 114
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/math3/geometry/euclidean/twod/SubLine.java",
            "replaced_with": "        if (v2D == null) {\n            return null;\n        }\n",
            "patch_type": "insert",
            "next_line_no": 118
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting",
            "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel"
        ],
        "org.apache.commons.math3.geometry.euclidean.threed.SubLineTest::testIntersectionNotIntersecting": {
            "file_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java",
            "Instance": "Begin: Pos(156, 5)\nEnd: Pos(162, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_4/src/test/java//org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java\nName: testIntersectionNotIntersecting\nChilds: [StatementAssertion<Begin: Pos(160, 9), End: Pos(160, 57)>,\nStatementAssertion<Begin: Pos(161, 9), End: Pos(161, 58)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_4/src/test/java//org/apache/commons/math3/geometry/euclidean/threed/SubLineTest.java",
            "name": "testIntersectionNotIntersecting",
            "begin": "Pos(156, 5)",
            "end": "Pos(162, 5)",
            "begin_line_no": 156,
            "end_line_no": 162,
            "child": [
                "Begin: Pos(160, 9)\nEnd: Pos(160, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(161, 9)\nEnd: Pos(161, 58)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testIntersectionNotIntersecting$catena_0() throws MathIllegalArgumentException {\n        SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(1.5, 1, 1));\n        SubLine sub2 = new SubLine(new Vector3D(2, 3, 0), new Vector3D(2, 3, 0.5));\n        Assert.assertNull(sub1.intersection(sub2, true));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertNull(sub1.intersection(sub2, false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testIntersectionNotIntersecting$catena_1() throws MathIllegalArgumentException {\n        SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(1.5, 1, 1));\n        SubLine sub2 = new SubLine(new Vector3D(2, 3, 0), new Vector3D(2, 3, 0.5));\n        try{ Assert.assertNull(sub1.intersection(sub2, true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertNull(sub1.intersection(sub2, false));                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testIntersectionNotIntersecting$catena_0() throws MathIllegalArgumentException {\n        SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(1.5, 1, 1));\n        SubLine sub2 = new SubLine(new Vector3D(2, 3, 0), new Vector3D(2, 3, 0.5));\n        Assert.assertNull(sub1.intersection(sub2, true));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertNull(sub1.intersection(sub2, false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void testIntersectionNotIntersecting$catena_1() throws MathIllegalArgumentException {\n        SubLine sub1 = new SubLine(new Vector3D(1, 1, 1), new Vector3D(1.5, 1, 1));\n        SubLine sub2 = new SubLine(new Vector3D(2, 3, 0), new Vector3D(2, 3, 0.5));\n        try{ Assert.assertNull(sub1.intersection(sub2, true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertNull(sub1.intersection(sub2, false));                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        },
        "org.apache.commons.math3.geometry.euclidean.twod.SubLineTest::testIntersectionParallel": {
            "file_path": "src/test/java/org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java",
            "Instance": "Begin: Pos(147, 5)\nEnd: Pos(153, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_4/src/test/java//org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java\nName: testIntersectionParallel\nChilds: [StatementAssertion<Begin: Pos(151, 9), End: Pos(151, 57)>,\nStatementAssertion<Begin: Pos(152, 9), End: Pos(152, 58)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_4/src/test/java//org/apache/commons/math3/geometry/euclidean/twod/SubLineTest.java",
            "name": "testIntersectionParallel",
            "begin": "Pos(147, 5)",
            "end": "Pos(153, 5)",
            "begin_line_no": 147,
            "end_line_no": 153,
            "child": [
                "Begin: Pos(151, 9)\nEnd: Pos(151, 57)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(152, 9)\nEnd: Pos(152, 58)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testIntersectionParallel$catena_0() {\n        final SubLine sub1 = new SubLine(new Vector2D(0, 1), new Vector2D(0, 2));\n        final SubLine sub2 = new SubLine(new Vector2D(66, 3), new Vector2D(66, 4));\n        Assert.assertNull(sub1.intersection(sub2, true));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertNull(sub1.intersection(sub2, false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testIntersectionParallel$catena_1() {\n        final SubLine sub1 = new SubLine(new Vector2D(0, 1), new Vector2D(0, 2));\n        final SubLine sub2 = new SubLine(new Vector2D(66, 3), new Vector2D(66, 4));\n        try{ Assert.assertNull(sub1.intersection(sub2, true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertNull(sub1.intersection(sub2, false));                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testIntersectionParallel$catena_0() {\n        final SubLine sub1 = new SubLine(new Vector2D(0, 1), new Vector2D(0, 2));\n        final SubLine sub2 = new SubLine(new Vector2D(66, 3), new Vector2D(66, 4));\n        Assert.assertNull(sub1.intersection(sub2, true));                                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ Assert.assertNull(sub1.intersection(sub2, false));                                             }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void testIntersectionParallel$catena_1() {\n        final SubLine sub1 = new SubLine(new Vector2D(0, 1), new Vector2D(0, 2));\n        final SubLine sub2 = new SubLine(new Vector2D(66, 3), new Vector2D(66, 4));\n        try{ Assert.assertNull(sub1.intersection(sub2, true));                                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        Assert.assertNull(sub1.intersection(sub2, false));                                                  /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    }
}