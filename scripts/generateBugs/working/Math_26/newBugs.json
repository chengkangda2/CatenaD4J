{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/main/java/org/apache/commons/math3/fraction/Fraction.java",
            "from_line_no": 181,
            "to_line_no": 181,
            "replaced_with": "        if (FastMath.abs(a0) > overflow) {\n",
            "replaced": "        if (a0 > overflow) {\n",
            "patch_type": "replace",
            "next_line_no": 182
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/math3/fraction/Fraction.java",
            "from_line_no": 209,
            "to_line_no": 209,
            "replaced_with": "            if ((FastMath.abs(p2) > overflow) || (FastMath.abs(q2) > overflow)) {\n",
            "replaced": "            if ((p2 > overflow) || (q2 > overflow)) {\n",
            "patch_type": "replace",
            "next_line_no": 210
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math3.fraction.FractionTest::testIntegerOverflow"
        ],
        "org.apache.commons.math3.fraction.FractionTest::testIntegerOverflow": {
            "file_path": "src/test/java/org/apache/commons/math3/fraction/FractionTest.java",
            "Instance": "Begin: Pos(134, 5)\nEnd: Pos(140, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_26/src/test/java//org/apache/commons/math3/fraction/FractionTest.java\nName: testIntegerOverflow\nChilds: [StatementAssertion<Begin: Pos(136, 9), End: Pos(136, 50)>,\nStatementAssertion<Begin: Pos(137, 9), End: Pos(137, 37)>,\nStatementAssertion<Begin: Pos(138, 9), End: Pos(138, 38)>,\nStatementAssertion<Begin: Pos(139, 9), End: Pos(139, 49)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_26/src/test/java//org/apache/commons/math3/fraction/FractionTest.java",
            "name": "testIntegerOverflow",
            "begin": "Pos(134, 5)",
            "end": "Pos(140, 5)",
            "begin_line_no": 134,
            "end_line_no": 140,
            "child": [
                "Begin: Pos(136, 9)\nEnd: Pos(136, 50)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(137, 9)\nEnd: Pos(137, 37)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(138, 9)\nEnd: Pos(138, 38)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(139, 9)\nEnd: Pos(139, 49)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testIntegerOverflow$catena_0() {\n        checkIntegerOverflow(0.75000000001455192);                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ checkIntegerOverflow(1.0e10);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ checkIntegerOverflow(-1.0e10);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ checkIntegerOverflow(-43979.60679604749);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testIntegerOverflow$catena_1() {\n        try{ checkIntegerOverflow(0.75000000001455192);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        checkIntegerOverflow(1.0e10);                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ checkIntegerOverflow(-1.0e10);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ checkIntegerOverflow(-43979.60679604749);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testIntegerOverflow$catena_2() {\n        try{ checkIntegerOverflow(0.75000000001455192);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ checkIntegerOverflow(1.0e10);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        checkIntegerOverflow(-1.0e10);                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ checkIntegerOverflow(-43979.60679604749);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void testIntegerOverflow$catena_3() {\n        try{ checkIntegerOverflow(0.75000000001455192);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ checkIntegerOverflow(1.0e10);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ checkIntegerOverflow(-1.0e10);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        checkIntegerOverflow(-43979.60679604749);                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testIntegerOverflow$catena_0() {\n        checkIntegerOverflow(0.75000000001455192);                                                          /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ checkIntegerOverflow(1.0e10);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ checkIntegerOverflow(-1.0e10);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ checkIntegerOverflow(-43979.60679604749);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void testIntegerOverflow$catena_1() {\n        try{ checkIntegerOverflow(0.75000000001455192);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        checkIntegerOverflow(1.0e10);                                                                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ checkIntegerOverflow(-1.0e10);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ checkIntegerOverflow(-43979.60679604749);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void testIntegerOverflow$catena_2() {\n        try{ checkIntegerOverflow(0.75000000001455192);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ checkIntegerOverflow(1.0e10);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        checkIntegerOverflow(-1.0e10);                                                                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ checkIntegerOverflow(-43979.60679604749);                                                      }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    @Test\n    public void testIntegerOverflow$catena_3() {\n        try{ checkIntegerOverflow(0.75000000001455192);                                                     }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ checkIntegerOverflow(1.0e10);                                                                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ checkIntegerOverflow(-1.0e10);                                                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        checkIntegerOverflow(-43979.60679604749);                                                           /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    }
}