{
    "original": {
        "num_of_hunks": 2,
        "0": {
            "file_name": "src/java/org/apache/commons/math/stat/Frequency.java",
            "replaced_with": "        addValue((Comparable<?>) v);\n    }\n",
            "patch_type": "insert",
            "next_line_no": 110
        },
        "1": {
            "file_name": "src/java/org/apache/commons/math/stat/Frequency.java",
            "replaced_with": "    public void addValue(Comparable<?>v){\n",
            "patch_type": "insert",
            "next_line_no": 121
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable"
        ],
        "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable": {
            "file_path": "src/test/org/apache/commons/math/stat/FrequencyTest.java",
            "Instance": "Begin: Pos(193, 12)\nEnd: Pos(206, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_90/src/test//org/apache/commons/math/stat/FrequencyTest.java\nName: testAddNonComparable\nChilds: [StatementAssertion<Begin: Pos(196, 13), End: Pos(196, 48)>,\nStatementAssertion<Begin: Pos(203, 13), End: Pos(203, 48)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_90/src/test//org/apache/commons/math/stat/FrequencyTest.java",
            "name": "testAddNonComparable",
            "begin": "Pos(193, 12)",
            "end": "Pos(206, 5)",
            "begin_line_no": 193,
            "end_line_no": 206,
            "child": [
                "Begin: Pos(196, 13)\nEnd: Pos(196, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(203, 13)\nEnd: Pos(203, 48)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testAddNonComparable$catena_0(){\n        try {\n            f.addValue(new Object()); // This was OK\n            fail(\"Expected ClassCastException\");                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ClassCastException expected) {\n        }\n        f.clear();\n        f.addValue(1);\n        try {\n            f.addValue(new Object());\n            try{ fail(\"Expected ClassCastException\");         }catch(Throwable __SHOULD_BE_IGNORED){} // Previously would have been IllegalArgument\n        } catch (ClassCastException expected) {\n        }\n    }",
                "    public void testAddNonComparable$catena_1(){\n        try {\n            f.addValue(new Object()); // This was OK\n            try{ fail(\"Expected ClassCastException\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ClassCastException expected) {\n        }\n        f.clear();\n        f.addValue(1);\n        try {\n            f.addValue(new Object());\n            fail(\"Expected ClassCastException\");              /***** ORIGINAL ASSERTION IS HERE *****/ // Previously would have been IllegalArgument\n        } catch (ClassCastException expected) {\n        }\n    }"
            ],
            "func": {
                "0": "    public void testAddNonComparable$catena_0(){\n        try {\n            f.addValue(new Object()); // This was OK\n            fail(\"Expected ClassCastException\");                                                            /***** ORIGINAL ASSERTION IS HERE *****/\n        } catch (ClassCastException expected) {\n        }\n        f.clear();\n        f.addValue(1);\n        try {\n            f.addValue(new Object());\n            try{ fail(\"Expected ClassCastException\");         }catch(Throwable __SHOULD_BE_IGNORED){} // Previously would have been IllegalArgument\n        } catch (ClassCastException expected) {\n        }\n    }",
                "1": "    public void testAddNonComparable$catena_1(){\n        try {\n            f.addValue(new Object()); // This was OK\n            try{ fail(\"Expected ClassCastException\");                                                       }catch(Throwable __SHOULD_BE_IGNORED){}\n        } catch (ClassCastException expected) {\n        }\n        f.clear();\n        f.addValue(1);\n        try {\n            f.addValue(new Object());\n            fail(\"Expected ClassCastException\");              /***** ORIGINAL ASSERTION IS HERE *****/ // Previously would have been IllegalArgument\n        } catch (ClassCastException expected) {\n        }\n    }"
            }
        }
    },
    "11": {
        "failing_tests": [
            "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable$catena_1",
            "org.apache.commons.math.stat.FrequencyTest::testAddNonComparable$catena_0"
        ]
    }
}