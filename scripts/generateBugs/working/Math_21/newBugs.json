{
    "original": {
        "num_of_hunks": 6,
        "0": {
            "file_name": "src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java",
            "from_line_no": 69,
            "to_line_no": 69,
            "replaced": "        int[] swap  = new int[order];\n",
            "patch_type": "delete",
            "next_line_no": 70
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java",
            "from_line_no": 79,
            "to_line_no": 79,
            "replaced_with": "            int swapR = r;\n",
            "replaced": "            swap[r] = r;\n",
            "patch_type": "replace",
            "next_line_no": 80
        },
        "2": {
            "file_name": "src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java",
            "from_line_no": 82,
            "to_line_no": 84,
            "replaced_with": "                int isr = index[swapR];\n                if (c[ii][ii] > c[isr][isr]) {\n                    swapR = i;\n",
            "replaced": "                int isi = index[swap[i]];\n                if (c[ii][ii] > c[isi][isi]) {\n                    swap[r] = i;\n",
            "patch_type": "replace",
            "next_line_no": 85
        },
        "3": {
            "file_name": "src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java",
            "from_line_no": 90,
            "to_line_no": 93,
            "replaced_with": "            if (swapR != r) {\n                final int tmpIndex    = index[r];\n                index[r]              = index[swapR];\n                index[swapR]          = tmpIndex;\n                final double[] tmpRow = b[r];\n                b[r]                  = b[swapR];\n                b[swapR]              = tmpRow;\n",
            "replaced": "            if (swap[r] != r) {\n                int tmp = index[r];\n                index[r] = index[swap[r]];\n                index[swap[r]] = tmp;\n",
            "patch_type": "replace",
            "next_line_no": 94
        },
        "4": {
            "file_name": "src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java",
            "replaced_with": "                final double inverse2 = 1 / c[ir][ir];\n",
            "patch_type": "insert",
            "next_line_no": 124
        },
        "5": {
            "file_name": "src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java",
            "from_line_no": 128,
            "to_line_no": 128,
            "replaced_with": "                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;\n",
            "replaced": "                    c[ii][ii] -= e * e;\n",
            "patch_type": "replace",
            "next_line_no": 129
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789",
            "org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank"
        ],
        "org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789": {
            "file_path": "src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java",
            "Instance": "Begin: Pos(75, 5)\nEnd: Pos(110, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_21/src/test/java//org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java\nName: testMath789\nChilds: [StatementAssertion<Begin: Pos(86, 9), End: Pos(86, 76)>,\nStatementAssertion<Begin: Pos(97, 9), End: Pos(97, 76)>,\nStatementAssertion<Begin: Pos(108, 9), End: Pos(108, 76)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_21/src/test/java//org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java",
            "name": "testMath789",
            "begin": "Pos(75, 5)",
            "end": "Pos(110, 5)",
            "begin_line_no": 75,
            "end_line_no": 110,
            "child": [
                "Begin: Pos(86, 9)\nEnd: Pos(86, 76)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(97, 9)\nEnd: Pos(97, 76)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(108, 9)\nEnd: Pos(108, 76)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testMath789$catena_0() {\n\n        final RealMatrix m1 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.013445532, 0.010394690, 0.009881156, 0.010499559},\n            {0.010394690, 0.023006616, 0.008196856, 0.010732709},\n            {0.009881156, 0.008196856, 0.019023866, 0.009210099},\n            {0.010499559, 0.010732709, 0.009210099, 0.019107243}\n        });\n        RealMatrix root1 = new RectangularCholeskyDecomposition(m1, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM1 = root1.multiply(root1.transpose());\n        Assert.assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16);                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        final RealMatrix m2 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.0, 0.0, 0.0, 0.0, 0.0},\n            {0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559},\n            {0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709},\n            {0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},\n            {0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}\n        });\n        RealMatrix root2 = new RectangularCholeskyDecomposition(m2, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM2 = root2.multiply(root2.transpose());\n        try{ Assert.assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final RealMatrix m3 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559},\n            {0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709},\n            {0.0, 0.0, 0.0, 0.0, 0.0},\n            {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},\n            {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}\n        });\n        RealMatrix root3 = new RectangularCholeskyDecomposition(m3, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM3 = root3.multiply(root3.transpose());\n        try{ Assert.assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void testMath789$catena_1() {\n\n        final RealMatrix m1 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.013445532, 0.010394690, 0.009881156, 0.010499559},\n            {0.010394690, 0.023006616, 0.008196856, 0.010732709},\n            {0.009881156, 0.008196856, 0.019023866, 0.009210099},\n            {0.010499559, 0.010732709, 0.009210099, 0.019107243}\n        });\n        RealMatrix root1 = new RectangularCholeskyDecomposition(m1, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM1 = root1.multiply(root1.transpose());\n        try{ Assert.assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final RealMatrix m2 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.0, 0.0, 0.0, 0.0, 0.0},\n            {0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559},\n            {0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709},\n            {0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},\n            {0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}\n        });\n        RealMatrix root2 = new RectangularCholeskyDecomposition(m2, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM2 = root2.multiply(root2.transpose());\n        Assert.assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16);                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        final RealMatrix m3 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559},\n            {0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709},\n            {0.0, 0.0, 0.0, 0.0, 0.0},\n            {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},\n            {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}\n        });\n        RealMatrix root3 = new RectangularCholeskyDecomposition(m3, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM3 = root3.multiply(root3.transpose());\n        try{ Assert.assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void testMath789$catena_2() {\n\n        final RealMatrix m1 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.013445532, 0.010394690, 0.009881156, 0.010499559},\n            {0.010394690, 0.023006616, 0.008196856, 0.010732709},\n            {0.009881156, 0.008196856, 0.019023866, 0.009210099},\n            {0.010499559, 0.010732709, 0.009210099, 0.019107243}\n        });\n        RealMatrix root1 = new RectangularCholeskyDecomposition(m1, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM1 = root1.multiply(root1.transpose());\n        try{ Assert.assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final RealMatrix m2 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.0, 0.0, 0.0, 0.0, 0.0},\n            {0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559},\n            {0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709},\n            {0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},\n            {0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}\n        });\n        RealMatrix root2 = new RectangularCholeskyDecomposition(m2, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM2 = root2.multiply(root2.transpose());\n        try{ Assert.assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final RealMatrix m3 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559},\n            {0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709},\n            {0.0, 0.0, 0.0, 0.0, 0.0},\n            {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},\n            {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}\n        });\n        RealMatrix root3 = new RectangularCholeskyDecomposition(m3, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM3 = root3.multiply(root3.transpose());\n        Assert.assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testMath789$catena_0() {\n\n        final RealMatrix m1 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.013445532, 0.010394690, 0.009881156, 0.010499559},\n            {0.010394690, 0.023006616, 0.008196856, 0.010732709},\n            {0.009881156, 0.008196856, 0.019023866, 0.009210099},\n            {0.010499559, 0.010732709, 0.009210099, 0.019107243}\n        });\n        RealMatrix root1 = new RectangularCholeskyDecomposition(m1, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM1 = root1.multiply(root1.transpose());\n        Assert.assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16);                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        final RealMatrix m2 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.0, 0.0, 0.0, 0.0, 0.0},\n            {0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559},\n            {0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709},\n            {0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},\n            {0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}\n        });\n        RealMatrix root2 = new RectangularCholeskyDecomposition(m2, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM2 = root2.multiply(root2.transpose());\n        try{ Assert.assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final RealMatrix m3 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559},\n            {0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709},\n            {0.0, 0.0, 0.0, 0.0, 0.0},\n            {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},\n            {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}\n        });\n        RealMatrix root3 = new RectangularCholeskyDecomposition(m3, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM3 = root3.multiply(root3.transpose());\n        try{ Assert.assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "1": "    @Test\n    public void testMath789$catena_1() {\n\n        final RealMatrix m1 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.013445532, 0.010394690, 0.009881156, 0.010499559},\n            {0.010394690, 0.023006616, 0.008196856, 0.010732709},\n            {0.009881156, 0.008196856, 0.019023866, 0.009210099},\n            {0.010499559, 0.010732709, 0.009210099, 0.019107243}\n        });\n        RealMatrix root1 = new RectangularCholeskyDecomposition(m1, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM1 = root1.multiply(root1.transpose());\n        try{ Assert.assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final RealMatrix m2 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.0, 0.0, 0.0, 0.0, 0.0},\n            {0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559},\n            {0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709},\n            {0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},\n            {0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}\n        });\n        RealMatrix root2 = new RectangularCholeskyDecomposition(m2, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM2 = root2.multiply(root2.transpose());\n        Assert.assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16);                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n        final RealMatrix m3 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559},\n            {0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709},\n            {0.0, 0.0, 0.0, 0.0, 0.0},\n            {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},\n            {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}\n        });\n        RealMatrix root3 = new RectangularCholeskyDecomposition(m3, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM3 = root3.multiply(root3.transpose());\n        try{ Assert.assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "2": "    @Test\n    public void testMath789$catena_2() {\n\n        final RealMatrix m1 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.013445532, 0.010394690, 0.009881156, 0.010499559},\n            {0.010394690, 0.023006616, 0.008196856, 0.010732709},\n            {0.009881156, 0.008196856, 0.019023866, 0.009210099},\n            {0.010499559, 0.010732709, 0.009210099, 0.019107243}\n        });\n        RealMatrix root1 = new RectangularCholeskyDecomposition(m1, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM1 = root1.multiply(root1.transpose());\n        try{ Assert.assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final RealMatrix m2 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.0, 0.0, 0.0, 0.0, 0.0},\n            {0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559},\n            {0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709},\n            {0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},\n            {0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}\n        });\n        RealMatrix root2 = new RectangularCholeskyDecomposition(m2, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM2 = root2.multiply(root2.transpose());\n        try{ Assert.assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16);                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        final RealMatrix m3 = MatrixUtils.createRealMatrix(new double[][]{\n            {0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559},\n            {0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709},\n            {0.0, 0.0, 0.0, 0.0, 0.0},\n            {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},\n            {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}\n        });\n        RealMatrix root3 = new RectangularCholeskyDecomposition(m3, 1.0e-10).getRootMatrix();\n        RealMatrix rebuiltM3 = root3.multiply(root3.transpose());\n        Assert.assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);                                /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            }
        },
        "org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank": {
            "file_path": "src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java",
            "Instance": "Begin: Pos(50, 5)\nEnd: Pos(73, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Math_21/src/test/java//org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java\nName: testFullRank\nChilds: [StatementAssertion<Begin: Pos(67, 9), End: Pos(67, 74)>,\nStatementAssertion<Begin: Pos(71, 9), End: Pos(71, 63)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Math_21/src/test/java//org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java",
            "name": "testFullRank",
            "begin": "Pos(50, 5)",
            "end": "Pos(73, 5)",
            "begin_line_no": 50,
            "end_line_no": 73,
            "child": [
                "Begin: Pos(67, 9)\nEnd: Pos(67, 74)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(71, 9)\nEnd: Pos(71, 63)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void testFullRank$catena_0() {\n\n        RealMatrix base = MatrixUtils.createRealMatrix(new double[][] {\n            { 0.1159548705,      0.,           0.,           0.      },\n            { 0.0896442724, 0.1223540781,      0.,           0.      },\n            { 0.0852155322, 4.558668e-3,  0.1083577299,      0.      },\n            { 0.0905486674, 0.0213768077, 0.0128878333, 0.1014155693 }\n        });\n\n        RealMatrix m = base.multiply(base.transpose());\n\n        RectangularCholeskyDecomposition d =\n                new RectangularCholeskyDecomposition(m, 1.0e-10);\n\n        RealMatrix root = d.getRootMatrix();\n        RealMatrix rebuiltM = root.multiply(root.transpose());\n        Assert.assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15);                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // the pivoted Cholesky decomposition is *not* unique. Here, the root is\n        // not equal to the original trianbular base matrix\n        try{ Assert.assertTrue(root.subtract(base).getNorm() > 0.3);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "    @Test\n    public void testFullRank$catena_1() {\n\n        RealMatrix base = MatrixUtils.createRealMatrix(new double[][] {\n            { 0.1159548705,      0.,           0.,           0.      },\n            { 0.0896442724, 0.1223540781,      0.,           0.      },\n            { 0.0852155322, 4.558668e-3,  0.1083577299,      0.      },\n            { 0.0905486674, 0.0213768077, 0.0128878333, 0.1014155693 }\n        });\n\n        RealMatrix m = base.multiply(base.transpose());\n\n        RectangularCholeskyDecomposition d =\n                new RectangularCholeskyDecomposition(m, 1.0e-10);\n\n        RealMatrix root = d.getRootMatrix();\n        RealMatrix rebuiltM = root.multiply(root.transpose());\n        try{ Assert.assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // the pivoted Cholesky decomposition is *not* unique. Here, the root is\n        // not equal to the original trianbular base matrix\n        Assert.assertTrue(root.subtract(base).getNorm() > 0.3);                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void testFullRank$catena_0() {\n\n        RealMatrix base = MatrixUtils.createRealMatrix(new double[][] {\n            { 0.1159548705,      0.,           0.,           0.      },\n            { 0.0896442724, 0.1223540781,      0.,           0.      },\n            { 0.0852155322, 4.558668e-3,  0.1083577299,      0.      },\n            { 0.0905486674, 0.0213768077, 0.0128878333, 0.1014155693 }\n        });\n\n        RealMatrix m = base.multiply(base.transpose());\n\n        RectangularCholeskyDecomposition d =\n                new RectangularCholeskyDecomposition(m, 1.0e-10);\n\n        RealMatrix root = d.getRootMatrix();\n        RealMatrix rebuiltM = root.multiply(root.transpose());\n        Assert.assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15);                                  /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // the pivoted Cholesky decomposition is *not* unique. Here, the root is\n        // not equal to the original trianbular base matrix\n        try{ Assert.assertTrue(root.subtract(base).getNorm() > 0.3);                                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n    }",
                "1": "    @Test\n    public void testFullRank$catena_1() {\n\n        RealMatrix base = MatrixUtils.createRealMatrix(new double[][] {\n            { 0.1159548705,      0.,           0.,           0.      },\n            { 0.0896442724, 0.1223540781,      0.,           0.      },\n            { 0.0852155322, 4.558668e-3,  0.1083577299,      0.      },\n            { 0.0905486674, 0.0213768077, 0.0128878333, 0.1014155693 }\n        });\n\n        RealMatrix m = base.multiply(base.transpose());\n\n        RectangularCholeskyDecomposition d =\n                new RectangularCholeskyDecomposition(m, 1.0e-10);\n\n        RealMatrix root = d.getRootMatrix();\n        RealMatrix rebuiltM = root.multiply(root.transpose());\n        try{ Assert.assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15);                             }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // the pivoted Cholesky decomposition is *not* unique. Here, the root is\n        // not equal to the original trianbular base matrix\n        Assert.assertTrue(root.subtract(base).getNorm() > 0.3);                                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n    }"
            }
        }
    },
    "011100": {
        "failing_tests": [
            "org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank$catena_1",
            "org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_2"
        ]
    }
}