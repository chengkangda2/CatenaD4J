---
Begin generate bug_id: Math_21
num_of_hunks: 6
timeout for running: 3600
use working dir: ./working/data/Math_21
Try to checkout Math_21
build dir: ['./working/data/Math_21/target/classes', './working/data/Math_21/target/test-classes']
init FileManager
trace file: src/main/java/org/apache/commons/math3/linear/RectangularCholeskyDecomposition.java
trying to replace old failing tests
edit: replace from 75 range 36 at src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java
to
    @Test
    public void testMath789$catena_0() {

        final RealMatrix m1 = MatrixUtils.createRealMatrix(new double[][]{
            {0.013445532, 0.010394690, 0.009881156, 0.010499559},
            {0.010394690, 0.023006616, 0.008196856, 0.010732709},
            {0.009881156, 0.008196856, 0.019023866, 0.009210099},
            {0.010499559, 0.010732709, 0.009210099, 0.019107243}
        });
        RealMatrix root1 = new RectangularCholeskyDecomposition(m1, 1.0e-10).getRootMatrix();
        RealMatrix rebuiltM1 = root1.multiply(root1.transpose());
        Assert.assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16);                                /***** ORIGINAL ASSERTION IS HERE *****/

        final RealMatrix m2 = MatrixUtils.createRealMatrix(new double[][]{
            {0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559},
            {0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709},
            {0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},
            {0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}
        });
        RealMatrix root2 = new RectangularCholeskyDecomposition(m2, 1.0e-10).getRootMatrix();
        RealMatrix rebuiltM2 = root2.multiply(root2.transpose());
        try{ Assert.assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16);                           }catch(Throwable __SHOULD_BE_IGNORED){}

        final RealMatrix m3 = MatrixUtils.createRealMatrix(new double[][]{
            {0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559},
            {0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709},
            {0.0, 0.0, 0.0, 0.0, 0.0},
            {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},
            {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}
        });
        RealMatrix root3 = new RectangularCholeskyDecomposition(m3, 1.0e-10).getRootMatrix();
        RealMatrix rebuiltM3 = root3.multiply(root3.transpose());
        try{ Assert.assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);                           }catch(Throwable __SHOULD_BE_IGNORED){}

    }     @Test
    public void testMath789$catena_1() {

        final RealMatrix m1 = MatrixUtils.createRealMatrix(new double[][]{
            {0.013445532, 0.010394690, 0.009881156, 0.010499559},
            {0.010394690, 0.023006616, 0.008196856, 0.010732709},
            {0.009881156, 0.008196856, 0.019023866, 0.009210099},
            {0.010499559, 0.010732709, 0.009210099, 0.019107243}
        });
        RealMatrix root1 = new RectangularCholeskyDecomposition(m1, 1.0e-10).getRootMatrix();
        RealMatrix rebuiltM1 = root1.multiply(root1.transpose());
        try{ Assert.assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16);                           }catch(Throwable __SHOULD_BE_IGNORED){}

        final RealMatrix m2 = MatrixUtils.createRealMatrix(new double[][]{
            {0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559},
            {0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709},
            {0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},
            {0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}
        });
        RealMatrix root2 = new RectangularCholeskyDecomposition(m2, 1.0e-10).getRootMatrix();
        RealMatrix rebuiltM2 = root2.multiply(root2.transpose());
        Assert.assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16);                                /***** ORIGINAL ASSERTION IS HERE *****/

        final RealMatrix m3 = MatrixUtils.createRealMatrix(new double[][]{
            {0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559},
            {0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709},
            {0.0, 0.0, 0.0, 0.0, 0.0},
            {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},
            {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}
        });
        RealMatrix root3 = new RectangularCholeskyDecomposition(m3, 1.0e-10).getRootMatrix();
        RealMatrix rebuiltM3 = root3.multiply(root3.transpose());
        try{ Assert.assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);                           }catch(Throwable __SHOULD_BE_IGNORED){}

    }     @Test
    public void testMath789$catena_2() {

        final RealMatrix m1 = MatrixUtils.createRealMatrix(new double[][]{
            {0.013445532, 0.010394690, 0.009881156, 0.010499559},
            {0.010394690, 0.023006616, 0.008196856, 0.010732709},
            {0.009881156, 0.008196856, 0.019023866, 0.009210099},
            {0.010499559, 0.010732709, 0.009210099, 0.019107243}
        });
        RealMatrix root1 = new RectangularCholeskyDecomposition(m1, 1.0e-10).getRootMatrix();
        RealMatrix rebuiltM1 = root1.multiply(root1.transpose());
        try{ Assert.assertEquals(0.0, m1.subtract(rebuiltM1).getNorm(), 1.0e-16);                           }catch(Throwable __SHOULD_BE_IGNORED){}

        final RealMatrix m2 = MatrixUtils.createRealMatrix(new double[][]{
            {0.0, 0.0, 0.0, 0.0, 0.0},
            {0.0, 0.013445532, 0.010394690, 0.009881156, 0.010499559},
            {0.0, 0.010394690, 0.023006616, 0.008196856, 0.010732709},
            {0.0, 0.009881156, 0.008196856, 0.019023866, 0.009210099},
            {0.0, 0.010499559, 0.010732709, 0.009210099, 0.019107243}
        });
        RealMatrix root2 = new RectangularCholeskyDecomposition(m2, 1.0e-10).getRootMatrix();
        RealMatrix rebuiltM2 = root2.multiply(root2.transpose());
        try{ Assert.assertEquals(0.0, m2.subtract(rebuiltM2).getNorm(), 1.0e-16);                           }catch(Throwable __SHOULD_BE_IGNORED){}

        final RealMatrix m3 = MatrixUtils.createRealMatrix(new double[][]{
            {0.013445532, 0.010394690, 0.0, 0.009881156, 0.010499559},
            {0.010394690, 0.023006616, 0.0, 0.008196856, 0.010732709},
            {0.0, 0.0, 0.0, 0.0, 0.0},
            {0.009881156, 0.008196856, 0.0, 0.019023866, 0.009210099},
            {0.010499559, 0.010732709, 0.0, 0.009210099, 0.019107243}
        });
        RealMatrix root3 = new RectangularCholeskyDecomposition(m3, 1.0e-10).getRootMatrix();
        RealMatrix rebuiltM3 = root3.multiply(root3.transpose());
        Assert.assertEquals(0.0, m3.subtract(rebuiltM3).getNorm(), 1.0e-16);                                /***** ORIGINAL ASSERTION IS HERE *****/

    }
edit: replace from 50 range 24 at src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java
to
    @Test
    public void testFullRank$catena_0() {

        RealMatrix base = MatrixUtils.createRealMatrix(new double[][] {
            { 0.1159548705,      0.,           0.,           0.      },
            { 0.0896442724, 0.1223540781,      0.,           0.      },
            { 0.0852155322, 4.558668e-3,  0.1083577299,      0.      },
            { 0.0905486674, 0.0213768077, 0.0128878333, 0.1014155693 }
        });

        RealMatrix m = base.multiply(base.transpose());

        RectangularCholeskyDecomposition d =
                new RectangularCholeskyDecomposition(m, 1.0e-10);

        RealMatrix root = d.getRootMatrix();
        RealMatrix rebuiltM = root.multiply(root.transpose());
        Assert.assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15);                                  /***** ORIGINAL ASSERTION IS HERE *****/

        // the pivoted Cholesky decomposition is *not* unique. Here, the root is
        // not equal to the original trianbular base matrix
        try{ Assert.assertTrue(root.subtract(base).getNorm() > 0.3);                                        }catch(Throwable __SHOULD_BE_IGNORED){}

    }     @Test
    public void testFullRank$catena_1() {

        RealMatrix base = MatrixUtils.createRealMatrix(new double[][] {
            { 0.1159548705,      0.,           0.,           0.      },
            { 0.0896442724, 0.1223540781,      0.,           0.      },
            { 0.0852155322, 4.558668e-3,  0.1083577299,      0.      },
            { 0.0905486674, 0.0213768077, 0.0128878333, 0.1014155693 }
        });

        RealMatrix m = base.multiply(base.transpose());

        RectangularCholeskyDecomposition d =
                new RectangularCholeskyDecomposition(m, 1.0e-10);

        RealMatrix root = d.getRootMatrix();
        RealMatrix rebuiltM = root.multiply(root.transpose());
        try{ Assert.assertEquals(0.0, m.subtract(rebuiltM).getNorm(), 1.0e-15);                             }catch(Throwable __SHOULD_BE_IGNORED){}

        // the pivoted Cholesky decomposition is *not* unique. Here, the root is
        // not equal to the original trianbular base matrix
        Assert.assertTrue(root.subtract(base).getNorm() > 0.3);                                             /***** ORIGINAL ASSERTION IS HERE *****/

    }
trace file: src/test/java/org/apache/commons/math3/linear/RectangularCholeskyDecompositionTest.java
new test num: 5
ori test num: 0
pattern: 000000
patches are written to file
running tests...
used time: Finished in 147.81 seconds
Failing tests: 2
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_2
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank$catena_1
processed: 000000
pattern: 000001
try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000001
pattern: 000010
try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

patches are written to file
running tests...
used time: Finished in 132.75 seconds
Failing tests: 2
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_2
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank$catena_1
No new failing tests but only 1 hunk
processed: 000010
pattern: 000100
try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000100
pattern: 001000
try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001000
pattern: 010000
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

patches are written to file
running tests...
used time: Finished in 126.09 seconds
Failing tests: 6
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_0
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_1
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_2
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank$catena_0
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank$catena_1
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testDecomposition3x3
Includes new failing tests, set to unusable
processed: 010000
pattern: 100000
try to fix hunk: 0
delete from 69 with range 1
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100000
pattern: 000011
try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
used time: Finished in 123.57 seconds
Failing tests: 2
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_2
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank$catena_1
Can independently fix []
Could not fix independently
processed: 000011
pattern: 000101
try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000101
pattern: 000110
try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000110
pattern: 001001
try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001001
pattern: 001010
try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001010
pattern: 001100
try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001100
pattern: 010001
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010001
pattern: 010010
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

patches are written to file
running tests...
used time: Finished in 150.02 seconds
Failing tests: 6
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_0
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_1
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_2
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank$catena_0
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank$catena_1
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testDecomposition3x3
Includes new failing tests, set to unusable
processed: 010010
pattern: 010100
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

patches are written to file
running tests...
used time: Finished in 127.70 seconds
Failing tests: 5
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_0
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_1
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_2
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank$catena_1
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testDecomposition3x3
Includes new failing tests, set to unusable
processed: 010100
pattern: 011000
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

patches are written to file
running tests...
used time: Finished in 139.51 seconds
Failing tests: 6
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_0
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_1
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_2
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank$catena_0
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank$catena_1
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testDecomposition3x3
Includes new failing tests, set to unusable
processed: 011000
pattern: 100001
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100001
pattern: 100010
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100010
pattern: 100100
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100100
pattern: 101000
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101000
pattern: 110000
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110000
pattern: 000111
try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000111
pattern: 001011
try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001011
pattern: 001101
try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001101
pattern: 001110
try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001110
pattern: 010011
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
used time: Finished in 107.94 seconds
Failing tests: 6
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_0
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_1
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_2
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank$catena_0
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank$catena_1
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testDecomposition3x3
Includes new failing tests, set to unusable
processed: 010011
pattern: 010101
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010101
pattern: 010110
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

patches are written to file
running tests...
used time: Finished in 117.95 seconds
Failing tests: 5
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_0
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_1
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_2
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank$catena_1
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testDecomposition3x3
Includes new failing tests, set to unusable
processed: 010110
pattern: 011001
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011001
pattern: 011010
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

patches are written to file
running tests...
used time: Finished in 114.56 seconds
Failing tests: 6
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_0
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_1
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_2
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank$catena_0
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank$catena_1
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testDecomposition3x3
Includes new failing tests, set to unusable
processed: 011010
pattern: 011100
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

patches are written to file
running tests...
used time: Finished in 113.49 seconds
Failing tests: 0
Can independently fix ['org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank$catena_1', 'org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_2']
select new bug
Pattern: 011100
new failing tests:
org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank$catena_1
org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_2
Save found bug
processed: 011100
pattern: 100011
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100011
pattern: 100101
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100101
pattern: 100110
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100110
pattern: 101001
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101001
pattern: 101010
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101010
pattern: 101100
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101100
pattern: 110001
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110001
pattern: 110010
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110010
pattern: 110100
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110100
pattern: 111000
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111000
pattern: 001111
try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001111
pattern: 010111
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
used time: Finished in 108.97 seconds
Failing tests: 5
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_0
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_1
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_2
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank$catena_1
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testDecomposition3x3
Includes new failing tests, set to unusable
processed: 010111
pattern: 011011
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
used time: Finished in 119.01 seconds
Failing tests: 6
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_0
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_1
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testMath789$catena_2
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank$catena_0
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testFullRank$catena_1
	org.apache.commons.math3.linear.RectangularCholeskyDecompositionTest::testDecomposition3x3
Includes new failing tests, set to unusable
processed: 011011
pattern: 011101
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011101
pattern: 011110
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

patches are written to file
running tests...
used time: Finished in 125.07 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 011110
pattern: 100111
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100111
pattern: 101011
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101011
pattern: 101101
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101101
pattern: 101110
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101110
pattern: 110011
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110011
pattern: 110101
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110101
pattern: 110110
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110110
pattern: 111001
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111001
pattern: 111010
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111010
pattern: 111100
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

patches are written to file
running tests...
used time: Finished in 132.84 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 111100
pattern: 011111
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
used time: Finished in 122.80 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 011111
pattern: 101111
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101111
pattern: 110111
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110111
pattern: 111011
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111011
pattern: 111101
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111101
pattern: 111110
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

patches are written to file
running tests...
used time: Finished in 130.58 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 111110
pattern: 111111
try to fix hunk: 0
delete from 69 with range 1
try to fix hunk: 1
replace from 79 with range 1 to
            int swapR = r;

try to fix hunk: 2
replace from 82 with range 3 to
                int isr = index[swapR];
                if (c[ii][ii] > c[isr][isr]) {
                    swapR = i;

try to fix hunk: 3
replace from 90 with range 4 to
            if (swapR != r) {
                final int tmpIndex    = index[r];
                index[r]              = index[swapR];
                index[swapR]          = tmpIndex;
                final double[] tmpRow = b[r];
                b[r]                  = b[swapR];
                b[swapR]              = tmpRow;

try to fix hunk: 4
insert before 124 with                 final double inverse2 = 1 / c[ir][ir];

try to fix hunk: 5
replace from 128 with range 1 to
                    c[ii][ii] -= c[ii][ir] * c[ii][ir] * inverse2;

patches are written to file
running tests...
used time: Finished in 123.15 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 111111
Find 1 new bugs
