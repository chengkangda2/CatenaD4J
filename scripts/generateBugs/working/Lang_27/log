---
Begin generate bug_id: Lang_27
num_of_hunks: 2
use working dir: ./working/data/Lang_27
Try to checkout Lang_27
build dir: ['./working/data/Lang_27/target/classes', './working/data/Lang_27/target/test-classes']
init FileManager
trace file: src/main/java/org/apache/commons/lang3/math/NumberUtils.java
trace file: src/main/java/org/apache/commons/lang3/math/NumberUtils.java
trying to replace old failing tests
edit: replace from 176 range 42 at src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
to
    public void testCreateNumber$catena_0() {
        // a lot of things can go wrong
        assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));               /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-638
        try{ assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_1() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));               /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-638
        try{ assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_2() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-638
        try{ assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_3() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-638
        try{ assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_4() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-638
        try{ assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_5() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-638
        try{ assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_6() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-638
        try{ assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_7() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-638
        try{ assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_8() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));                   /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-638
        try{ assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_9() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-638
        try{ assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_10() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-638
        try{ assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_11() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());                 /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-638
        try{ assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_12() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-638
        try{ assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_13() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));           /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-638
        try{ assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_14() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));              /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-638
        try{ assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_15() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-638
        try{ assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_16() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-638
        try{ assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_17() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                      /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-638
        try{ assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_18() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      /***** ORIGINAL ASSERTION IS HERE *****/

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-638
        try{ assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_19() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              /***** ORIGINAL ASSERTION IS HERE *****/
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-638
        try{ assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_20() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-638
        try{ assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_21() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-638
        try{ assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_22() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        /***** ORIGINAL ASSERTION IS HERE *****/

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-638
        try{ assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_23() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));                /***** ORIGINAL ASSERTION IS HERE *****/

        // LANG-638
        try{ assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testCreateNumber$catena_24() {
        // a lot of things can go wrong
        try{ assertEquals("createNumber(String) 1 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 2 failed", new Integer("12345"), NumberUtils.createNumber("12345"));          }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5D"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 3 failed", new Double("1234.5"), NumberUtils.createNumber("1234.5d"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5F"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 4 failed", new Float("1234.5"), NumberUtils.createNumber("1234.5f"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 5 failed", new Long(Integer.MAX_VALUE + 1L), NumberUtils.createNumber(""
            + (Integer.MAX_VALUE + 1L)));                                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345L"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 6 failed", new Long(12345), NumberUtils.createNumber("12345l"));              }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 7 failed", new Float("-1234.5"), NumberUtils.createNumber("-1234.5"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 8 failed", new Integer("-12345"), NumberUtils.createNumber("-12345"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 9 failed", 0xFADE == NumberUtils.createNumber("0xFADE").intValue());            }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertTrue("createNumber(String) 10 failed", -0xFADE == NumberUtils.createNumber("-0xFADE").intValue());         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 11 failed", new Double("1.1E200"), NumberUtils.createNumber("1.1E200"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 12 failed", new Float("1.1E20"), NumberUtils.createNumber("1.1E20"));         }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 13 failed", new Double("-1.1E200"), NumberUtils.createNumber("-1.1E200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 14 failed", new Double("1.1E-200"), NumberUtils.createNumber("1.1E-200"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(null) failed", null, NumberUtils.createNumber(null));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) failed", new BigInteger("12345678901234567890"), NumberUtils
                .createNumber("12345678901234567890L"));                                                                      }catch(Throwable __SHOULD_BE_IGNORED){}

        // jdk 1.2 doesn't support this. unsure about jdk 1.2.2
        if (SystemUtils.isJavaVersionAtLeast(1.3f)) {
            try{ assertEquals("createNumber(String) 15 failed", new BigDecimal("1.1E-700"), NumberUtils
                    .createNumber("1.1E-700F"));                                                                              }catch(Throwable __SHOULD_BE_IGNORED){}
        }
        try{ assertEquals("createNumber(String) 16 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE + "L"));                                                               }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 17 failed", new Long("10" + Integer.MAX_VALUE), NumberUtils
                .createNumber("10" + Integer.MAX_VALUE));                                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("createNumber(String) 18 failed", new BigInteger("10" + Long.MAX_VALUE), NumberUtils
                .createNumber("10" + Long.MAX_VALUE));                                                                        }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-521
        try{ assertEquals("createNumber(String) LANG-521 failed", new Float("2."), NumberUtils.createNumber("2."));           }catch(Throwable __SHOULD_BE_IGNORED){}

        // LANG-638
        assertFalse("createNumber(String) succeeded", checkCreateNumber("1eE"));                                              /***** ORIGINAL ASSERTION IS HERE *****/
    }
trace file: src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java
new test num: 25
ori test num: 0
pattern: 00
patches are written to file
running tests...
used time: Finished in 30.54 seconds
Failing tests: 1
	org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber$catena_24
pattern: 01
try to fix hunk: 1
insert before 489 with                 if (expPos > str.length()) {
                    throw new NumberFormatException(str + " is not a valid number.");
                }

patches are written to file
running tests...
used time: Finished in 20.58 seconds
Failing tests: 0
No new failing tests but only 1 hunk
pattern: 10
try to fix hunk: 0
replace from 479 with range 1 to
                if (expPos < decPos || expPos > str.length()) {

patches are written to file
running tests...
used time: Finished in 20.56 seconds
Failing tests: 1
	org.apache.commons.lang3.math.NumberUtilsTest::testCreateNumber$catena_24
No new failing tests but only 1 hunk
pattern: 11
try to fix hunk: 0
replace from 479 with range 1 to
                if (expPos < decPos || expPos > str.length()) {

try to fix hunk: 1
insert before 489 with                 if (expPos > str.length()) {
                    throw new NumberFormatException(str + " is not a valid number.");
                }

patches are written to file
running tests...
used time: Finished in 21.95 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
Find 0 new bugs
