{
    "original": {
        "num_of_hunks": 3,
        "0": {
            "file_name": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
            "replaced_with": "            char firstSigDigit = 0; // strip leading zeroes\n            for(int i = pfxLen; i < str.length(); i++) {\n                firstSigDigit = str.charAt(i);\n                if (firstSigDigit == '0') { // count leading zeroes\n                    pfxLen++;\n                } else {\n                    break;\n                }\n            }\n",
            "patch_type": "insert",
            "next_line_no": 467
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
            "from_line_no": 468,
            "to_line_no": 468,
            "replaced_with": "            if (hexDigits > 16 || (hexDigits == 16 && firstSigDigit > '7')) { // too many for Long\n",
            "replaced": "            if (hexDigits > 16) { // too many for Long\n",
            "patch_type": "replace",
            "next_line_no": 469
        },
        "2": {
            "file_name": "src/main/java/org/apache/commons/lang3/math/NumberUtils.java",
            "from_line_no": 471,
            "to_line_no": 471,
            "replaced_with": "            if (hexDigits > 8 || (hexDigits == 8 && firstSigDigit > '7')) { // too many for an int\n",
            "replaced": "            if (hexDigits > 8) { // too many for an int\n",
            "patch_type": "replace",
            "next_line_no": 472
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.lang3.math.NumberUtilsTest::TestLang747"
        ],
        "org.apache.commons.lang3.math.NumberUtilsTest::TestLang747": {
            "file_path": "src/test/java/org/apache/commons/lang3/math/NumberUtilsTest.java",
            "Instance": "Begin: Pos(249, 5)\nEnd: Pos(284, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_1/src/test/java//org/apache/commons/lang3/math/NumberUtilsTest.java\nName: TestLang747\nChilds: [StatementAssertion<Begin: Pos(251, 9), End: Pos(251, 87)>,\nStatementAssertion<Begin: Pos(252, 9), End: Pos(252, 88)>,\nStatementAssertion<Begin: Pos(253, 9), End: Pos(253, 89)>,\nStatementAssertion<Begin: Pos(254, 9), End: Pos(254, 90)>,\nStatementAssertion<Begin: Pos(255, 9), End: Pos(255, 91)>,\nStatementAssertion<Begin: Pos(256, 9), End: Pos(256, 91)>,\nStatementAssertion<Begin: Pos(257, 9), End: Pos(257, 91)>,\nStatementAssertion<Begin: Pos(260, 9), End: Pos(260, 91)>,\nStatementAssertion<Begin: Pos(261, 9), End: Pos(261, 93)>,\nStatementAssertion<Begin: Pos(262, 9), End: Pos(262, 92)>,\nStatementAssertion<Begin: Pos(263, 9), End: Pos(263, 93)>,\nStatementAssertion<Begin: Pos(265, 9), End: Pos(265, 97)>,\nStatementAssertion<Begin: Pos(266, 9), End: Pos(266, 98)>,\nStatementAssertion<Begin: Pos(267, 9), End: Pos(267, 99)>,\nStatementAssertion<Begin: Pos(268, 9), End: Pos(268, 100)>,\nStatementAssertion<Begin: Pos(269, 9), End: Pos(269, 101)>,\nStatementAssertion<Begin: Pos(270, 9), End: Pos(270, 102)>,\nStatementAssertion<Begin: Pos(271, 9), End: Pos(271, 103)>,\nStatementAssertion<Begin: Pos(272, 9), End: Pos(272, 104)>,\nStatementAssertion<Begin: Pos(274, 9), End: Pos(274, 109)>,\nStatementAssertion<Begin: Pos(275, 9), End: Pos(275, 109)>,\nStatementAssertion<Begin: Pos(278, 9), End: Pos(278, 105)>,\nStatementAssertion<Begin: Pos(279, 9), End: Pos(279, 104)>,\nStatementAssertion<Begin: Pos(280, 9), End: Pos(280, 105)>,\nStatementAssertion<Begin: Pos(282, 9), End: Pos(282, 113)>,\nStatementAssertion<Begin: Pos(283, 9), End: Pos(283, 110)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_1/src/test/java//org/apache/commons/lang3/math/NumberUtilsTest.java",
            "name": "TestLang747",
            "begin": "Pos(249, 5)",
            "end": "Pos(284, 5)",
            "begin_line_no": 249,
            "end_line_no": 284,
            "child": [
                "Begin: Pos(251, 9)\nEnd: Pos(251, 87)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(252, 9)\nEnd: Pos(252, 88)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(253, 9)\nEnd: Pos(253, 89)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(254, 9)\nEnd: Pos(254, 90)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(255, 9)\nEnd: Pos(255, 91)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(256, 9)\nEnd: Pos(256, 91)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(257, 9)\nEnd: Pos(257, 91)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(260, 9)\nEnd: Pos(260, 91)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(261, 9)\nEnd: Pos(261, 93)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(262, 9)\nEnd: Pos(262, 92)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(263, 9)\nEnd: Pos(263, 93)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(265, 9)\nEnd: Pos(265, 97)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(266, 9)\nEnd: Pos(266, 98)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(267, 9)\nEnd: Pos(267, 99)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(268, 9)\nEnd: Pos(268, 100)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(269, 9)\nEnd: Pos(269, 101)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(270, 9)\nEnd: Pos(270, 102)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(271, 9)\nEnd: Pos(271, 103)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(272, 9)\nEnd: Pos(272, 104)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(274, 9)\nEnd: Pos(274, 109)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(275, 9)\nEnd: Pos(275, 109)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(278, 9)\nEnd: Pos(278, 105)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(279, 9)\nEnd: Pos(279, 104)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(280, 9)\nEnd: Pos(280, 105)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(282, 9)\nEnd: Pos(282, 113)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(283, 9)\nEnd: Pos(283, 110)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    @Test\n    public void TestLang747$catena_0() {\n        assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_1() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_2() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_3() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_4() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_5() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_6() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_7() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_8() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_9() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_10() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_11() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_12() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_13() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_14() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_15() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_16() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_17() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_18() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));                  /***** ORIGINAL ASSERTION IS HERE *****/\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_19() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_20() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_21() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_22() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_23() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));                 /***** ORIGINAL ASSERTION IS HERE *****/\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_24() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    @Test\n    public void TestLang747$catena_25() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));            /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    @Test\n    public void TestLang747$catena_0() {\n        assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    @Test\n    public void TestLang747$catena_1() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    @Test\n    public void TestLang747$catena_2() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    @Test\n    public void TestLang747$catena_3() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                                /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "4": "    @Test\n    public void TestLang747$catena_4() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "5": "    @Test\n    public void TestLang747$catena_5() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "6": "    @Test\n    public void TestLang747$catena_6() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                               /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "7": "    @Test\n    public void TestLang747$catena_7() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                               /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "8": "    @Test\n    public void TestLang747$catena_8() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "9": "    @Test\n    public void TestLang747$catena_9() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                              /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "10": "    @Test\n    public void TestLang747$catena_10() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "11": "    @Test\n    public void TestLang747$catena_11() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "12": "    @Test\n    public void TestLang747$catena_12() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                        /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "13": "    @Test\n    public void TestLang747$catena_13() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                       /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "14": "    @Test\n    public void TestLang747$catena_14() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                      /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "15": "    @Test\n    public void TestLang747$catena_15() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                     /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "16": "    @Test\n    public void TestLang747$catena_16() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));                    /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "17": "    @Test\n    public void TestLang747$catena_17() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));                   /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "18": "    @Test\n    public void TestLang747$catena_18() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));                  /***** ORIGINAL ASSERTION IS HERE *****/\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "19": "    @Test\n    public void TestLang747$catena_19() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "20": "    @Test\n    public void TestLang747$catena_20() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));             /***** ORIGINAL ASSERTION IS HERE *****/\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "21": "    @Test\n    public void TestLang747$catena_21() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));                 /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "22": "    @Test\n    public void TestLang747$catena_22() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));                  /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "23": "    @Test\n    public void TestLang747$catena_23() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));                 /***** ORIGINAL ASSERTION IS HERE *****/\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "24": "    @Test\n    public void TestLang747$catena_24() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));       }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "25": "    @Test\n    public void TestLang747$catena_25() {\n        try{ assertEquals(Integer.valueOf(0x8000),      NumberUtils.createNumber(\"0x8000\"));                              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x80000),     NumberUtils.createNumber(\"0x80000\"));                             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x800000),    NumberUtils.createNumber(\"0x800000\"));                            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x8000000\"));                           }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x7FFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x80000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0xFFFFFFFF\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Integer.valueOf(0x8000000),   NumberUtils.createNumber(\"0x08000000\"));                          }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Integer.valueOf(0x7FFFFFFF),  NumberUtils.createNumber(\"0x007FFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000L),    NumberUtils.createNumber(\"0x080000000\"));                         }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0xFFFFFFFFL),    NumberUtils.createNumber(\"0x00FFFFFFFF\"));                        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        try{ assertEquals(Long.valueOf(0x800000000L),        NumberUtils.createNumber(\"0x800000000\"));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000L),       NumberUtils.createNumber(\"0x8000000000\"));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000L),      NumberUtils.createNumber(\"0x80000000000\"));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000L),     NumberUtils.createNumber(\"0x800000000000\"));                 }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x8000000000000L),    NumberUtils.createNumber(\"0x8000000000000\"));                }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x80000000000000\"));               }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x800000000000000\"));              }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x7FFFFFFFFFFFFFFF\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x8000000000000000\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0xFFFFFFFFFFFFFFFF\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n\n        // Leading zero tests\n        try{ assertEquals(Long.valueOf(0x80000000000000L),   NumberUtils.createNumber(\"0x00080000000000000\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x800000000000000L),  NumberUtils.createNumber(\"0x0800000000000000\"));             }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(Long.valueOf(0x7FFFFFFFFFFFFFFFL), NumberUtils.createNumber(\"0x07FFFFFFFFFFFFFFF\"));            }catch(Throwable __SHOULD_BE_IGNORED){}\n        // N.B. Cannot use a hex constant such as 0x8000000000000000L here as that is interpreted as a negative long\n        try{ assertEquals(new BigInteger(\"8000000000000000\", 16), NumberUtils.createNumber(\"0x00008000000000000000\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(new BigInteger(\"FFFFFFFFFFFFFFFF\", 16), NumberUtils.createNumber(\"0x0FFFFFFFFFFFFFFFF\"));            /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "111": {
        "failing_tests": [
            "org.apache.commons.lang3.math.NumberUtilsTest::TestLang747$catena_23",
            "org.apache.commons.lang3.math.NumberUtilsTest::TestLang747$catena_21",
            "org.apache.commons.lang3.math.NumberUtilsTest::TestLang747$catena_6",
            "org.apache.commons.lang3.math.NumberUtilsTest::TestLang747$catena_19",
            "org.apache.commons.lang3.math.NumberUtilsTest::TestLang747$catena_5",
            "org.apache.commons.lang3.math.NumberUtilsTest::TestLang747$catena_8",
            "org.apache.commons.lang3.math.NumberUtilsTest::TestLang747$catena_20"
        ]
    }
}