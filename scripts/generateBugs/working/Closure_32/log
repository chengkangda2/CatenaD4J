---
Begin generate bug_id: Closure_32
num_of_hunks: 6
timeout for running: 3600
use working dir: ./working/data/Closure_32
Try to checkout Closure_32
build dir: ['./working/data/Closure_32/build/classes', './working/data/Closure_32/build/test']
init FileManager
trace file: src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
trying to replace old failing tests
edit: replace from 1660 range 16 at test/com/google/javascript/jscomp/IntegrationTest.java
to
  public void testIssue701$catena_0() {
    // Check ASCII art in license comments.
    String ascii = "/**\n" +
        " * @preserve\n" +
        "   This\n" +
        "     is\n" +
        "       ASCII    ART\n" +
        "*/";
    String result = "/*\n\n" +
        "   This\n" +
        "     is\n" +
        "       ASCII    ART\n" +
        "*/\n";
    testSame(createCompilerOptions(), ascii);                                                               /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertEquals(result, lastCompiler.toSource());                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testIssue701$catena_1() {
    // Check ASCII art in license comments.
    String ascii = "/**\n" +
        " * @preserve\n" +
        "   This\n" +
        "     is\n" +
        "       ASCII    ART\n" +
        "*/";
    String result = "/*\n\n" +
        "   This\n" +
        "     is\n" +
        "       ASCII    ART\n" +
        "*/\n";
    try{ testSame(createCompilerOptions(), ascii);                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    assertEquals(result, lastCompiler.toSource());                                                          /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 1281 range 7 at test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
to
  public void testParseLicense$catena_0() throws Exception {
    Node node = new Node(1);
    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
    String comment = "@license Foo\nBar\n\nBaz*/";
    parse(comment);                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertEquals(" Foo\nBar\n\nBaz", node.getJSDocInfo().getLicense());                                }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testParseLicense$catena_1() throws Exception {
    Node node = new Node(1);
    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
    String comment = "@license Foo\nBar\n\nBaz*/";
    try{ parse(comment);                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    assertEquals(" Foo\nBar\n\nBaz", node.getJSDocInfo().getLicense());                                     /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 1273 range 7 at test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
to
  public void testParsePreserve$catena_0() throws Exception {
    Node node = new Node(1);
    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
    String comment = "@preserve Foo\nBar\n\nBaz*/";
    parse(comment);                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertEquals(" Foo\nBar\n\nBaz", node.getJSDocInfo().getLicense());                                }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testParsePreserve$catena_1() throws Exception {
    Node node = new Node(1);
    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
    String comment = "@preserve Foo\nBar\n\nBaz*/";
    try{ parse(comment);                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    assertEquals(" Foo\nBar\n\nBaz", node.getJSDocInfo().getLicense());                                     /***** ORIGINAL ASSERTION IS HERE *****/
  }
edit: replace from 1289 range 7 at test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
to
  public void testParseLicenseAscii$catena_0() throws Exception {
    Node node = new Node(1);
    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
    String comment = "@license Foo\n *   Bar\n\n  Baz*/";
    parse(comment);                                                                                         /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertEquals(" Foo\n   Bar\n\n  Baz", node.getJSDocInfo().getLicense());                           }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testParseLicenseAscii$catena_1() throws Exception {
    Node node = new Node(1);
    this.fileLevelJsDocBuilder = node.getJsDocBuilderForNode();
    String comment = "@license Foo\n *   Bar\n\n  Baz*/";
    try{ parse(comment);                                                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    assertEquals(" Foo\n   Bar\n\n  Baz", node.getJSDocInfo().getLicense());                                /***** ORIGINAL ASSERTION IS HERE *****/
  }
trace file: test/com/google/javascript/jscomp/IntegrationTest.java
trace file: test/com/google/javascript/jscomp/parsing/JsDocInfoParserTest.java
new test num: 8
ori test num: 0
pattern: 000000
patches are written to file
running tests...
used time: Finished in 232.69 seconds
Failing tests: 4
	com.google.javascript.jscomp.IntegrationTest::testIssue701$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParsePreserve$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicense$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseAscii$catena_1
processed: 000000
pattern: 000001
try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
used time: Finished in 219.85 seconds
Failing tests: 20
	com.google.javascript.jscomp.IntegrationTest::testIssue701$catena_1
	com.google.javascript.jscomp.JsMessageExtractorTest::testExtractNewStyleMessage2
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc10
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc12
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc5
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc6
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc7
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc8
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc9
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testFileOverviewMultiLine
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseAscii$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseWithAnnotation
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseMeaning2
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseMeaning3
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testRegression15
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testMultilineDocumentationParameter
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testDocumentationMultipleParameter2
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseWithMarkers3
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseWithMarkers5
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseWithMarkers6
Includes new failing tests, set to unusable
processed: 000001
pattern: 000010
try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000010
pattern: 000100
try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000100
pattern: 001000
try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001000
pattern: 010000
try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010000
pattern: 100000
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

patches are written to file
running tests...
used time: Finished in 214.25 seconds
Failing tests: 4
	com.google.javascript.jscomp.IntegrationTest::testIssue701$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParsePreserve$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicense$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseAscii$catena_1
No new failing tests but only 1 hunk
processed: 100000
pattern: 000011
try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000011
pattern: 000101
try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000101
pattern: 000110
try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000110
pattern: 001001
try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001001
pattern: 001010
try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001010
pattern: 001100
try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001100
pattern: 010001
try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010001
pattern: 010010
try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010010
pattern: 010100
try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010100
pattern: 011000
try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011000
pattern: 100001
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
used time: Finished in 217.79 seconds
Failing tests: 20
	com.google.javascript.jscomp.IntegrationTest::testIssue701$catena_1
	com.google.javascript.jscomp.JsMessageExtractorTest::testExtractNewStyleMessage2
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc10
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc12
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc5
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc6
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc7
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc8
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc9
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testFileOverviewMultiLine
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseAscii$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseWithAnnotation
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseMeaning2
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseMeaning3
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testRegression15
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testMultilineDocumentationParameter
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testDocumentationMultipleParameter2
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseWithMarkers3
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseWithMarkers5
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseWithMarkers6
Includes new failing tests, set to unusable
processed: 100001
pattern: 100010
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100010
pattern: 100100
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100100
pattern: 101000
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

patches are written to file
running tests...
used time: Finished in 219.61 seconds
Failing tests: 4
	com.google.javascript.jscomp.IntegrationTest::testIssue701$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParsePreserve$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicense$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseAscii$catena_1
Can independently fix []
Could not fix independently
processed: 101000
pattern: 110000
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

patches are written to file
running tests...
used time: Finished in 213.98 seconds
Failing tests: 4
	com.google.javascript.jscomp.IntegrationTest::testIssue701$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParsePreserve$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicense$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseAscii$catena_1
Can independently fix []
Could not fix independently
processed: 110000
pattern: 000111
try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 000111
pattern: 001011
try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001011
pattern: 001101
try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001101
pattern: 001110
try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001110
pattern: 010011
try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010011
pattern: 010101
try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010101
pattern: 010110
try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010110
pattern: 011001
try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011001
pattern: 011010
try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011010
pattern: 011100
try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011100
pattern: 100011
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100011
pattern: 100101
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 100101
pattern: 100110
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

patches are written to file
running tests...
used time: Finished in 210.35 seconds
Failing tests: 22
	com.google.javascript.jscomp.IntegrationTest::testIssue701$catena_1
	com.google.javascript.jscomp.JsMessageExtractorTest::testExtractNewStyleMessage2
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc10
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc12
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc5
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc6
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc7
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc8
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc9
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParsePreserve$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicense$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testFileOverviewMultiLine
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseAscii$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseWithAnnotation
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseMeaning2
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseMeaning3
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testRegression15
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testMultilineDocumentationParameter
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testDocumentationMultipleParameter2
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseWithMarkers3
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseWithMarkers5
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseWithMarkers6
Includes new failing tests, set to unusable
processed: 100110
pattern: 101001
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
used time: Finished in 205.54 seconds
Failing tests: 20
	com.google.javascript.jscomp.IntegrationTest::testIssue701$catena_1
	com.google.javascript.jscomp.JsMessageExtractorTest::testExtractNewStyleMessage2
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc10
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc12
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc5
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc6
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc7
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc8
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc9
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testFileOverviewMultiLine
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseAscii$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseWithAnnotation
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseMeaning2
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseMeaning3
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testRegression15
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testMultilineDocumentationParameter
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testDocumentationMultipleParameter2
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseWithMarkers3
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseWithMarkers5
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseWithMarkers6
Includes new failing tests, set to unusable
processed: 101001
pattern: 101010
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101010
pattern: 101100
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101100
pattern: 110001
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
used time: Finished in 215.36 seconds
Failing tests: 20
	com.google.javascript.jscomp.IntegrationTest::testIssue701$catena_1
	com.google.javascript.jscomp.JsMessageExtractorTest::testExtractNewStyleMessage2
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc10
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc12
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc5
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc6
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc7
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc8
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc9
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testFileOverviewMultiLine
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseAscii$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseWithAnnotation
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseMeaning2
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseMeaning3
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testRegression15
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testMultilineDocumentationParameter
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testDocumentationMultipleParameter2
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseWithMarkers3
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseWithMarkers5
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseWithMarkers6
Includes new failing tests, set to unusable
processed: 110001
pattern: 110010
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110010
pattern: 110100
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110100
pattern: 111000
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

patches are written to file
running tests...
used time: Finished in 220.66 seconds
Failing tests: 4
	com.google.javascript.jscomp.IntegrationTest::testIssue701$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParsePreserve$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicense$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseAscii$catena_1
Can independently fix []
Could not fix independently
processed: 111000
pattern: 001111
try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 001111
pattern: 010111
try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 010111
pattern: 011011
try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011011
pattern: 011101
try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011101
pattern: 011110
try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011110
pattern: 100111
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
used time: Finished in 227.02 seconds
Failing tests: 4
	com.google.javascript.jscomp.IntegrationTest::testIssue701$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParsePreserve$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicense$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseAscii$catena_1
Can independently fix []
Could not fix independently
processed: 100111
pattern: 101011
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101011
pattern: 101101
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 101101
pattern: 101110
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

patches are written to file
running tests...
used time: Finished in 227.86 seconds
Failing tests: 22
	com.google.javascript.jscomp.IntegrationTest::testIssue701$catena_1
	com.google.javascript.jscomp.JsMessageExtractorTest::testExtractNewStyleMessage2
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc10
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc12
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc5
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc6
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc7
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc8
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc9
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParsePreserve$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicense$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testFileOverviewMultiLine
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseAscii$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseWithAnnotation
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseMeaning2
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseMeaning3
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testRegression15
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testMultilineDocumentationParameter
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testDocumentationMultipleParameter2
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseWithMarkers3
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseWithMarkers5
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseWithMarkers6
Includes new failing tests, set to unusable
processed: 101110
pattern: 110011
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110011
pattern: 110101
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 110101
pattern: 110110
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

patches are written to file
running tests...
used time: Finished in 230.79 seconds
Failing tests: 22
	com.google.javascript.jscomp.IntegrationTest::testIssue701$catena_1
	com.google.javascript.jscomp.JsMessageExtractorTest::testExtractNewStyleMessage2
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc10
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc12
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc5
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc6
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc7
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc8
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc9
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParsePreserve$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicense$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testFileOverviewMultiLine
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseAscii$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseWithAnnotation
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseMeaning2
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseMeaning3
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testRegression15
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testMultilineDocumentationParameter
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testDocumentationMultipleParameter2
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseWithMarkers3
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseWithMarkers5
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseWithMarkers6
Includes new failing tests, set to unusable
processed: 110110
pattern: 111001
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
used time: Finished in 222.50 seconds
Failing tests: 20
	com.google.javascript.jscomp.IntegrationTest::testIssue701$catena_1
	com.google.javascript.jscomp.JsMessageExtractorTest::testExtractNewStyleMessage2
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc10
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc12
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc5
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc6
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc7
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc8
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseDesc9
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testFileOverviewMultiLine
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseAscii$catena_1
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseLicenseWithAnnotation
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseMeaning2
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseMeaning3
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testRegression15
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testMultilineDocumentationParameter
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testDocumentationMultipleParameter2
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseWithMarkers3
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseWithMarkers5
	com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testParseWithMarkers6
Includes new failing tests, set to unusable
processed: 111001
pattern: 111010
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111010
pattern: 111100
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 111100
pattern: 011111
try to fix hunk: 1
insert before 1364 with             lineStartChar = stream.getCharno() + 1;

try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 011111
pattern: 101111
try to fix hunk: 0
insert before 1358 with     int lineStartChar = -1;

try to fix hunk: 2
insert before 1382 with           lineStartChar = 0;

try to fix hunk: 3
insert before 1389 with           boolean isEOC = token == JsDocToken.EOC;
          if (!isEOC) {
            if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
              int numSpaces = stream.getCharno() - lineStartChar;
              for (int i = 0; i < numSpaces; i++) {
                builder.append(' ');
              }
              lineStartChar = -1;
            } else if (builder.length() > 0) {

try to fix hunk: 4
insert before 1390 with               builder.append(' ');
            }
          }

try to fix hunk: 5
delete from 1414 with range 3
patches are written to file
running tests...
EXCEPTION: Inside Exception generator.run() timeout
Traceback (most recent call last):
  File "run.py", line 30, in task
    generator.run()
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 82, in new_function
    return function(*args, **kwargs)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 83, in run
    self._run()
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 109, in _run
    self.taskSingleHunk(task)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/runner.py", line 138, in taskSingleHunk
    failure = util.get_failing_tests(self.path, self.build_dir)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/util.py", line 46, in get_failing_tests
    result = runCommand(['defects4j', 'test', '-w', '{}'.format(path)], timeout=timeout)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/util.py", line 9, in runCommand
    finished = subprocess.run(cmd, capture_output=True, cwd=cwd, timeout=timeout)
  File "/usr/lib/python3.8/subprocess.py", line 495, in run
    stdout, stderr = process.communicate(input, timeout=timeout)
  File "/usr/lib/python3.8/subprocess.py", line 1028, in communicate
    stdout, stderr = self._communicate(input, endtime, timeout)
  File "/usr/lib/python3.8/subprocess.py", line 1868, in _communicate
    ready = selector.select(timeout)
  File "/usr/lib/python3.8/selectors.py", line 415, in select
    fd_event_list = self._selector.poll(timeout)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 69, in handler
    _raise_exception(timeout_exception, exception_message)
  File "/root/workbench/CatenaD4j/scripts/generateBugs/timeout_decorator/timeout_decorator.py", line 47, in _raise_exception
    raise exception(exception_message)
TimeoutError: generator.run() timeout

