---
Begin generate bug_id: Closure_94
num_of_hunks: 3
timeout for running: 3600
use working dir: ./working/data/Closure_94
Try to checkout Closure_94
build dir: ['./working/data/Closure_94/build/classes', './working/data/Closure_94/build/test']
init FileManager
trace file: src/com/google/javascript/jscomp/NodeUtil.java
trying to replace old failing tests
edit: replace from 1071 range 20 at test/com/google/javascript/jscomp/NodeUtilTest.java
to
  public void testValidDefine$catena_0() {
    assertTrue(testValidDefineValue("1"));                                                                  /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertTrue(testValidDefineValue("-3"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("true"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("false"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'foo'"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertFalse(testValidDefineValue("x"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("null"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("undefined"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("NaN"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertTrue(testValidDefineValue("!true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 & 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 + 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'a' + 'b'"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertFalse(testValidDefineValue("1 & foo"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testValidDefine$catena_1() {
    try{ assertTrue(testValidDefineValue("1"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    assertTrue(testValidDefineValue("-3"));                                                                 /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertTrue(testValidDefineValue("true"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("false"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'foo'"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertFalse(testValidDefineValue("x"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("null"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("undefined"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("NaN"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertTrue(testValidDefineValue("!true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 & 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 + 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'a' + 'b'"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertFalse(testValidDefineValue("1 & foo"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testValidDefine$catena_2() {
    try{ assertTrue(testValidDefineValue("1"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-3"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    assertTrue(testValidDefineValue("true"));                                                               /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertTrue(testValidDefineValue("false"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'foo'"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertFalse(testValidDefineValue("x"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("null"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("undefined"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("NaN"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertTrue(testValidDefineValue("!true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 & 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 + 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'a' + 'b'"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertFalse(testValidDefineValue("1 & foo"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testValidDefine$catena_3() {
    try{ assertTrue(testValidDefineValue("1"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-3"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("true"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    assertTrue(testValidDefineValue("false"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertTrue(testValidDefineValue("'foo'"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertFalse(testValidDefineValue("x"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("null"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("undefined"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("NaN"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertTrue(testValidDefineValue("!true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 & 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 + 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'a' + 'b'"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertFalse(testValidDefineValue("1 & foo"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testValidDefine$catena_4() {
    try{ assertTrue(testValidDefineValue("1"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-3"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("true"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("false"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    assertTrue(testValidDefineValue("'foo'"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/
    
    try{ assertFalse(testValidDefineValue("x"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("null"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("undefined"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("NaN"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertTrue(testValidDefineValue("!true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 & 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 + 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'a' + 'b'"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertFalse(testValidDefineValue("1 & foo"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testValidDefine$catena_5() {
    try{ assertTrue(testValidDefineValue("1"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-3"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("true"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("false"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'foo'"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    
    assertFalse(testValidDefineValue("x"));                                                                 /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertFalse(testValidDefineValue("null"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("undefined"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("NaN"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertTrue(testValidDefineValue("!true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 & 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 + 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'a' + 'b'"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertFalse(testValidDefineValue("1 & foo"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testValidDefine$catena_6() {
    try{ assertTrue(testValidDefineValue("1"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-3"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("true"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("false"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'foo'"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertFalse(testValidDefineValue("x"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    assertFalse(testValidDefineValue("null"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertFalse(testValidDefineValue("undefined"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("NaN"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertTrue(testValidDefineValue("!true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 & 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 + 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'a' + 'b'"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertFalse(testValidDefineValue("1 & foo"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testValidDefine$catena_7() {
    try{ assertTrue(testValidDefineValue("1"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-3"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("true"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("false"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'foo'"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertFalse(testValidDefineValue("x"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("null"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    assertFalse(testValidDefineValue("undefined"));                                                         /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertFalse(testValidDefineValue("NaN"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertTrue(testValidDefineValue("!true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 & 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 + 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'a' + 'b'"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertFalse(testValidDefineValue("1 & foo"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testValidDefine$catena_8() {
    try{ assertTrue(testValidDefineValue("1"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-3"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("true"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("false"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'foo'"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertFalse(testValidDefineValue("x"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("null"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("undefined"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    assertFalse(testValidDefineValue("NaN"));                                                               /***** ORIGINAL ASSERTION IS HERE *****/
    
    try{ assertTrue(testValidDefineValue("!true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 & 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 + 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'a' + 'b'"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertFalse(testValidDefineValue("1 & foo"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testValidDefine$catena_9() {
    try{ assertTrue(testValidDefineValue("1"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-3"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("true"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("false"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'foo'"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertFalse(testValidDefineValue("x"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("null"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("undefined"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("NaN"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    
    assertTrue(testValidDefineValue("!true"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertTrue(testValidDefineValue("-true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 & 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 + 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'a' + 'b'"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertFalse(testValidDefineValue("1 & foo"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testValidDefine$catena_10() {
    try{ assertTrue(testValidDefineValue("1"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-3"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("true"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("false"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'foo'"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertFalse(testValidDefineValue("x"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("null"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("undefined"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("NaN"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertTrue(testValidDefineValue("!true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    assertTrue(testValidDefineValue("-true"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertTrue(testValidDefineValue("1 & 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 + 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'a' + 'b'"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertFalse(testValidDefineValue("1 & foo"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testValidDefine$catena_11() {
    try{ assertTrue(testValidDefineValue("1"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-3"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("true"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("false"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'foo'"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertFalse(testValidDefineValue("x"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("null"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("undefined"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("NaN"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertTrue(testValidDefineValue("!true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    assertTrue(testValidDefineValue("1 & 8"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertTrue(testValidDefineValue("1 + 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'a' + 'b'"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertFalse(testValidDefineValue("1 & foo"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testValidDefine$catena_12() {
    try{ assertTrue(testValidDefineValue("1"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-3"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("true"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("false"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'foo'"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertFalse(testValidDefineValue("x"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("null"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("undefined"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("NaN"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertTrue(testValidDefineValue("!true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 & 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    assertTrue(testValidDefineValue("1 + 8"));                                                              /***** ORIGINAL ASSERTION IS HERE *****/
    try{ assertTrue(testValidDefineValue("'a' + 'b'"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    try{ assertFalse(testValidDefineValue("1 & foo"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testValidDefine$catena_13() {
    try{ assertTrue(testValidDefineValue("1"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-3"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("true"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("false"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'foo'"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertFalse(testValidDefineValue("x"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("null"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("undefined"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("NaN"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertTrue(testValidDefineValue("!true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 & 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 + 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    assertTrue(testValidDefineValue("'a' + 'b'"));                                                          /***** ORIGINAL ASSERTION IS HERE *****/

    try{ assertFalse(testValidDefineValue("1 & foo"));                                                      }catch(Throwable __SHOULD_BE_IGNORED){}
  }   public void testValidDefine$catena_14() {
    try{ assertTrue(testValidDefineValue("1"));                                                             }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-3"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("true"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("false"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'foo'"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertFalse(testValidDefineValue("x"));                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("null"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("undefined"));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertFalse(testValidDefineValue("NaN"));                                                          }catch(Throwable __SHOULD_BE_IGNORED){}
    
    try{ assertTrue(testValidDefineValue("!true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("-true"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 & 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("1 + 8"));                                                         }catch(Throwable __SHOULD_BE_IGNORED){}
    try{ assertTrue(testValidDefineValue("'a' + 'b'"));                                                     }catch(Throwable __SHOULD_BE_IGNORED){}

    assertFalse(testValidDefineValue("1 & foo"));                                                           /***** ORIGINAL ASSERTION IS HERE *****/
  }
trace file: test/com/google/javascript/jscomp/NodeUtilTest.java
new test num: 15
ori test num: 2
pattern: 000
patches are written to file
running tests...
used time: Finished in 161.77 seconds
Failing tests: 5
	com.google.javascript.jscomp.NodeUtilTest::testValidDefine$catena_12
	com.google.javascript.jscomp.NodeUtilTest::testValidDefine$catena_13
	com.google.javascript.jscomp.NodeUtilTest::testValidDefine$catena_14
	com.google.javascript.jscomp.ProcessDefinesTest::testOverridingString1
	com.google.javascript.jscomp.ProcessDefinesTest::testOverridingString3
processed: 000
pattern: 001
try to fix hunk: 2
insert before 337 with       case Token.POS:

patches are written to file
running tests...
used time: Finished in 140.44 seconds
Failing tests: 5
	com.google.javascript.jscomp.NodeUtilTest::testValidDefine$catena_12
	com.google.javascript.jscomp.NodeUtilTest::testValidDefine$catena_13
	com.google.javascript.jscomp.NodeUtilTest::testValidDefine$catena_14
	com.google.javascript.jscomp.ProcessDefinesTest::testOverridingString1
	com.google.javascript.jscomp.ProcessDefinesTest::testOverridingString3
No new failing tests but only 1 hunk
processed: 001
pattern: 010
try to fix hunk: 1
insert before 333 with       case Token.DIV:
      case Token.EQ:
      case Token.GE:
      case Token.GT:
      case Token.LE:
      case Token.LSH:
      case Token.LT:
      case Token.MOD:
      case Token.MUL:
      case Token.NE:
      case Token.RSH:
      case Token.SHEQ:
      case Token.SHNE:
      case Token.SUB:
      case Token.URSH:
        return isValidDefineValue(val.getFirstChild(), defines)
            && isValidDefineValue(val.getLastChild(), defines);

patches are written to file
running tests...
used time: Finished in 152.28 seconds
Failing tests: 4
	com.google.javascript.jscomp.NodeUtilTest::testValidDefine$catena_12
	com.google.javascript.jscomp.NodeUtilTest::testValidDefine$catena_13
	com.google.javascript.jscomp.ProcessDefinesTest::testOverridingString1
	com.google.javascript.jscomp.ProcessDefinesTest::testOverridingString3
select new bug
Pattern: 010
new failing tests:
com.google.javascript.jscomp.NodeUtilTest::testValidDefine$catena_14
Save found bug
processed: 010
pattern: 100
try to fix hunk: 0
insert before 329 with       case Token.ADD:

patches are written to file
running tests...
used time: Finished in 147.03 seconds
Failing tests: 2
	com.google.javascript.jscomp.NodeUtilTest::testValidDefine$catena_14
	com.google.javascript.jscomp.ProcessDefinesTest::testDefineWithBadValue2
Includes new failing tests, set to unusable
processed: 100
pattern: 011
try to fix hunk: 1
insert before 333 with       case Token.DIV:
      case Token.EQ:
      case Token.GE:
      case Token.GT:
      case Token.LE:
      case Token.LSH:
      case Token.LT:
      case Token.MOD:
      case Token.MUL:
      case Token.NE:
      case Token.RSH:
      case Token.SHEQ:
      case Token.SHNE:
      case Token.SUB:
      case Token.URSH:
        return isValidDefineValue(val.getFirstChild(), defines)
            && isValidDefineValue(val.getLastChild(), defines);

try to fix hunk: 2
insert before 337 with       case Token.POS:

patches are written to file
running tests...
used time: Finished in 143.49 seconds
Failing tests: 4
	com.google.javascript.jscomp.NodeUtilTest::testValidDefine$catena_12
	com.google.javascript.jscomp.NodeUtilTest::testValidDefine$catena_13
	com.google.javascript.jscomp.ProcessDefinesTest::testOverridingString1
	com.google.javascript.jscomp.ProcessDefinesTest::testOverridingString3
Can independently fix []
Could not fix independently
processed: 011
pattern: 101
try to fix hunk: 0
insert before 329 with       case Token.ADD:

try to fix hunk: 2
insert before 337 with       case Token.POS:

patches are written to file
running tests...
used time: Finished in 136.48 seconds
Failing tests: 2
	com.google.javascript.jscomp.NodeUtilTest::testValidDefine$catena_14
	com.google.javascript.jscomp.ProcessDefinesTest::testDefineWithBadValue2
Includes new failing tests, set to unusable
processed: 101
pattern: 110
try to fix hunk: 0
insert before 329 with       case Token.ADD:

try to fix hunk: 1
insert before 333 with       case Token.DIV:
      case Token.EQ:
      case Token.GE:
      case Token.GT:
      case Token.LE:
      case Token.LSH:
      case Token.LT:
      case Token.MOD:
      case Token.MUL:
      case Token.NE:
      case Token.RSH:
      case Token.SHEQ:
      case Token.SHNE:
      case Token.SUB:
      case Token.URSH:
        return isValidDefineValue(val.getFirstChild(), defines)
            && isValidDefineValue(val.getLastChild(), defines);

patches are written to file
running tests...
used time: Finished in 130.85 seconds
Failing tests: 0
Can independently fix ['com.google.javascript.jscomp.ProcessDefinesTest::testOverridingString1', 'com.google.javascript.jscomp.NodeUtilTest::testValidDefine$catena_12', 'com.google.javascript.jscomp.NodeUtilTest::testValidDefine$catena_13', 'com.google.javascript.jscomp.ProcessDefinesTest::testOverridingString3']
select new bug
Pattern: 110
new failing tests:
com.google.javascript.jscomp.ProcessDefinesTest::testOverridingString1
com.google.javascript.jscomp.NodeUtilTest::testValidDefine$catena_12
com.google.javascript.jscomp.NodeUtilTest::testValidDefine$catena_13
com.google.javascript.jscomp.ProcessDefinesTest::testOverridingString3
Save found bug
processed: 110
pattern: 111
try to fix hunk: 0
insert before 329 with       case Token.ADD:

try to fix hunk: 1
insert before 333 with       case Token.DIV:
      case Token.EQ:
      case Token.GE:
      case Token.GT:
      case Token.LE:
      case Token.LSH:
      case Token.LT:
      case Token.MOD:
      case Token.MUL:
      case Token.NE:
      case Token.RSH:
      case Token.SHEQ:
      case Token.SHNE:
      case Token.SUB:
      case Token.URSH:
        return isValidDefineValue(val.getFirstChild(), defines)
            && isValidDefineValue(val.getLastChild(), defines);

try to fix hunk: 2
insert before 337 with       case Token.POS:

patches are written to file
running tests...
used time: Finished in 126.23 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
processed: 111
Find 2 new bugs
