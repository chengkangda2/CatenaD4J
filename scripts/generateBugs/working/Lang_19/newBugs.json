{
    "original": {
        "num_of_hunks": 5,
        "0": {
            "file_name": "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
            "from_line_no": 40,
            "to_line_no": 40,
            "replaced_with": "        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {\n",
            "replaced": "        if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {\n",
            "patch_type": "replace",
            "next_line_no": 41
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
            "replaced_with": "                if(start == seqEnd) {\n                    return 0;\n                }\n",
            "patch_type": "insert",
            "next_line_no": 50
        },
        "2": {
            "file_name": "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
            "from_line_no": 54,
            "to_line_no": 54,
            "replaced_with": "            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||\n                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||\n                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )\n",
            "replaced": "            while(input.charAt(end) != ';') \n",
            "patch_type": "replace",
            "next_line_no": 55
        },
        "3": {
            "file_name": "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
            "replaced_with": "            boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');\n",
            "patch_type": "insert",
            "next_line_no": 79
        },
        "4": {
            "file_name": "src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java",
            "from_line_no": 80,
            "to_line_no": 80,
            "replaced_with": "            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);\n",
            "replaced": "            return 2 + (end - start) + (isHex ? 1 : 0) + 1;\n",
            "patch_type": "replace",
            "next_line_no": 81
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity",
            "org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds"
        ],
        "org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity": {
            "file_path": "src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java",
            "Instance": "Begin: Pos(46, 12)\nEnd: Pos(53, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_19/src/test/java//org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java\nName: testUnfinishedEntity\nChilds: [StatementAssertion<Begin: Pos(52, 9), End: Pos(52, 105)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_19/src/test/java//org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java",
            "name": "testUnfinishedEntity",
            "begin": "Pos(46, 12)",
            "end": "Pos(53, 5)",
            "begin_line_no": 46,
            "end_line_no": 53,
            "child": [
                "Begin: Pos(52, 9)\nEnd: Pos(52, 105)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [],
            "func": {}
        },
        "org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds": {
            "file_path": "src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java",
            "Instance": "Begin: Pos(37, 12)\nEnd: Pos(44, 5)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_19/src/test/java//org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java\nName: testOutOfBounds\nChilds: [StatementAssertion<Begin: Pos(40, 9), End: Pos(40, 101)>,\nStatementAssertion<Begin: Pos(41, 9), End: Pos(41, 103)>,\nStatementAssertion<Begin: Pos(42, 9), End: Pos(42, 105)>,\nStatementAssertion<Begin: Pos(43, 9), End: Pos(43, 105)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_19/src/test/java//org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java",
            "name": "testOutOfBounds",
            "begin": "Pos(37, 12)",
            "end": "Pos(44, 5)",
            "begin_line_no": 37,
            "end_line_no": 44,
            "child": [
                "Begin: Pos(40, 9)\nEnd: Pos(40, 101)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(41, 9)\nEnd: Pos(41, 103)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(42, 9)\nEnd: Pos(42, 105)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(43, 9)\nEnd: Pos(43, 105)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "    public void testOutOfBounds$catena_0() {\n        NumericEntityUnescaper neu = new NumericEntityUnescaper();\n\n        assertEquals(\"Failed to ignore when last character is &\", \"Test &\", neu.translate(\"Test &\"));             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Failed to ignore when last character is &\", \"Test &#\", neu.translate(\"Test &#\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Failed to ignore when last character is &\", \"Test &#x\", neu.translate(\"Test &#x\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Failed to ignore when last character is &\", \"Test &#X\", neu.translate(\"Test &#X\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testOutOfBounds$catena_1() {\n        NumericEntityUnescaper neu = new NumericEntityUnescaper();\n\n        try{ assertEquals(\"Failed to ignore when last character is &\", \"Test &\", neu.translate(\"Test &\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Failed to ignore when last character is &\", \"Test &#\", neu.translate(\"Test &#\"));           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Failed to ignore when last character is &\", \"Test &#x\", neu.translate(\"Test &#x\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Failed to ignore when last character is &\", \"Test &#X\", neu.translate(\"Test &#X\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testOutOfBounds$catena_2() {\n        NumericEntityUnescaper neu = new NumericEntityUnescaper();\n\n        try{ assertEquals(\"Failed to ignore when last character is &\", \"Test &\", neu.translate(\"Test &\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Failed to ignore when last character is &\", \"Test &#\", neu.translate(\"Test &#\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Failed to ignore when last character is &\", \"Test &#x\", neu.translate(\"Test &#x\"));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Failed to ignore when last character is &\", \"Test &#X\", neu.translate(\"Test &#X\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "    public void testOutOfBounds$catena_3() {\n        NumericEntityUnescaper neu = new NumericEntityUnescaper();\n\n        try{ assertEquals(\"Failed to ignore when last character is &\", \"Test &\", neu.translate(\"Test &\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Failed to ignore when last character is &\", \"Test &#\", neu.translate(\"Test &#\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Failed to ignore when last character is &\", \"Test &#x\", neu.translate(\"Test &#x\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Failed to ignore when last character is &\", \"Test &#X\", neu.translate(\"Test &#X\"));         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            ],
            "func": {
                "0": "    public void testOutOfBounds$catena_0() {\n        NumericEntityUnescaper neu = new NumericEntityUnescaper();\n\n        assertEquals(\"Failed to ignore when last character is &\", \"Test &\", neu.translate(\"Test &\"));             /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Failed to ignore when last character is &\", \"Test &#\", neu.translate(\"Test &#\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Failed to ignore when last character is &\", \"Test &#x\", neu.translate(\"Test &#x\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Failed to ignore when last character is &\", \"Test &#X\", neu.translate(\"Test &#X\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "1": "    public void testOutOfBounds$catena_1() {\n        NumericEntityUnescaper neu = new NumericEntityUnescaper();\n\n        try{ assertEquals(\"Failed to ignore when last character is &\", \"Test &\", neu.translate(\"Test &\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Failed to ignore when last character is &\", \"Test &#\", neu.translate(\"Test &#\"));           /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Failed to ignore when last character is &\", \"Test &#x\", neu.translate(\"Test &#x\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Failed to ignore when last character is &\", \"Test &#X\", neu.translate(\"Test &#X\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "2": "    public void testOutOfBounds$catena_2() {\n        NumericEntityUnescaper neu = new NumericEntityUnescaper();\n\n        try{ assertEquals(\"Failed to ignore when last character is &\", \"Test &\", neu.translate(\"Test &\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Failed to ignore when last character is &\", \"Test &#\", neu.translate(\"Test &#\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Failed to ignore when last character is &\", \"Test &#x\", neu.translate(\"Test &#x\"));         /***** ORIGINAL ASSERTION IS HERE *****/\n        try{ assertEquals(\"Failed to ignore when last character is &\", \"Test &#X\", neu.translate(\"Test &#X\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n    }",
                "3": "    public void testOutOfBounds$catena_3() {\n        NumericEntityUnescaper neu = new NumericEntityUnescaper();\n\n        try{ assertEquals(\"Failed to ignore when last character is &\", \"Test &\", neu.translate(\"Test &\"));        }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Failed to ignore when last character is &\", \"Test &#\", neu.translate(\"Test &#\"));      }catch(Throwable __SHOULD_BE_IGNORED){}\n        try{ assertEquals(\"Failed to ignore when last character is &\", \"Test &#x\", neu.translate(\"Test &#x\"));    }catch(Throwable __SHOULD_BE_IGNORED){}\n        assertEquals(\"Failed to ignore when last character is &\", \"Test &#X\", neu.translate(\"Test &#X\"));         /***** ORIGINAL ASSERTION IS HERE *****/\n    }"
            }
        }
    },
    "00111": {
        "failing_tests": [
            "org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity"
        ]
    }
}