---
Begin generate bug_id: Lang_19
num_of_hunks: 5
use working dir: ./working/data/Lang_19
Try to checkout Lang_19
build dir: ['./working/data/Lang_19/target/classes', './working/data/Lang_19/target/tests']
init FileManager
trace file: src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
trace file: src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
trace file: src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
trace file: src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
trace file: src/main/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaper.java
trying to replace old failing tests
edit: replace from 37 range 8 at src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java
to
    public void testOutOfBounds$catena_0() {
        NumericEntityUnescaper neu = new NumericEntityUnescaper();

        assertEquals("Failed to ignore when last character is &", "Test &", neu.translate("Test &"));             /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("Failed to ignore when last character is &", "Test &#", neu.translate("Test &#"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Failed to ignore when last character is &", "Test &#x", neu.translate("Test &#x"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Failed to ignore when last character is &", "Test &#X", neu.translate("Test &#X"));    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testOutOfBounds$catena_1() {
        NumericEntityUnescaper neu = new NumericEntityUnescaper();

        try{ assertEquals("Failed to ignore when last character is &", "Test &", neu.translate("Test &"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("Failed to ignore when last character is &", "Test &#", neu.translate("Test &#"));           /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("Failed to ignore when last character is &", "Test &#x", neu.translate("Test &#x"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Failed to ignore when last character is &", "Test &#X", neu.translate("Test &#X"));    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testOutOfBounds$catena_2() {
        NumericEntityUnescaper neu = new NumericEntityUnescaper();

        try{ assertEquals("Failed to ignore when last character is &", "Test &", neu.translate("Test &"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Failed to ignore when last character is &", "Test &#", neu.translate("Test &#"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("Failed to ignore when last character is &", "Test &#x", neu.translate("Test &#x"));         /***** ORIGINAL ASSERTION IS HERE *****/
        try{ assertEquals("Failed to ignore when last character is &", "Test &#X", neu.translate("Test &#X"));    }catch(Throwable __SHOULD_BE_IGNORED){}
    }     public void testOutOfBounds$catena_3() {
        NumericEntityUnescaper neu = new NumericEntityUnescaper();

        try{ assertEquals("Failed to ignore when last character is &", "Test &", neu.translate("Test &"));        }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Failed to ignore when last character is &", "Test &#", neu.translate("Test &#"));      }catch(Throwable __SHOULD_BE_IGNORED){}
        try{ assertEquals("Failed to ignore when last character is &", "Test &#x", neu.translate("Test &#x"));    }catch(Throwable __SHOULD_BE_IGNORED){}
        assertEquals("Failed to ignore when last character is &", "Test &#X", neu.translate("Test &#X"));         /***** ORIGINAL ASSERTION IS HERE *****/
    }
trace file: src/test/java/org/apache/commons/lang3/text/translate/NumericEntityUnescaperTest.java
new test num: 4
ori test num: 1
pattern: 00000
patches are written to file
running tests...
used time: Finished in 30.45 seconds
Failing tests: 4
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds$catena_1
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds$catena_2
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds$catena_3
pattern: 00001
try to fix hunk: 4
replace from 80 with range 1 to
            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 00010
try to fix hunk: 3
insert before 79 with             boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');

patches are written to file
running tests...
used time: Finished in 24.00 seconds
Failing tests: 4
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds$catena_1
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds$catena_2
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds$catena_3
No new failing tests but only 1 hunk
pattern: 00100
try to fix hunk: 2
replace from 54 with range 1 to
            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||
                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||
                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )

patches are written to file
running tests...
used time: Finished in 22.53 seconds
Failing tests: 2
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds$catena_1
No new failing tests but only 1 hunk
pattern: 01000
try to fix hunk: 1
insert before 50 with                 if(start == seqEnd) {
                    return 0;
                }

patches are written to file
running tests...
used time: Finished in 23.52 seconds
Failing tests: 2
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds$catena_1
No new failing tests but only 1 hunk
pattern: 10000
try to fix hunk: 0
replace from 40 with range 1 to
        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {

patches are written to file
running tests...
used time: Finished in 20.57 seconds
Failing tests: 3
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds$catena_2
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds$catena_3
No new failing tests but only 1 hunk
pattern: 00011
try to fix hunk: 3
insert before 79 with             boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');

try to fix hunk: 4
replace from 80 with range 1 to
            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);

patches are written to file
running tests...
used time: Finished in 23.41 seconds
Failing tests: 4
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds$catena_1
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds$catena_2
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds$catena_3
Can independently fix []
Could not fix independently
pattern: 00101
try to fix hunk: 2
replace from 54 with range 1 to
            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||
                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||
                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )

try to fix hunk: 4
replace from 80 with range 1 to
            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 00110
try to fix hunk: 2
replace from 54 with range 1 to
            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||
                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||
                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )

try to fix hunk: 3
insert before 79 with             boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');

patches are written to file
running tests...
used time: Finished in 22.09 seconds
Failing tests: 2
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds$catena_1
Can independently fix []
Could not fix independently
pattern: 01001
try to fix hunk: 1
insert before 50 with                 if(start == seqEnd) {
                    return 0;
                }

try to fix hunk: 4
replace from 80 with range 1 to
            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 01010
try to fix hunk: 1
insert before 50 with                 if(start == seqEnd) {
                    return 0;
                }

try to fix hunk: 3
insert before 79 with             boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');

patches are written to file
running tests...
used time: Finished in 23.40 seconds
Failing tests: 2
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds$catena_1
Can independently fix []
Could not fix independently
pattern: 01100
try to fix hunk: 1
insert before 50 with                 if(start == seqEnd) {
                    return 0;
                }

try to fix hunk: 2
replace from 54 with range 1 to
            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||
                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||
                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )

patches are written to file
running tests...
used time: Finished in 24.30 seconds
Failing tests: 2
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds$catena_1
Can independently fix []
Could not fix independently
pattern: 10001
try to fix hunk: 0
replace from 40 with range 1 to
        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {

try to fix hunk: 4
replace from 80 with range 1 to
            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 10010
try to fix hunk: 0
replace from 40 with range 1 to
        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {

try to fix hunk: 3
insert before 79 with             boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');

patches are written to file
running tests...
used time: Finished in 24.21 seconds
Failing tests: 3
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds$catena_2
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds$catena_3
Can independently fix []
Could not fix independently
pattern: 10100
try to fix hunk: 0
replace from 40 with range 1 to
        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {

try to fix hunk: 2
replace from 54 with range 1 to
            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||
                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||
                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )

patches are written to file
running tests...
used time: Finished in 23.55 seconds
Failing tests: 1
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity
Can independently fix []
Could not fix independently
pattern: 11000
try to fix hunk: 0
replace from 40 with range 1 to
        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {

try to fix hunk: 1
insert before 50 with                 if(start == seqEnd) {
                    return 0;
                }

patches are written to file
running tests...
used time: Finished in 23.51 seconds
Failing tests: 1
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity
Can independently fix []
Could not fix independently
pattern: 00111
try to fix hunk: 2
replace from 54 with range 1 to
            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||
                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||
                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )

try to fix hunk: 3
insert before 79 with             boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');

try to fix hunk: 4
replace from 80 with range 1 to
            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);

patches are written to file
running tests...
used time: Finished in 20.87 seconds
Failing tests: 1
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds$catena_1
Can independently fix ['org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity']
select new bug
Pattern: 00111
failing tests: org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity
pattern: 01011
try to fix hunk: 1
insert before 50 with                 if(start == seqEnd) {
                    return 0;
                }

try to fix hunk: 3
insert before 79 with             boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');

try to fix hunk: 4
replace from 80 with range 1 to
            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);

patches are written to file
running tests...
used time: Finished in 22.65 seconds
Failing tests: 2
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds$catena_1
Can independently fix []
Could not fix independently
pattern: 01101
try to fix hunk: 1
insert before 50 with                 if(start == seqEnd) {
                    return 0;
                }

try to fix hunk: 2
replace from 54 with range 1 to
            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||
                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||
                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )

try to fix hunk: 4
replace from 80 with range 1 to
            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 01110
try to fix hunk: 1
insert before 50 with                 if(start == seqEnd) {
                    return 0;
                }

try to fix hunk: 2
replace from 54 with range 1 to
            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||
                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||
                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )

try to fix hunk: 3
insert before 79 with             boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');

patches are written to file
running tests...
used time: Finished in 23.11 seconds
Failing tests: 2
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds$catena_1
Can independently fix []
Could not fix independently
pattern: 10011
try to fix hunk: 0
replace from 40 with range 1 to
        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {

try to fix hunk: 3
insert before 79 with             boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');

try to fix hunk: 4
replace from 80 with range 1 to
            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);

patches are written to file
running tests...
used time: Finished in 21.90 seconds
Failing tests: 3
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds$catena_2
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds$catena_3
Can independently fix []
Could not fix independently
pattern: 10101
try to fix hunk: 0
replace from 40 with range 1 to
        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {

try to fix hunk: 2
replace from 54 with range 1 to
            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||
                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||
                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )

try to fix hunk: 4
replace from 80 with range 1 to
            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 10110
try to fix hunk: 0
replace from 40 with range 1 to
        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {

try to fix hunk: 2
replace from 54 with range 1 to
            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||
                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||
                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )

try to fix hunk: 3
insert before 79 with             boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');

patches are written to file
running tests...
used time: Finished in 25.14 seconds
Failing tests: 1
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity
Can independently fix []
Could not fix independently
pattern: 11001
try to fix hunk: 0
replace from 40 with range 1 to
        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {

try to fix hunk: 1
insert before 50 with                 if(start == seqEnd) {
                    return 0;
                }

try to fix hunk: 4
replace from 80 with range 1 to
            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 11010
try to fix hunk: 0
replace from 40 with range 1 to
        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {

try to fix hunk: 1
insert before 50 with                 if(start == seqEnd) {
                    return 0;
                }

try to fix hunk: 3
insert before 79 with             boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');

patches are written to file
running tests...
used time: Finished in 22.68 seconds
Failing tests: 1
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity
Can independently fix []
Could not fix independently
pattern: 11100
try to fix hunk: 0
replace from 40 with range 1 to
        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {

try to fix hunk: 1
insert before 50 with                 if(start == seqEnd) {
                    return 0;
                }

try to fix hunk: 2
replace from 54 with range 1 to
            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||
                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||
                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )

patches are written to file
running tests...
used time: Finished in 24.06 seconds
Failing tests: 1
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity
Can independently fix []
Could not fix independently
pattern: 01111
try to fix hunk: 1
insert before 50 with                 if(start == seqEnd) {
                    return 0;
                }

try to fix hunk: 2
replace from 54 with range 1 to
            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||
                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||
                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )

try to fix hunk: 3
insert before 79 with             boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');

try to fix hunk: 4
replace from 80 with range 1 to
            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);

patches are written to file
running tests...
used time: Finished in 23.70 seconds
Failing tests: 1
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testOutOfBounds$catena_1
Can independently fix []
Could not fix independently
pattern: 10111
try to fix hunk: 0
replace from 40 with range 1 to
        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {

try to fix hunk: 2
replace from 54 with range 1 to
            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||
                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||
                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )

try to fix hunk: 3
insert before 79 with             boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');

try to fix hunk: 4
replace from 80 with range 1 to
            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);

patches are written to file
running tests...
used time: Finished in 22.61 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
pattern: 11011
try to fix hunk: 0
replace from 40 with range 1 to
        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {

try to fix hunk: 1
insert before 50 with                 if(start == seqEnd) {
                    return 0;
                }

try to fix hunk: 3
insert before 79 with             boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');

try to fix hunk: 4
replace from 80 with range 1 to
            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);

patches are written to file
running tests...
used time: Finished in 21.85 seconds
Failing tests: 1
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity
Can independently fix []
Could not fix independently
pattern: 11101
try to fix hunk: 0
replace from 40 with range 1 to
        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {

try to fix hunk: 1
insert before 50 with                 if(start == seqEnd) {
                    return 0;
                }

try to fix hunk: 2
replace from 54 with range 1 to
            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||
                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||
                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )

try to fix hunk: 4
replace from 80 with range 1 to
            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
pattern: 11110
try to fix hunk: 0
replace from 40 with range 1 to
        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {

try to fix hunk: 1
insert before 50 with                 if(start == seqEnd) {
                    return 0;
                }

try to fix hunk: 2
replace from 54 with range 1 to
            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||
                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||
                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )

try to fix hunk: 3
insert before 79 with             boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');

patches are written to file
running tests...
used time: Finished in 25.06 seconds
Failing tests: 1
	org.apache.commons.lang3.text.translate.NumericEntityUnescaperTest::testUnfinishedEntity
Can independently fix []
Could not fix independently
pattern: 11111
try to fix hunk: 0
replace from 40 with range 1 to
        if(input.charAt(index) == '&' && index < seqEnd - 2 && input.charAt(index + 1) == '#') {

try to fix hunk: 1
insert before 50 with                 if(start == seqEnd) {
                    return 0;
                }

try to fix hunk: 2
replace from 54 with range 1 to
            while(end < seqEnd && ( (input.charAt(end) >= '0' && input.charAt(end) <= '9') ||
                                    (input.charAt(end) >= 'a' && input.charAt(end) <= 'f') ||
                                    (input.charAt(end) >= 'A' && input.charAt(end) <= 'F') ) )

try to fix hunk: 3
insert before 79 with             boolean semiNext = (end != seqEnd) && (input.charAt(end) == ';');

try to fix hunk: 4
replace from 80 with range 1 to
            return 2 + (end - start) + (isHex ? 1 : 0) + (semiNext ? 1 : 0);

patches are written to file
running tests...
used time: Finished in 23.05 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
Find 1 new bugs
