{
    "original": {
        "num_of_hunks": 4,
        "0": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "replaced_with": "\t\tint csLastIndex = csLength - 1;\n\t\tint searchLastIndex = searchLength - 1;\n",
            "patch_type": "insert",
            "next_line_no": 1446
        },
        "1": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "replaced_with": "\t\t\t\t\tif (i < csLastIndex && j < searchLastIndex && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {\n",
            "patch_type": "insert",
            "next_line_no": 1450
        },
        "2": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "replaced_with": "\t\t\t\t\t\tif (searchChars[j + 1] == cs.charAt(i + 1)) {\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n",
            "patch_type": "insert",
            "next_line_no": 1451
        },
        "3": {
            "file_name": "src/main/java/org/apache/commons/lang3/StringUtils.java",
            "replaced_with": "\t\t\t\t\t}\n",
            "patch_type": "insert",
            "next_line_no": 1453
        }
    },
    "method": {
        "failing_tests": [
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars",
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars"
        ],
        "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars": {
            "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "Instance": "Begin: Pos(687, 9)\nEnd: Pos(698, 2)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_31/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\nName: testContainsAnyCharArrayWithSupplementaryChars\nChilds: [StatementAssertion<Begin: Pos(688, 3), End: Pos(688, 97)>,\nStatementAssertion<Begin: Pos(689, 3), End: Pos(689, 97)>,\nStatementAssertion<Begin: Pos(690, 3), End: Pos(690, 84)>,\nStatementAssertion<Begin: Pos(692, 3), End: Pos(692, 51)>,\nStatementAssertion<Begin: Pos(693, 3), End: Pos(693, 60)>,\nStatementAssertion<Begin: Pos(694, 3), End: Pos(694, 61)>,\nStatementAssertion<Begin: Pos(696, 3), End: Pos(696, 85)>,\nStatementAssertion<Begin: Pos(697, 3), End: Pos(697, 85)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_31/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "name": "testContainsAnyCharArrayWithSupplementaryChars",
            "begin": "Pos(687, 9)",
            "end": "Pos(698, 2)",
            "begin_line_no": 687,
            "end_line_no": 698,
            "child": [
                "Begin: Pos(688, 3)\nEnd: Pos(688, 97)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(689, 3)\nEnd: Pos(689, 97)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(690, 3)\nEnd: Pos(690, 84)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(692, 3)\nEnd: Pos(692, 51)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(693, 3)\nEnd: Pos(693, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(694, 3)\nEnd: Pos(694, 61)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(696, 3)\nEnd: Pos(696, 85)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(697, 3)\nEnd: Pos(697, 85)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "\tpublic void testContainsAnyCharArrayWithSupplementaryChars$catena_0() {\n\t\tassertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));           /***** ORIGINAL ASSERTION IS HERE *****/\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "\tpublic void testContainsAnyCharArrayWithSupplementaryChars$catena_1() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\tassertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));           /***** ORIGINAL ASSERTION IS HERE *****/\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "\tpublic void testContainsAnyCharArrayWithSupplementaryChars$catena_2() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\tassertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                        /***** ORIGINAL ASSERTION IS HERE *****/\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "\tpublic void testContainsAnyCharArrayWithSupplementaryChars$catena_3() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\tassertEquals(-1, CharU20000.indexOf(CharU20001));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "\tpublic void testContainsAnyCharArrayWithSupplementaryChars$catena_4() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\tassertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "\tpublic void testContainsAnyCharArrayWithSupplementaryChars$catena_5() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\tassertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "\tpublic void testContainsAnyCharArrayWithSupplementaryChars$catena_6() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\tassertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                       /***** ORIGINAL ASSERTION IS HERE *****/\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "\tpublic void testContainsAnyCharArrayWithSupplementaryChars$catena_7() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\tassertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                       /***** ORIGINAL ASSERTION IS HERE *****/\n\t}"
            ],
            "func": {
                "0": "\tpublic void testContainsAnyCharArrayWithSupplementaryChars$catena_0() {\n\t\tassertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));           /***** ORIGINAL ASSERTION IS HERE *****/\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "1": "\tpublic void testContainsAnyCharArrayWithSupplementaryChars$catena_1() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\tassertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));           /***** ORIGINAL ASSERTION IS HERE *****/\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "2": "\tpublic void testContainsAnyCharArrayWithSupplementaryChars$catena_2() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\tassertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                        /***** ORIGINAL ASSERTION IS HERE *****/\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "3": "\tpublic void testContainsAnyCharArrayWithSupplementaryChars$catena_3() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\tassertEquals(-1, CharU20000.indexOf(CharU20001));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "4": "\tpublic void testContainsAnyCharArrayWithSupplementaryChars$catena_4() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\tassertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "5": "\tpublic void testContainsAnyCharArrayWithSupplementaryChars$catena_5() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\tassertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "6": "\tpublic void testContainsAnyCharArrayWithSupplementaryChars$catena_6() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\tassertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                       /***** ORIGINAL ASSERTION IS HERE *****/\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "7": "\tpublic void testContainsAnyCharArrayWithSupplementaryChars$catena_7() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                   }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\tassertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                       /***** ORIGINAL ASSERTION IS HERE *****/\n\t}"
            }
        },
        "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars": {
            "file_path": "src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "Instance": "Begin: Pos(671, 9)\nEnd: Pos(682, 2)\nSource: /root/workbench/exportInfo/d4j_buggy/Lang_31/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java\nName: testContainsAnyStringWithSupplementaryChars\nChilds: [StatementAssertion<Begin: Pos(672, 3), End: Pos(672, 83)>,\nStatementAssertion<Begin: Pos(673, 3), End: Pos(673, 83)>,\nStatementAssertion<Begin: Pos(674, 3), End: Pos(674, 70)>,\nStatementAssertion<Begin: Pos(676, 3), End: Pos(676, 51)>,\nStatementAssertion<Begin: Pos(677, 3), End: Pos(677, 60)>,\nStatementAssertion<Begin: Pos(678, 3), End: Pos(678, 61)>,\nStatementAssertion<Begin: Pos(680, 3), End: Pos(680, 71)>,\nStatementAssertion<Begin: Pos(681, 3), End: Pos(681, 71)>,\n]",
            "source": "/root/workbench/exportInfo/d4j_buggy/Lang_31/src/test/java//org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java",
            "name": "testContainsAnyStringWithSupplementaryChars",
            "begin": "Pos(671, 9)",
            "end": "Pos(682, 2)",
            "begin_line_no": 671,
            "end_line_no": 682,
            "child": [
                "Begin: Pos(672, 3)\nEnd: Pos(672, 83)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(673, 3)\nEnd: Pos(673, 83)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(674, 3)\nEnd: Pos(674, 70)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(676, 3)\nEnd: Pos(676, 51)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(677, 3)\nEnd: Pos(677, 60)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(678, 3)\nEnd: Pos(678, 61)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(680, 3)\nEnd: Pos(680, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []",
                "Begin: Pos(681, 3)\nEnd: Pos(681, 71)\nSource: StatementExpression\nName: <Unknown>\nChilds: []"
            ],
            "splited": [
                "\tpublic void testContainsAnyStringWithSupplementaryChars$catena_0() {\n\t\tassertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                         /***** ORIGINAL ASSERTION IS HERE *****/\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "\tpublic void testContainsAnyStringWithSupplementaryChars$catena_1() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\tassertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                         /***** ORIGINAL ASSERTION IS HERE *****/\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "\tpublic void testContainsAnyStringWithSupplementaryChars$catena_2() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\tassertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "\tpublic void testContainsAnyStringWithSupplementaryChars$catena_3() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\tassertEquals(-1, CharU20000.indexOf(CharU20001));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "\tpublic void testContainsAnyStringWithSupplementaryChars$catena_4() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\tassertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "\tpublic void testContainsAnyStringWithSupplementaryChars$catena_5() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\tassertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "\tpublic void testContainsAnyStringWithSupplementaryChars$catena_6() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\tassertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "\tpublic void testContainsAnyStringWithSupplementaryChars$catena_7() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\tassertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\t}"
            ],
            "func": {
                "0": "\tpublic void testContainsAnyStringWithSupplementaryChars$catena_0() {\n\t\tassertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                         /***** ORIGINAL ASSERTION IS HERE *****/\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "1": "\tpublic void testContainsAnyStringWithSupplementaryChars$catena_1() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\tassertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                         /***** ORIGINAL ASSERTION IS HERE *****/\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "2": "\tpublic void testContainsAnyStringWithSupplementaryChars$catena_2() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\tassertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                      /***** ORIGINAL ASSERTION IS HERE *****/\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "3": "\tpublic void testContainsAnyStringWithSupplementaryChars$catena_3() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\tassertEquals(-1, CharU20000.indexOf(CharU20001));                                                         /***** ORIGINAL ASSERTION IS HERE *****/\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "4": "\tpublic void testContainsAnyStringWithSupplementaryChars$catena_4() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\tassertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                                /***** ORIGINAL ASSERTION IS HERE *****/\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "5": "\tpublic void testContainsAnyStringWithSupplementaryChars$catena_5() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\tassertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                               /***** ORIGINAL ASSERTION IS HERE *****/\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "6": "\tpublic void testContainsAnyStringWithSupplementaryChars$catena_6() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\tassertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t}",
                "7": "\tpublic void testContainsAnyStringWithSupplementaryChars$catena_7() {\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                 }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Sanity check:\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\ttry{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\t// Test:\n\t\ttry{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                }catch(Throwable __SHOULD_BE_IGNORED){}\n\t\tassertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                     /***** ORIGINAL ASSERTION IS HERE *****/\n\t}"
            }
        }
    },
    "1111": {
        "failing_tests": [
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars$catena_6",
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars$catena_6",
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars$catena_7",
            "org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars$catena_7"
        ]
    }
}