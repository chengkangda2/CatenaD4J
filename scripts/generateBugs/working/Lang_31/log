---
Begin generate bug_id: Lang_31
num_of_hunks: 4
timeout for running: 3600
use working dir: ./working/data/Lang_31
Try to checkout Lang_31
build dir: ['./working/data/Lang_31/target/classes', './working/data/Lang_31/target/test-classes']
init FileManager
trace file: src/main/java/org/apache/commons/lang3/StringUtils.java
trying to replace old failing tests
edit: replace from 687 range 12 at src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
to
	public void testContainsAnyCharArrayWithSupplementaryChars$catena_0() {
		assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));           /***** ORIGINAL ASSERTION IS HERE *****/
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                   }catch(Throwable __SHOULD_BE_IGNORED){}
		// Sanity check:
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
		// Test:
		try{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}
	} 	public void testContainsAnyCharArrayWithSupplementaryChars$catena_1() {
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}
		assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));           /***** ORIGINAL ASSERTION IS HERE *****/
		try{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                   }catch(Throwable __SHOULD_BE_IGNORED){}
		// Sanity check:
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
		// Test:
		try{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}
	} 	public void testContainsAnyCharArrayWithSupplementaryChars$catena_2() {
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}
		assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                        /***** ORIGINAL ASSERTION IS HERE *****/
		// Sanity check:
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
		// Test:
		try{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}
	} 	public void testContainsAnyCharArrayWithSupplementaryChars$catena_3() {
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                   }catch(Throwable __SHOULD_BE_IGNORED){}
		// Sanity check:
		assertEquals(-1, CharU20000.indexOf(CharU20001));                                                         /***** ORIGINAL ASSERTION IS HERE *****/
		try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
		// Test:
		try{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}
	} 	public void testContainsAnyCharArrayWithSupplementaryChars$catena_4() {
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                   }catch(Throwable __SHOULD_BE_IGNORED){}
		// Sanity check:
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
		assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                                /***** ORIGINAL ASSERTION IS HERE *****/
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
		// Test:
		try{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}
	} 	public void testContainsAnyCharArrayWithSupplementaryChars$catena_5() {
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                   }catch(Throwable __SHOULD_BE_IGNORED){}
		// Sanity check:
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}
		assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                               /***** ORIGINAL ASSERTION IS HERE *****/
		// Test:
		try{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}
	} 	public void testContainsAnyCharArrayWithSupplementaryChars$catena_6() {
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                   }catch(Throwable __SHOULD_BE_IGNORED){}
		// Sanity check:
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
		// Test:
		assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                       /***** ORIGINAL ASSERTION IS HERE *****/
		try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}
	} 	public void testContainsAnyCharArrayWithSupplementaryChars$catena_7() {
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001.toCharArray()));      }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000.toCharArray()));                   }catch(Throwable __SHOULD_BE_IGNORED){}
		// Sanity check:
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
		// Test:
		try{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001.toCharArray()));                  }catch(Throwable __SHOULD_BE_IGNORED){}
		assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000.toCharArray()));                       /***** ORIGINAL ASSERTION IS HERE *****/
	}
edit: replace from 671 range 12 at src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
to
	public void testContainsAnyStringWithSupplementaryChars$catena_0() {
		assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                         /***** ORIGINAL ASSERTION IS HERE *****/
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
		// Sanity check:
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
		// Test:
		try{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                }catch(Throwable __SHOULD_BE_IGNORED){}
	} 	public void testContainsAnyStringWithSupplementaryChars$catena_1() {
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                    }catch(Throwable __SHOULD_BE_IGNORED){}
		assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                         /***** ORIGINAL ASSERTION IS HERE *****/
		try{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
		// Sanity check:
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
		// Test:
		try{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                }catch(Throwable __SHOULD_BE_IGNORED){}
	} 	public void testContainsAnyStringWithSupplementaryChars$catena_2() {
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                    }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}
		assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                      /***** ORIGINAL ASSERTION IS HERE *****/
		// Sanity check:
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
		// Test:
		try{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                }catch(Throwable __SHOULD_BE_IGNORED){}
	} 	public void testContainsAnyStringWithSupplementaryChars$catena_3() {
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                    }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
		// Sanity check:
		assertEquals(-1, CharU20000.indexOf(CharU20001));                                                         /***** ORIGINAL ASSERTION IS HERE *****/
		try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
		// Test:
		try{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                }catch(Throwable __SHOULD_BE_IGNORED){}
	} 	public void testContainsAnyStringWithSupplementaryChars$catena_4() {
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                    }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
		// Sanity check:
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
		assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                                /***** ORIGINAL ASSERTION IS HERE *****/
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
		// Test:
		try{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                }catch(Throwable __SHOULD_BE_IGNORED){}
	} 	public void testContainsAnyStringWithSupplementaryChars$catena_5() {
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                    }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
		// Sanity check:
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}
		assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                               /***** ORIGINAL ASSERTION IS HERE *****/
		// Test:
		try{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                }catch(Throwable __SHOULD_BE_IGNORED){}
	} 	public void testContainsAnyStringWithSupplementaryChars$catena_6() {
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                    }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
		// Sanity check:
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
		// Test:
		assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                     /***** ORIGINAL ASSERTION IS HERE *****/
		try{ assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                }catch(Throwable __SHOULD_BE_IGNORED){}
	} 	public void testContainsAnyStringWithSupplementaryChars$catena_7() {
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20000));                    }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(true, StringUtils.containsAny(CharU20000 + CharU20001, CharU20001));                    }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(true, StringUtils.containsAny(CharU20000, CharU20000));                                 }catch(Throwable __SHOULD_BE_IGNORED){}
		// Sanity check:
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001));                                                    }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(0, CharU20000.indexOf(CharU20001.charAt(0)));                                           }catch(Throwable __SHOULD_BE_IGNORED){}
		try{ assertEquals(-1, CharU20000.indexOf(CharU20001.charAt(1)));                                          }catch(Throwable __SHOULD_BE_IGNORED){}
		// Test:
		try{ assertEquals(false, StringUtils.containsAny(CharU20000, CharU20001));                                }catch(Throwable __SHOULD_BE_IGNORED){}
		assertEquals(false, StringUtils.containsAny(CharU20001, CharU20000));                                     /***** ORIGINAL ASSERTION IS HERE *****/
	}
trace file: src/test/java/org/apache/commons/lang3/StringUtilsEqualsIndexOfTest.java
new test num: 16
ori test num: 0
pattern: 0000
patches are written to file
running tests...
used time: Finished in 25.73 seconds
Failing tests: 4
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars$catena_6
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars$catena_7
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars$catena_6
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars$catena_7
processed: 0000
pattern: 0001
try to fix hunk: 3
insert before 1453 with 					}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0001
pattern: 0010
try to fix hunk: 2
insert before 1451 with 						if (searchChars[j + 1] == cs.charAt(i + 1)) {
							return true;
						}
					} else {

patches are written to file
running tests...
used time: Finished in 19.89 seconds
Failing tests: 8
	org.apache.commons.lang3.StringEscapeUtilsTest::testUnescapeCsvString
	org.apache.commons.lang3.StringEscapeUtilsTest::testUnescapeCsvWriter
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringString
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars$catena_6
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars$catena_7
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringChararray
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars$catena_6
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars$catena_7
Includes new failing tests, set to unusable
processed: 0010
pattern: 0100
try to fix hunk: 1
insert before 1450 with 					if (i < csLastIndex && j < searchLastIndex && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0100
pattern: 1000
try to fix hunk: 0
insert before 1446 with 		int csLastIndex = csLength - 1;
		int searchLastIndex = searchLength - 1;

patches are written to file
running tests...
used time: Finished in 21.04 seconds
Failing tests: 4
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars$catena_6
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars$catena_7
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars$catena_6
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars$catena_7
No new failing tests but only 1 hunk
processed: 1000
pattern: 0011
try to fix hunk: 2
insert before 1451 with 						if (searchChars[j + 1] == cs.charAt(i + 1)) {
							return true;
						}
					} else {

try to fix hunk: 3
insert before 1453 with 					}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0011
pattern: 0101
try to fix hunk: 1
insert before 1450 with 					if (i < csLastIndex && j < searchLastIndex && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {

try to fix hunk: 3
insert before 1453 with 					}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0101
pattern: 0110
try to fix hunk: 1
insert before 1450 with 					if (i < csLastIndex && j < searchLastIndex && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {

try to fix hunk: 2
insert before 1451 with 						if (searchChars[j + 1] == cs.charAt(i + 1)) {
							return true;
						}
					} else {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0110
pattern: 1001
try to fix hunk: 0
insert before 1446 with 		int csLastIndex = csLength - 1;
		int searchLastIndex = searchLength - 1;

try to fix hunk: 3
insert before 1453 with 					}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1001
pattern: 1010
try to fix hunk: 0
insert before 1446 with 		int csLastIndex = csLength - 1;
		int searchLastIndex = searchLength - 1;

try to fix hunk: 2
insert before 1451 with 						if (searchChars[j + 1] == cs.charAt(i + 1)) {
							return true;
						}
					} else {

patches are written to file
running tests...
used time: Finished in 20.36 seconds
Failing tests: 8
	org.apache.commons.lang3.StringEscapeUtilsTest::testUnescapeCsvString
	org.apache.commons.lang3.StringEscapeUtilsTest::testUnescapeCsvWriter
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringString
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars$catena_6
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars$catena_7
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringChararray
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars$catena_6
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars$catena_7
Includes new failing tests, set to unusable
processed: 1010
pattern: 1100
try to fix hunk: 0
insert before 1446 with 		int csLastIndex = csLength - 1;
		int searchLastIndex = searchLength - 1;

try to fix hunk: 1
insert before 1450 with 					if (i < csLastIndex && j < searchLastIndex && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1100
pattern: 0111
try to fix hunk: 1
insert before 1450 with 					if (i < csLastIndex && j < searchLastIndex && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {

try to fix hunk: 2
insert before 1451 with 						if (searchChars[j + 1] == cs.charAt(i + 1)) {
							return true;
						}
					} else {

try to fix hunk: 3
insert before 1453 with 					}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 0111
pattern: 1011
try to fix hunk: 0
insert before 1446 with 		int csLastIndex = csLength - 1;
		int searchLastIndex = searchLength - 1;

try to fix hunk: 2
insert before 1451 with 						if (searchChars[j + 1] == cs.charAt(i + 1)) {
							return true;
						}
					} else {

try to fix hunk: 3
insert before 1453 with 					}

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1011
pattern: 1101
try to fix hunk: 0
insert before 1446 with 		int csLastIndex = csLength - 1;
		int searchLastIndex = searchLength - 1;

try to fix hunk: 1
insert before 1450 with 					if (i < csLastIndex && j < searchLastIndex && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {

try to fix hunk: 3
insert before 1453 with 					}

patches are written to file
running tests...
used time: Finished in 19.19 seconds
Failing tests: 8
	org.apache.commons.lang3.StringEscapeUtilsTest::testUnescapeCsvString
	org.apache.commons.lang3.StringEscapeUtilsTest::testUnescapeCsvWriter
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringString
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars$catena_6
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars$catena_7
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAny_StringChararray
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars$catena_6
	org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars$catena_7
Includes new failing tests, set to unusable
processed: 1101
pattern: 1110
try to fix hunk: 0
insert before 1446 with 		int csLastIndex = csLength - 1;
		int searchLastIndex = searchLength - 1;

try to fix hunk: 1
insert before 1450 with 					if (i < csLastIndex && j < searchLastIndex && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {

try to fix hunk: 2
insert before 1451 with 						if (searchChars[j + 1] == cs.charAt(i + 1)) {
							return true;
						}
					} else {

patches are written to file
running tests...
seems testing failed, see output:
<OUTPUT>
<Common Compile Failed>
<ENDOUTPUT>
processed: 1110
pattern: 1111
try to fix hunk: 0
insert before 1446 with 		int csLastIndex = csLength - 1;
		int searchLastIndex = searchLength - 1;

try to fix hunk: 1
insert before 1450 with 					if (i < csLastIndex && j < searchLastIndex && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {

try to fix hunk: 2
insert before 1451 with 						if (searchChars[j + 1] == cs.charAt(i + 1)) {
							return true;
						}
					} else {

try to fix hunk: 3
insert before 1453 with 					}

patches are written to file
running tests...
used time: Finished in 19.95 seconds
Failing tests: 0
Can independently fix ['org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars$catena_6', 'org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars$catena_7', 'org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars$catena_6', 'org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars$catena_7']
select new bug
Pattern: 1111
new failing tests:
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars$catena_6
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars$catena_7
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyStringWithSupplementaryChars$catena_6
org.apache.commons.lang3.StringUtilsEqualsIndexOfTest::testContainsAnyCharArrayWithSupplementaryChars$catena_7
Save found bug
processed: 1111
Find 1 new bugs
