---
Begin generate bug_id: Math_77
num_of_hunks: 2
use working dir: ./working/data/Math_77
Try to checkout Math_77
build dir: ['./working/data/Math_77/target/classes', './working/data/Math_77/target/test-classes']
init FileManager
trace file: src/main/java/org/apache/commons/math/linear/ArrayRealVector.java
trace file: src/main/java/org/apache/commons/math/linear/OpenMapRealVector.java
trying to replace old failing tests
edit: replace from 1080 range 153 at src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java
to
    public void testBasicFunctions$catena_0() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                                 /***** ORIGINAL ASSERTION IS HERE *****/

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_1() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        assertEquals("compare values  ", 17.0, d_getL1Norm);                                                /***** ORIGINAL ASSERTION IS HERE *****/

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_2() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        assertEquals("compare values  ", 6.0, d_getLInfNorm);                                               /***** ORIGINAL ASSERTION IS HERE *****/


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_3() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                                  /***** ORIGINAL ASSERTION IS HERE *****/

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_4() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                                /***** ORIGINAL ASSERTION IS HERE *****/

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_5() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                                /***** ORIGINAL ASSERTION IS HERE *****/

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_6() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        assertEquals("compare values  ",9d, d_getL1Distance );                                              /***** ORIGINAL ASSERTION IS HERE *****/

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_7() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        assertEquals("compare values  ",9d, d_getL1Distance_2 );                                            /***** ORIGINAL ASSERTION IS HERE *****/

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_8() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        assertEquals("compare values  ",9d, d_getL1Distance_3 );                                            /***** ORIGINAL ASSERTION IS HERE *****/

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_9() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        assertEquals("compare values  ",3d, d_getLInfDistance );                                            /***** ORIGINAL ASSERTION IS HERE *****/

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_10() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                          /***** ORIGINAL ASSERTION IS HERE *****/

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_11() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                          /***** ORIGINAL ASSERTION IS HERE *****/

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_12() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                              /***** ORIGINAL ASSERTION IS HERE *****/

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_13() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                          /***** ORIGINAL ASSERTION IS HERE *****/

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_14() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);                    /***** ORIGINAL ASSERTION IS HERE *****/

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_15() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);                /***** ORIGINAL ASSERTION IS HERE *****/

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_16() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);              /***** ORIGINAL ASSERTION IS HERE *****/

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_17() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);          /***** ORIGINAL ASSERTION IS HERE *****/

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_18() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);          /***** ORIGINAL ASSERTION IS HERE *****/

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_19() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);                  /***** ORIGINAL ASSERTION IS HERE *****/

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_20() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);              /***** ORIGINAL ASSERTION IS HERE *****/

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_21() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);              /***** ORIGINAL ASSERTION IS HERE *****/

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_22() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        assertEquals("compare val ",32d, dot);                                                              /***** ORIGINAL ASSERTION IS HERE *****/

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_23() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        assertEquals("compare val ",32d, dot_2);                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_24() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                      /***** ORIGINAL ASSERTION IS HERE *****/

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_25() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                                    /***** ORIGINAL ASSERTION IS HERE *****/

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_26() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                                    /***** ORIGINAL ASSERTION IS HERE *****/

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_27() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);         /***** ORIGINAL ASSERTION IS HERE *****/

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_28() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            fail("Expecting ArithmeticException");                                                          /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_29() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            fail("wrong exception caught");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_30() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);            /***** ORIGINAL ASSERTION IS HERE *****/
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_31() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            fail("Expecting ArithmeticException");                                                          /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_32() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            fail("wrong exception caught");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_33() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);              /***** ORIGINAL ASSERTION IS HERE *****/

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_34() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);          /***** ORIGINAL ASSERTION IS HERE *****/

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_35() {
        ArrayRealVector v1 = new ArrayRealVector(vec1);
        ArrayRealVector v2 = new ArrayRealVector(vec2);
        ArrayRealVector v5 = new ArrayRealVector(vec5);
        ArrayRealVector v_null = new ArrayRealVector(vec_null);

        RealVectorTestImpl v2_t = new RealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}


        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_3 = v1.getDistance((RealVector) v2);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_3 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_3 = v1. getL1Distance((RealVector) v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_3 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_3 = v1. getLInfDistance((RealVector) v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_3 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        ArrayRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVectorTestImpl vt2 = new RealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        ArrayRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        ArrayRealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_3 = v1.ebeMultiply((RealVector) v2);
        double[] result_ebeMultiply_3 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_3.getData(),result_ebeMultiply_3,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        ArrayRealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_3 = v1.ebeDivide((RealVector) v2);
        double[] result_ebeDivide_3 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_3.getData(),result_ebeDivide_3,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_3 = v1.outerProduct((RealVector) v2);
        try{ assertEquals("compare val ",4d, m_outerProduct_3.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_unitize = (ArrayRealVector)v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        ArrayRealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_3 = v1.projection(v2.getData());
        double[] result_projection_3 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        assertClose("compare vect", v_projection_3.getData(), result_projection_3, normTolerance);          /***** ORIGINAL ASSERTION IS HERE *****/

    }
edit: replace from 950 range 127 at src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java
to
    public void testBasicFunctions$catena_0() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                                 /***** ORIGINAL ASSERTION IS HERE *****/

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_1() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        assertEquals("compare values  ", 17.0, d_getL1Norm);                                                /***** ORIGINAL ASSERTION IS HERE *****/

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_2() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        assertEquals("compare values  ", 6.0, d_getLInfNorm);                                               /***** ORIGINAL ASSERTION IS HERE *****/

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_3() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                                  /***** ORIGINAL ASSERTION IS HERE *****/

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_4() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                                /***** ORIGINAL ASSERTION IS HERE *****/

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_5() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        assertEquals("compare values  ",9d, d_getL1Distance );                                              /***** ORIGINAL ASSERTION IS HERE *****/

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_6() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        assertEquals("compare values  ",9d, d_getL1Distance_2 );                                            /***** ORIGINAL ASSERTION IS HERE *****/

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_7() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        assertEquals("compare values  ",3d, d_getLInfDistance );                                            /***** ORIGINAL ASSERTION IS HERE *****/

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_8() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                          /***** ORIGINAL ASSERTION IS HERE *****/

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_9() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                              /***** ORIGINAL ASSERTION IS HERE *****/

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_10() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                          /***** ORIGINAL ASSERTION IS HERE *****/

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_11() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);                    /***** ORIGINAL ASSERTION IS HERE *****/

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_12() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);                /***** ORIGINAL ASSERTION IS HERE *****/

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_13() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);              /***** ORIGINAL ASSERTION IS HERE *****/

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_14() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);          /***** ORIGINAL ASSERTION IS HERE *****/

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_15() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);                  /***** ORIGINAL ASSERTION IS HERE *****/

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_16() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);              /***** ORIGINAL ASSERTION IS HERE *****/

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_17() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        assertEquals("compare val ",32d, dot);                                                              /***** ORIGINAL ASSERTION IS HERE *****/

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_18() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        assertEquals("compare val ",32d, dot_2);                                                            /***** ORIGINAL ASSERTION IS HERE *****/

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_19() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                      /***** ORIGINAL ASSERTION IS HERE *****/

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_20() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                                    /***** ORIGINAL ASSERTION IS HERE *****/

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_21() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);         /***** ORIGINAL ASSERTION IS HERE *****/

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_22() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            fail("Expecting ArithmeticException");                                                          /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_23() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            fail("wrong exception caught");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_24() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);            /***** ORIGINAL ASSERTION IS HERE *****/
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_25() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            fail("Expecting ArithmeticException");                                                          /***** ORIGINAL ASSERTION IS HERE *****/
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_26() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            fail("wrong exception caught");                                                                 /***** ORIGINAL ASSERTION IS HERE *****/
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_27() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);              /***** ORIGINAL ASSERTION IS HERE *****/

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

    }     public void testBasicFunctions$catena_28() {
        OpenMapRealVector v1 = new OpenMapRealVector(vec1);
        OpenMapRealVector v2 = new OpenMapRealVector(vec2);
        OpenMapRealVector v5 = new OpenMapRealVector(vec5);
        OpenMapRealVector v_null = new OpenMapRealVector(vec_null);

        SparseRealVectorTestImpl v2_t = new SparseRealVectorTestImpl(vec2);

        // emacs calc: [-4, 0, 3, 1, -6, 3] A --> 8.4261497731763586307
        double d_getNorm = v5.getNorm();
        try{ assertEquals("compare values  ", 8.4261497731763586307, d_getNorm);                            }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vN --> 17
        double d_getL1Norm = v5.getL1Norm();
        try{ assertEquals("compare values  ", 17.0, d_getL1Norm);                                           }catch(Throwable __SHOULD_BE_IGNORED){}

        // emacs calc: [-4, 0, 3, 1, -6, 3] vn --> 6
        double d_getLInfNorm = v5.getLInfNorm();
        try{ assertEquals("compare values  ", 6.0, d_getLInfNorm);                                          }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist = v1.getDistance(v2);
        try{ assertEquals("compare values  ",v1.subtract(v2).getNorm(), dist );                             }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  sqrt(sumsq(v1-v2))
        double dist_2 = v1.getDistance(v2_t);
        try{ assertEquals("compare values  ", v1.subtract(v2).getNorm(),dist_2 );                           }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getL1Distance = v1. getL1Distance(v2);
        try{ assertEquals("compare values  ",9d, d_getL1Distance );                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getL1Distance_2 = v1. getL1Distance(v2_t);
        try{ assertEquals("compare values  ",9d, d_getL1Distance_2 );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  ???
        double d_getLInfDistance = v1. getLInfDistance(v2);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance );                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        double d_getLInfDistance_2 = v1. getLInfDistance(v2_t);
        try{ assertEquals("compare values  ",3d, d_getLInfDistance_2 );                                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 + v2
        OpenMapRealVector v_add = v1.add(v2);
        double[] result_add = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add.getData(),result_add,normTolerance);                         }catch(Throwable __SHOULD_BE_IGNORED){}

        SparseRealVectorTestImpl vt2 = new SparseRealVectorTestImpl(vec2);
        RealVector v_add_i = v1.add(vt2);
        double[] result_add_i = {5d, 7d, 9d};
        try{ assertClose("compare vect" ,v_add_i.getData(),result_add_i,normTolerance);                     }catch(Throwable __SHOULD_BE_IGNORED){}

        //octave =  v1 - v2
        OpenMapRealVector v_subtract = v1.subtract(v2);
        double[] result_subtract = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract.getData(),result_subtract,normTolerance);               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_subtract_i = v1.subtract(vt2);
        double[] result_subtract_i = {-3d, -3d, -3d};
        try{ assertClose("compare vect" ,v_subtract_i.getData(),result_subtract_i,normTolerance);           }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 .* v2
        RealVector  v_ebeMultiply = v1.ebeMultiply(v2);
        double[] result_ebeMultiply = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply.getData(),result_ebeMultiply,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeMultiply_2 = v1.ebeMultiply(v2_t);
        double[] result_ebeMultiply_2 = {4d, 10d, 18d};
        try{ assertClose("compare vect" ,v_ebeMultiply_2.getData(),result_ebeMultiply_2,normTolerance);     }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave v1 ./ v2
        RealVector  v_ebeDivide = v1.ebeDivide(v2);
        double[] result_ebeDivide = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide.getData(),result_ebeDivide,normTolerance);             }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector  v_ebeDivide_2 = v1.ebeDivide(v2_t);
        double[] result_ebeDivide_2 = {0.25d, 0.4d, 0.5d};
        try{ assertClose("compare vect" ,v_ebeDivide_2.getData(),result_ebeDivide_2,normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2)
        double dot =  v1.dotProduct(v2);
        try{ assertEquals("compare val ",32d, dot);                                                         }catch(Throwable __SHOULD_BE_IGNORED){}

        // octave  dot(v1,v2_t)
        double dot_2 =  v1.dotProduct(v2_t);
        try{ assertEquals("compare val ",32d, dot_2);                                                       }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct = v1.outerProduct(v2);
        try{ assertEquals("compare val ",4d, m_outerProduct.getEntry(0,0));                                 }catch(Throwable __SHOULD_BE_IGNORED){}

        RealMatrix m_outerProduct_2 = v1.outerProduct(v2_t);
        try{ assertEquals("compare val ",4d, m_outerProduct_2.getEntry(0,0));                               }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_unitVector = v1.unitVector();
        RealVector v_unitVector_2 = v1.mapDivide(v1.getNorm());
        try{ assertClose("compare vect" ,v_unitVector.getData(),v_unitVector_2.getData(),normTolerance);    }catch(Throwable __SHOULD_BE_IGNORED){}

        try {
            v_null.unitVector();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        OpenMapRealVector v_unitize = v1.copy();
        v_unitize.unitize();
        try{ assertClose("compare vect" ,v_unitVector_2.getData(),v_unitize.getData(),normTolerance);       }catch(Throwable __SHOULD_BE_IGNORED){}
        try {
            v_null.unitize();
            try{ fail("Expecting ArithmeticException");                                                     }catch(Throwable __SHOULD_BE_IGNORED){}
        } catch (ArithmeticException ex) {
            // expected behavior
        } catch (Exception e) {
            try{ fail("wrong exception caught");                                                            }catch(Throwable __SHOULD_BE_IGNORED){}
        }

        RealVector v_projection = v1.projection(v2);
        double[] result_projection = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        try{ assertClose("compare vect", v_projection.getData(), result_projection, normTolerance);         }catch(Throwable __SHOULD_BE_IGNORED){}

        RealVector v_projection_2 = v1.projection(v2_t);
        double[] result_projection_2 = {1.662337662337662, 2.0779220779220777, 2.493506493506493};
        assertClose("compare vect", v_projection_2.getData(), result_projection_2, normTolerance);          /***** ORIGINAL ASSERTION IS HERE *****/

    }
trace file: src/test/java/org/apache/commons/math/linear/ArrayRealVectorTest.java
trace file: src/test/java/org/apache/commons/math/linear/SparseRealVectorTest.java
new test num: 65
ori test num: 0
pattern: 00
patches are written to file
running tests...
used time: Finished in 41.23 seconds
Failing tests: 2
	org.apache.commons.math.linear.ArrayRealVectorTest::testBasicFunctions$catena_2
	org.apache.commons.math.linear.SparseRealVectorTest::testBasicFunctions$catena_2
pattern: 01
try to fix hunk: 1
delete from 498 with range 9
patches are written to file
running tests...
used time: Finished in 26.25 seconds
Failing tests: 1
	org.apache.commons.math.linear.ArrayRealVectorTest::testBasicFunctions$catena_2
No new failing tests but only 1 hunk
pattern: 10
try to fix hunk: 0
replace from 721 with range 1 to
            max = Math.max(max, Math.abs(a));

patches are written to file
running tests...
used time: Finished in 28.80 seconds
Failing tests: 1
	org.apache.commons.math.linear.SparseRealVectorTest::testBasicFunctions$catena_2
No new failing tests but only 1 hunk
pattern: 11
try to fix hunk: 0
replace from 721 with range 1 to
            max = Math.max(max, Math.abs(a));

try to fix hunk: 1
delete from 498 with range 9
patches are written to file
running tests...
used time: Finished in 26.57 seconds
Failing tests: 0
Can independently fix []
Could not fix independently
Find 0 new bugs
